(()=>{"use strict";var e,t={8061:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function u(e){try{a(o.next(e))}catch(e){i(e)}}function s(e){try{a(o.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=void 0;const r=n(9416),i=n(8681);function u(e,t){return o(this,void 0,void 0,(function*(){const n=yield r.browser.storage.local.get(e);return void 0!==n[e]?n[e]:t}))}function s(e){return o(this,void 0,void 0,(function*(){const t=i.defaultSettings[e];for(const n of t){if(void 0===n.value)continue;const t=`setting-${e}-${n.key}`;n.value=yield u(t,n.value)}return t}))}t.storageGet=u,t.retrieveSettings=s,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},n=yield s(e);for(const e of n)void 0!==e.value&&(t[e.key]=e);return t}))}},8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={bestbuy:[{key:"changeResetReload",description:"Reset auto-reload on change without refresh",type:"checkbox",value:!0},{key:"notificationSoundURL",description:"Notification sound URL (mp3)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"testNotificationSound",description:"Test current notification sound",type:"button",instruction:"testNotificationSound"}]}}},n={};function o(e){var r=n[e];if(void 0!==r)return r.exports;var i=n[e]={exports:{}};return t[e].call(i.exports,i,i.exports,o),i.exports}o.m=t,e=[],o.O=(t,n,r,i)=>{if(!n){var u=1/0;for(c=0;c<e.length;c++){for(var[n,r,i]=e[c],s=!0,a=0;a<n.length;a++)(!1&i||u>=i)&&Object.keys(o.O).every((e=>o.O[e](n[a])))?n.splice(a--,1):(s=!1,i<u&&(u=i));s&&(e.splice(c--,1),t=r())}return t}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=324,(()=>{var e={324:0,533:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[u,s,a]=n,c=0;for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(a)var f=a(o);for(t&&t(n);c<u.length;c++)i=u[c],o.o(e,i)&&e[i]&&e[i][0](),e[u[c]]=0;return o.O(f)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var r=o.O(void 0,[736],(()=>o(8061)));r=o.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,