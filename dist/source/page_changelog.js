(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.2.1",bulletpoints:["Fixed empty blacklist disqualifying all saved items",'Replaced icon which said "AQU" instead of "AGU" (original extension name was AutoQueueUtilities)',"<b>TODO:</b> Fix notification sound not playing if user hasn't interacted with document, maybe play from background instead?"]},{version:"b0.2.0",bulletpoints:["Added About tab showing some information and usage instructions","Changed extension icon to something somewhat more presentable","Removed placeholder logging tab pending further development","Added blacklisted keywords functionality to script (still no test buttons)","Other minor edits to extension popup styling, nothing too major"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]},{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Features not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistedKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"},{key:"blacklistedKeywords",description:"Blacklisted keywords (comma-separated)",type:"text",value:""}]}},3113:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(i(8197)),r=i(8681),a=$(".changelog")[0];new o.default(a,{autoHide:!1}),$(a).find(".content-main").load("/pages/changelog.html",(function(){const e=$("#changelog-contents")[0];for(const t of r.changelogs){const i=document.createElement("br");e.appendChild(i);const n=document.createElement("div");n.id=`changelog-${t.version}`,e.appendChild(n);const o=document.createElement("p");o.classList.add("changelog-title"),n.appendChild(o),o.innerHTML=`<b>${t.version}</b>`;for(const e of t.bulletpoints){const t=document.createElement("p");t.classList.add("bulletpoint"),n.appendChild(t),t.innerHTML=`â€¢ ${e}`}}}))}},i={};function n(e){var o=i[e];if(void 0!==o)return o.exports;var r=i[e]={exports:{}};return t[e].call(r.exports,r,r.exports,n),r.exports}n.m=t,e=[],n.O=(t,i,o,r)=>{if(!i){var a=1/0;for(c=0;c<e.length;c++){for(var[i,o,r]=e[c],s=!0,l=0;l<i.length;l++)(!1&r||a>=r)&&Object.keys(n.O).every((e=>n.O[e](i[l])))?i.splice(l--,1):(s=!1,r<a&&(a=r));s&&(e.splice(c--,1),t=o())}return t}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[i,o,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.j=693,(()=>{var e={693:0,533:0};n.O.j=t=>0===e[t];var t=(t,i)=>{var o,r,[a,s,l]=i,c=0;for(o in s)n.o(s,o)&&(n.m[o]=s[o]);if(l)var d=l(n);for(t&&t(i);c<a.length;c++)r=a[c],n.o(e,r)&&e[r]&&e[r][0](),e[a[c]]=0;return n.O(d)},i=self.webpackChunkextension=self.webpackChunkextension||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var o=n.O(void 0,[736],(()=>n(3113)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,