(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.2.0",bulletpoints:["Added About tab showing some information and usage instructions","Changed extension icon to something somewhat more presentable","Removed placeholder logging tab pending further development","Added blacklisted keywords functionality to script (still no test buttons)","Other minor edits to extension popup styling, nothing too major"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]},{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Features not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistedKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"},{key:"blacklistedKeywords",description:"Blacklisted keywords (comma-separated)",type:"text",value:""}]}},3113:function(e,t,o){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(8197)),r=o(8681),s=$(".changelog")[0];new i.default(s,{autoHide:!1}),$(s).find(".content-main").load("/pages/changelog.html",(function(){const e=$("#changelog-contents")[0];for(const t of r.changelogs){const o=document.createElement("br");e.appendChild(o);const n=document.createElement("div");n.id=`changelog-${t.version}`,e.appendChild(n);const i=document.createElement("p");i.classList.add("changelog-title"),n.appendChild(i),i.innerHTML=`<b>${t.version}</b>`;for(const e of t.bulletpoints){const t=document.createElement("p");t.classList.add("bulletpoint"),n.appendChild(t),t.innerHTML=`â€¢ ${e}`}}}))}},o={};function n(e){var i=o[e];if(void 0!==i)return i.exports;var r=o[e]={exports:{}};return t[e].call(r.exports,r,r.exports,n),r.exports}n.m=t,e=[],n.O=(t,o,i,r)=>{if(!o){var s=1/0;for(c=0;c<e.length;c++){for(var[o,i,r]=e[c],a=!0,l=0;l<o.length;l++)(!1&r||s>=r)&&Object.keys(n.O).every((e=>n.O[e](o[l])))?o.splice(l--,1):(a=!1,r<s&&(s=r));a&&(e.splice(c--,1),t=i())}return t}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[o,i,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.j=693,(()=>{var e={693:0,533:0};n.O.j=t=>0===e[t];var t=(t,o)=>{var i,r,[s,a,l]=o,c=0;for(i in a)n.o(a,i)&&(n.m[i]=a[i]);if(l)var d=l(n);for(t&&t(o);c<s.length;c++)r=s[c],n.o(e,r)&&e[r]&&e[r][0](),e[s[c]]=0;return n.O(d)},o=self.webpackChunkextension=self.webpackChunkextension||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var i=n.O(void 0,[736],(()=>n(3113)));i=n.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,