(()=>{"use strict";var e,t={9705:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,r){function s(e){try{a(n.next(e))}catch(e){r(e)}}function l(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,l)}a((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=o(9416),r=o(1209);let s,l={},a={notificationSoundURL:function(){return n(this,void 0,void 0,(function*(){s=new Audio(l.notificationSoundURL.value)}))},whitelistKeywords:function(){return n(this,void 0,void 0,(function*(){c=l.whitelistKeywords.value.split(",").map((e=>e.trim().toLowerCase()))}))}},u={updatedSetting:function(e,t){return n(this,void 0,void 0,(function*(){const[o,n]=e.split("-");"bestbuy"===o&&(l[n].value=t,yield a[n]())}))},testNotificationSound:function(){return n(this,void 0,void 0,(function*(){s.play()}))}},c=[],d=[],f=0,p=0;!function(){n(this,void 0,void 0,(function*(){l=yield r.retrieveSettingsKV("bestbuy");for(const[e,t]of Object.entries(a))yield t();i.browser.runtime.onMessage.addListener((function(e,t){return n(this,void 0,void 0,(function*(){const t=u[e.instruction];if(void 0!==t)return yield t(...e.arguments||[])}))}));const e={data:atob(localStorage.getItem("purchaseTracker")||"e30="),time:Number(new Date)};yield i.browser.storage.local.set({"bestbuy-queueInfo":e}),i.browser.runtime.sendMessage({instruction:"updatedQueueInfo",arguments:[e]}),yield function(){return n(this,void 0,void 0,(function*(){for(;0===$(".page-heading__title").length;)yield r.sleep(l.globalPollingInterval.value);const e=$(".item-list")[0];for(f=void 0!==e?e.childNodes.length:0;;){for(;$(".page-spinner--in").length>0;)yield r.sleep(l.globalPollingInterval.value);const e=$(".item-list")[0],t=void 0!==e?e.childNodes.length:0;if(t>f&&s.play(),f=t,t>0&&!0===l.stopClickCartOccupied.value){yield r.sleep(l.globalPollingInterval.value);continue}if(!1===d.some((e=>$.contains(document.body,e.wrapper)))){let e=$(".saved-items__card-wrapper").toArray();for(;0===e.length;)yield r.sleep(l.globalPollingInterval.value),e=$(".saved-items__card-wrapper").toArray();d=e.map((function(e){return{wrapper:e,sku:e.getAttribute("data-test-saved-sku"),description:$(e).find(".simple-item__description")[0].innerText,addButton:$(e).find(".btn")[0]}})),d.length}const o=d.filter((e=>c.some((t=>""!==t&&e.description.toLowerCase().includes(t)))));for(const e of o){const t=r.elementColor(e.addButton);if(!0===["white","blue","yellow"].includes(t)){const t=Number(new Date)-p;!0===l.autoClickWhitelisted.value&&t>l.successiveClickTimeout.value&&(e.addButton.click(),p=Number(new Date))}}yield r.sleep(l.globalPollingInterval.value)}}))}()}))}()},8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"}]}},1209:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,r){function s(e){try{a(n.next(e))}catch(e){r(e)}}function l(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,l)}a((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const i=o(9416),r=o(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function l(e,t){return n(this,void 0,void 0,(function*(){const o=yield i.browser.storage.local.get(e);return void 0!==o[e]?o[e]:t}))}function a(e){return n(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const o of t){if(void 0===o.value)continue;const t=`setting-${e}-${o.key}`;o.value=yield l(t,o.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const o={r:0,g:0,b:0},n=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);o.r=Number(n[1]),o.g=Number(n[2]),o.b=Number(n[3]);const i={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(o.r-e.r,2)+Math.pow(o.g-e.g,2)+(o.b-e.b));t<i.distance&&(i.color=e.color,i.distance=t)}return i.color},t.storageGet=l,t.retrieveSettings=a,t.retrieveSettingsKV=function(e){return n(this,void 0,void 0,(function*(){const t={},o=yield a(e);for(const e of o)void 0!==e.value&&(t[e.key]=e);return t}))}}},o={};function n(e){var i=o[e];if(void 0!==i)return i.exports;var r=o[e]={exports:{}};return t[e].call(r.exports,r,r.exports,n),r.exports}n.m=t,e=[],n.O=(t,o,i,r)=>{if(!o){var s=1/0;for(u=0;u<e.length;u++){for(var[o,i,r]=e[u],l=!0,a=0;a<o.length;a++)(!1&r||s>=r)&&Object.keys(n.O).every((e=>n.O[e](o[a])))?o.splice(a--,1):(l=!1,r<s&&(s=r));l&&(e.splice(u--,1),t=i())}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[o,i,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.j=843,(()=>{var e={843:0,533:0,386:0};n.O.j=t=>0===e[t];var t=(t,o)=>{var i,r,[s,l,a]=o,u=0;for(i in l)n.o(l,i)&&(n.m[i]=l[i]);if(a)var c=a(n);for(t&&t(o);u<s.length;u++)r=s[u],n.o(e,r)&&e[r]&&e[r][0](),e[s[u]]=0;return n.O(c)},o=self.webpackChunkextension=self.webpackChunkextension||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var i=n.O(void 0,[736],(()=>n(9705)));i=n.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,