(()=>{"use strict";var t,e={9705:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function u(t){try{s(o.next(t))}catch(t){r(t)}}function c(t){try{s(o.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,c)}s((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=n(9416),r=n(1209);let u,c={},s={notificationSoundURL:function(){return o(this,void 0,void 0,(function*(){u=new Audio(c.notificationSoundURL.value)}))}},a={updatedSetting:function(t,e){return o(this,void 0,void 0,(function*(){const[n,o]=t.split("-");"bestbuy"===n&&(c[o]=e,yield s[o]())}))},testNotificationSound:function(){return o(this,void 0,void 0,(function*(){u.play()}))}},l=[];!function(){o(this,void 0,void 0,(function*(){c=yield r.retrieveSettingsKV("bestbuy"),yield s.notificationSoundURL(),i.browser.runtime.onMessage.addListener((function(t,e){return o(this,void 0,void 0,(function*(){const e=a[t.instruction];if(void 0!==e)return yield e(...t.arguments||[])}))}));const t={data:atob(localStorage.getItem("purchaseTracker")||"e30="),time:Number(new Date)};yield i.browser.storage.local.set({"bestbuy-queueInfo":t}),i.browser.runtime.sendMessage({instruction:"updatedQueueInfo",arguments:[t]}),__META_LAYER_META_DATA._order=__META_LAYER_META_DATA.order,Object.defineProperty(__META_LAYER_META_DATA,"order",{get:function(){return __META_LAYER_META_DATA._order},set:function(t){try{const e=__META_LAYER_META_DATA.order?__META_LAYER_META_DATA.order.lineItems.length:0;t.lineItems.length>e&&u.play()}catch(t){console.error(t)}__META_LAYER_META_DATA._order=t}}),yield function(){return o(this,void 0,void 0,(function*(){for(;;)if(!1===l.some((t=>$.contains(document.body,t.wrapper)))){let t=$(".saved-items__card-wrapper").toArray();for(;0===t.length;)yield r.sleep(c.globalPollingInterval.value),t=$(".saved-items__card-wrapper").toArray();l=t.map((function(t){return{wrapper:t,sku:t.getAttribute("data-test-saved-sku"),description:$(t).find(".simple-item__description")[0].innerText,addButton:$(t).find(".btn")[0]}}))}}))}()}))}()},8681:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.defaultSettings=void 0,e.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between successive button clicks",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Custom notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"testNotificationSound",description:"Play current notification sound",type:"button",instruction:"testNotificationSound"}]}},1209:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function u(t){try{s(o.next(t))}catch(t){r(t)}}function c(t){try{s(o.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,c)}s((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.retrieveSettingsKV=e.retrieveSettings=e.storageGet=e.elementColor=e.sleep=void 0;const i=n(9416),r=n(8681);e.sleep=function(t){return new Promise((e=>setTimeout(e,t)))};const u=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function c(t,e){return o(this,void 0,void 0,(function*(){const n=yield i.browser.storage.local.get(t);return void 0!==n[t]?n[t]:e}))}function s(t){return o(this,void 0,void 0,(function*(){const e=r.defaultSettings[t];for(const n of e){if(void 0===n.value)continue;const e=`setting-${t}-${n.key}`;n.value=yield c(e,n.value)}return e}))}e.elementColor=function(t){const e=getComputedStyle(t,null).getPropertyValue("background-color");if(e.includes("rgb(0, 0, 0"))return"transparent";const n={r:0,g:0,b:0},o=e.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);n.r=Number(o[1]),n.g=Number(o[2]),n.b=Number(o[3]);const i={color:"",distance:442};for(const t of u){const e=Math.sqrt(Math.pow(n.r-t.r,2)+Math.pow(n.g-t.g,2)+(n.b-t.b));e<i.distance&&(i.color=t.color,i.distance=e)}return i.color},e.storageGet=c,e.retrieveSettings=s,e.retrieveSettingsKV=function(t){return o(this,void 0,void 0,(function*(){const e={},n=yield s(t);for(const t of n)void 0!==t.value&&(e[t.key]=t);return e}))}}},n={};function o(t){var i=n[t];if(void 0!==i)return i.exports;var r=n[t]={exports:{}};return e[t].call(r.exports,r,r.exports,o),r.exports}o.m=e,t=[],o.O=(e,n,i,r)=>{if(!n){var u=1/0;for(a=0;a<t.length;a++){for(var[n,i,r]=t[a],c=!0,s=0;s<n.length;s++)(!1&r||u>=r)&&Object.keys(o.O).every((t=>o.O[t](n[s])))?n.splice(s--,1):(c=!1,r<u&&(u=r));c&&(t.splice(a--,1),e=i())}return e}r=r||0;for(var a=t.length;a>0&&t[a-1][2]>r;a--)t[a]=t[a-1];t[a]=[n,i,r]},o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.j=843,(()=>{var t={843:0,533:0,386:0};o.O.j=e=>0===t[e];var e=(e,n)=>{var i,r,[u,c,s]=n,a=0;for(i in c)o.o(c,i)&&(o.m[i]=c[i]);if(s)var l=s(o);for(e&&e(n);a<u.length;a++)r=u[a],o.o(t,r)&&t[r]&&t[r][0](),t[u[a]]=0;return o.O(l)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var i=o.O(void 0,[736],(()=>o(9705)));i=o.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,