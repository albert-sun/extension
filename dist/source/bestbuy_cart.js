(()=>{"use strict";var e,t={9705:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(n,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function l(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(9416),r=i(1209);let s,l={},a={notificationSoundURL:function(){return o(this,void 0,void 0,(function*(){s=new Audio(l.notificationSoundURL.value)}))},whitelistedKeywords:function(){return o(this,void 0,void 0,(function*(){c=l.whitelistedKeywords.value.split(",").map((e=>e.trim().toLowerCase())).filter((e=>""!=e))}))},blacklistedKeywords:function(){return o(this,void 0,void 0,(function*(){d=l.blacklistedKeywords.value.split(",").map((e=>e.trim().toLowerCase())).filter((e=>""!=e))}))}},u={updatedSetting:function(e,t){return o(this,void 0,void 0,(function*(){const[i,o]=e.split("-");"bestbuy"===i&&(l[o].value=t,yield a[o]())}))},testNotificationSound:function(){return o(this,void 0,void 0,(function*(){s.play()}))}},c=[],d=[],p=[],f=0,v=0;!function(){o(this,void 0,void 0,(function*(){l=yield r.retrieveSettingsKV("bestbuy");for(const[e,t]of Object.entries(a))yield t();n.browser.runtime.onMessage.addListener((function(e,t){return o(this,void 0,void 0,(function*(){const t=u[e.instruction];if(void 0!==t)return yield t(...e.arguments||[])}))}));const e={data:atob(localStorage.getItem("purchaseTracker")||"e30="),time:Number(new Date)};yield n.browser.storage.local.set({"bestbuy-queueInfo":e}),n.browser.runtime.sendMessage({instruction:"updatedQueueInfo",arguments:[e]}),yield function(){return o(this,void 0,void 0,(function*(){for(;0===$(".page-heading__title").length;)yield r.sleep(l.globalPollingInterval.value);const e=$(".item-list")[0];for(f=void 0!==e?e.childNodes.length:0;;){for(;$(".page-spinner--in").length>0;)yield r.sleep(l.globalPollingInterval.value);const e=$(".item-list")[0],t=void 0!==e?e.childNodes.length:0;if(t>f&&s.play(),f=t,t>0&&!0===l.stopClickCartOccupied.value){yield r.sleep(l.globalPollingInterval.value);continue}if(!1===p.some((e=>$.contains(document.body,e.wrapper)))){let e=$(".saved-items__card-wrapper").toArray();for(;0===e.length;)yield r.sleep(l.globalPollingInterval.value),e=$(".saved-items__card-wrapper").toArray();p=e.map((function(e){return{wrapper:e,sku:e.getAttribute("data-test-saved-sku"),description:$(e).find(".simple-item__description")[0].innerText,addButton:$(e).find(".btn")[0]}}))}const i=p.filter((e=>c.some((t=>""!==t&&e.description.toLowerCase().includes(t))))).filter((e=>d.every((t=>!e.description.toLowerCase().includes(t)))));for(const e of i){const t=r.elementColor(e.addButton);if(!0===["white","blue","yellow"].includes(t)){const t=Number(new Date)-v;!0===l.autoClickWhitelisted.value&&t>l.successiveClickTimeout.value&&(e.addButton.click(),v=Number(new Date))}}yield r.sleep(l.globalPollingInterval.value)}}))}()}))}()},8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.2.1",bulletpoints:["Fixed empty blacklist disqualifying all saved items",'Replaced icon which said "AQU" instead of "AGU" (original extension name was AutoQueueUtilities)',"<b>TODO:</b> Fix notification sound not playing if user hasn't interacted with document, maybe play from background instead?"]},{version:"b0.2.0",bulletpoints:["Added About tab showing some information and usage instructions","Changed extension icon to something somewhat more presentable","Removed placeholder logging tab pending further development","Added blacklisted keywords functionality to script (still no test buttons)","Other minor edits to extension popup styling, nothing too major"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]},{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Features not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistedKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"},{key:"blacklistedKeywords",description:"Blacklisted keywords (comma-separated)",type:"text",value:""}]}},1209:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(n,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function l(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const n=i(9416),r=i(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function l(e,t){return o(this,void 0,void 0,(function*(){const i=yield n.browser.storage.local.get(e);return void 0!==i[e]?i[e]:t}))}function a(e){return o(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const i of t){if(void 0===i.value)continue;const t=`setting-${e}-${i.key}`;i.value=yield l(t,i.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const i={r:0,g:0,b:0},o=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);i.r=Number(o[1]),i.g=Number(o[2]),i.b=Number(o[3]);const n={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(i.r-e.r,2)+Math.pow(i.g-e.g,2)+(i.b-e.b));t<n.distance&&(n.color=e.color,n.distance=t)}return n.color},t.storageGet=l,t.retrieveSettings=a,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},i=yield a(e);for(const e of i)void 0!==e.value&&(t[e.key]=e);return t}))}}},i={};function o(e){var n=i[e];if(void 0!==n)return n.exports;var r=i[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,i,n,r)=>{if(!i){var s=1/0;for(u=0;u<e.length;u++){for(var[i,n,r]=e[u],l=!0,a=0;a<i.length;a++)(!1&r||s>=r)&&Object.keys(o.O).every((e=>o.O[e](i[a])))?i.splice(a--,1):(l=!1,r<s&&(s=r));l&&(e.splice(u--,1),t=n())}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[i,n,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=843,(()=>{var e={843:0,533:0,386:0};o.O.j=t=>0===e[t];var t=(t,i)=>{var n,r,[s,l,a]=i,u=0;for(n in l)o.o(l,n)&&(o.m[n]=l[n]);if(a)var c=a(o);for(t&&t(i);u<s.length;u++)r=s[u],o.o(e,r)&&e[r]&&e[r][0](),e[s[u]]=0;return o.O(c)},i=self.webpackChunkextension=self.webpackChunkextension||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var n=o.O(void 0,[736],(()=>o(9705)));n=o.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,