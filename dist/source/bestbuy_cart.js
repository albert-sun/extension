(()=>{"use strict";var e,t={9705:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(n,r){function l(e){try{u(o.next(e))}catch(e){r(e)}}function s(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(l,s)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=i(9416),r=i(1209);let l,s={},u={notificationSoundURL:function(){return o(this,void 0,void 0,(function*(){l=new Audio(s.notificationSoundURL.value)}))},whitelistKeywords:function(){return o(this,void 0,void 0,(function*(){a=s.whitelistKeywords.value.split(",").map((e=>e.trim().toLowerCase()))}))}},c={updatedSetting:function(e,t){return o(this,void 0,void 0,(function*(){const[i,o]=e.split("-");"bestbuy"===i&&(s[o].value=t,yield u[o]())}))},testNotificationSound:function(){return o(this,void 0,void 0,(function*(){l.play()}))}},a=[],d=[],f=0,v=0,p="";!function(){o(this,void 0,void 0,(function*(){s=yield r.retrieveSettingsKV("bestbuy");for(const[e,t]of Object.entries(u))yield t();n.browser.runtime.onMessage.addListener((function(e,t){return o(this,void 0,void 0,(function*(){const t=c[e.instruction];if(void 0!==t)return yield t(...e.arguments||[])}))}));const e={data:atob(localStorage.getItem("purchaseTracker")||"e30="),time:Number(new Date)};yield n.browser.storage.local.set({"bestbuy-queueInfo":e}),n.browser.runtime.sendMessage({instruction:"updatedQueueInfo",arguments:[e]}),yield function(){return o(this,void 0,void 0,(function*(){for(;0===$(".page-heading__title").length;)yield r.sleep(s.globalPollingInterval.value);const e=$(".item-list")[0];for(f=void 0!==e?e.childNodes.length:0;;){const e=$(".item-list")[0],t=void 0!==e?e.childNodes.length:0;if(t>f&&l.play(),f=t,t>0&&!0===s.stopClickCartOccupied.value){yield r.sleep(s.globalPollingInterval.value);continue}if(!1===d.some((e=>$.contains(document.body,e.wrapper)))){let e=$(".saved-items__card-wrapper").toArray();for(;0===e.length;)yield r.sleep(s.globalPollingInterval.value),e=$(".saved-items__card-wrapper").toArray();d=e.map((function(e){return{wrapper:e,sku:e.getAttribute("data-test-saved-sku"),description:$(e).find(".simple-item__description")[0].innerText,addButton:$(e).find(".btn")[0]}})),d.length}const i=d.filter((e=>a.some((t=>""!==t&&e.description.toLowerCase().includes(t)))));for(const e of i){const t=r.elementColor(e.addButton);if(!0===["white","blue","yellow"].includes(t)){const t=Number(new Date)-v,i=p===e.sku?10:1;!0===s.autoClickWhitelisted.value&&t>s.successiveClickTimeout.value*i&&(e.addButton.click(),v=Number(new Date),p=e.sku)}}yield r.sleep(s.globalPollingInterval.value)}}))}()}))}()},8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking different button",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Custom notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistKeywords",description:"Comma-separated whitelisted keywords",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"}]}},1209:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(n,r){function l(e){try{u(o.next(e))}catch(e){r(e)}}function s(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(l,s)}u((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const n=i(9416),r=i(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const l=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function s(e,t){return o(this,void 0,void 0,(function*(){const i=yield n.browser.storage.local.get(e);return void 0!==i[e]?i[e]:t}))}function u(e){return o(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const i of t){if(void 0===i.value)continue;const t=`setting-${e}-${i.key}`;i.value=yield s(t,i.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const i={r:0,g:0,b:0},o=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);i.r=Number(o[1]),i.g=Number(o[2]),i.b=Number(o[3]);const n={color:"",distance:442};for(const e of l){const t=Math.sqrt(Math.pow(i.r-e.r,2)+Math.pow(i.g-e.g,2)+(i.b-e.b));t<n.distance&&(n.color=e.color,n.distance=t)}return n.color},t.storageGet=s,t.retrieveSettings=u,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},i=yield u(e);for(const e of i)void 0!==e.value&&(t[e.key]=e);return t}))}}},i={};function o(e){var n=i[e];if(void 0!==n)return n.exports;var r=i[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,i,n,r)=>{if(!i){var l=1/0;for(c=0;c<e.length;c++){for(var[i,n,r]=e[c],s=!0,u=0;u<i.length;u++)(!1&r||l>=r)&&Object.keys(o.O).every((e=>o.O[e](i[u])))?i.splice(u--,1):(s=!1,r<l&&(l=r));s&&(e.splice(c--,1),t=n())}return t}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[i,n,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=843,(()=>{var e={843:0,533:0,386:0};o.O.j=t=>0===e[t];var t=(t,i)=>{var n,r,[l,s,u]=i,c=0;for(n in s)o.o(s,n)&&(o.m[n]=s[n]);if(u)var a=u(o);for(t&&t(i);c<l.length;c++)r=l[c],o.o(e,r)&&e[r]&&e[r][0](),e[l[c]]=0;return o.O(a)},i=self.webpackChunkextension=self.webpackChunkextension||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var n=o.O(void 0,[736],(()=>o(9705)));n=o.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,