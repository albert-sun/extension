(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.2.1",bulletpoints:["Fixed empty blacklist disqualifying all saved items",'Replaced icon which said "AQU" instead of "AGU" (original extension name was AutoQueueUtilities)',"<b>TODO:</b> Fix notification sound not playing if user hasn't interacted with document, maybe play from background instead?"]},{version:"b0.2.0",bulletpoints:["Added About tab showing some information and usage instructions","Changed extension icon to something somewhat more presentable","Removed placeholder logging tab pending further development","Added blacklisted keywords functionality to script (still no test buttons)","Other minor edits to extension popup styling, nothing too major"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]},{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Features not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistedKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"},{key:"blacklistedKeywords",description:"Blacklisted keywords (comma-separated)",type:"text",value:""}]}},1209:function(e,t,o){var i=this&&this.__awaiter||function(e,t,o,i){return new(o||(o=Promise))((function(n,r){function s(e){try{l(i.next(e))}catch(e){r(e)}}function a(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const n=o(9416),r=o(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function a(e,t){return i(this,void 0,void 0,(function*(){const o=yield n.browser.storage.local.get(e);return void 0!==o[e]?o[e]:t}))}function l(e){return i(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const o of t){if(void 0===o.value)continue;const t=`setting-${e}-${o.key}`;o.value=yield a(t,o.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const o={r:0,g:0,b:0},i=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);o.r=Number(i[1]),o.g=Number(i[2]),o.b=Number(i[3]);const n={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(o.r-e.r,2)+Math.pow(o.g-e.g,2)+(o.b-e.b));t<n.distance&&(n.color=e.color,n.distance=t)}return n.color},t.storageGet=a,t.retrieveSettings=l,t.retrieveSettingsKV=function(e){return i(this,void 0,void 0,(function*(){const t={},o=yield l(e);for(const e of o)void 0!==e.value&&(t[e.key]=e);return t}))}}},o={};function i(e){var n=o[e];if(void 0!==n)return n.exports;var r=o[e]={exports:{}};return t[e].call(r.exports,r,r.exports,i),r.exports}i.m=t,e=[],i.O=(t,o,n,r)=>{if(!o){var s=1/0;for(c=0;c<e.length;c++){for(var[o,n,r]=e[c],a=!0,l=0;l<o.length;l++)(!1&r||s>=r)&&Object.keys(i.O).every((e=>i.O[e](o[l])))?o.splice(l--,1):(a=!1,r<s&&(s=r));a&&(e.splice(c--,1),t=n())}return t}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[o,n,r]},i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.j=386,(()=>{var e={386:0,533:0};i.O.j=t=>0===e[t];var t=(t,o)=>{var n,r,[s,a,l]=o,c=0;for(n in a)i.o(a,n)&&(i.m[n]=a[n]);if(l)var u=l(i);for(t&&t(o);c<s.length;c++)r=s[c],i.o(e,r)&&e[r]&&e[r][0](),e[s[c]]=0;return i.O(u)},o=self.webpackChunkextension=self.webpackChunkextension||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var n=i.O(void 0,[736],(()=>i(1209)));n=i.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,