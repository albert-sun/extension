(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={bestbuy:[{key:"changeResetReload",description:"Reset auto-reload on change without refresh",type:"checkbox",value:!0},{key:"notificationSoundURL",description:"Notification sound URL (mp3)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"testNotificationSound",description:"Test current notification sound",type:"button",instruction:"testNotificationSound"}]}},1209:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function u(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,u)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const r=o(9416),i=o(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function u(e,t){return n(this,void 0,void 0,(function*(){const o=yield r.browser.storage.local.get(e);return void 0!==o[e]?o[e]:t}))}function c(e){return n(this,void 0,void 0,(function*(){const t=i.defaultSettings[e];for(const o of t){if(void 0===o.value)continue;const t=`setting-${e}-${o.key}`;o.value=yield u(t,o.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const o={r:0,g:0,b:0},n=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);o.r=Number(n[1]),o.g=Number(n[2]),o.b=Number(n[3]);const r={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(o.r-e.r,2)+Math.pow(o.g-e.g,2)+(o.b-e.b));t<r.distance&&(r.color=e.color,r.distance=t)}return r.color},t.storageGet=u,t.retrieveSettings=c,t.retrieveSettingsKV=function(e){return n(this,void 0,void 0,(function*(){const t={},o=yield c(e);for(const e of o)void 0!==e.value&&(t[e.key]=e);return t}))}}},o={};function n(e){var r=o[e];if(void 0!==r)return r.exports;var i=o[e]={exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}n.m=t,e=[],n.O=(t,o,r,i)=>{if(!o){var s=1/0;for(a=0;a<e.length;a++){for(var[o,r,i]=e[a],u=!0,c=0;c<o.length;c++)(!1&i||s>=i)&&Object.keys(n.O).every((e=>n.O[e](o[c])))?o.splice(c--,1):(u=!1,i<s&&(s=i));u&&(e.splice(a--,1),t=r())}return t}i=i||0;for(var a=e.length;a>0&&e[a-1][2]>i;a--)e[a]=e[a-1];e[a]=[o,r,i]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.j=386,(()=>{var e={386:0,533:0};n.O.j=t=>0===e[t];var t=(t,o)=>{var r,i,[s,u,c]=o,a=0;for(r in u)n.o(u,r)&&(n.m[r]=u[r]);if(c)var l=c(n);for(t&&t(o);a<s.length;a++)i=s[a],n.o(e,i)&&e[i]&&e[i][0](),e[s[a]]=0;return n.O(l)},o=self.webpackChunkextension=self.webpackChunkextension||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var r=n.O(void 0,[736],(()=>n(1209)));r=n.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,