(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between successive button clicks",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Custom notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"testNotificationSound",description:"Play current notification sound",type:"button",instruction:"testNotificationSound"}]}},1209:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,r){function c(e){try{s(n.next(e))}catch(e){r(e)}}function u(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(c,u)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const i=o(9416),r=o(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const c=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function u(e,t){return n(this,void 0,void 0,(function*(){const o=yield i.browser.storage.local.get(e);return void 0!==o[e]?o[e]:t}))}function s(e){return n(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const o of t){if(void 0===o.value)continue;const t=`setting-${e}-${o.key}`;o.value=yield u(t,o.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const o={r:0,g:0,b:0},n=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);o.r=Number(n[1]),o.g=Number(n[2]),o.b=Number(n[3]);const i={color:"",distance:442};for(const e of c){const t=Math.sqrt(Math.pow(o.r-e.r,2)+Math.pow(o.g-e.g,2)+(o.b-e.b));t<i.distance&&(i.color=e.color,i.distance=t)}return i.color},t.storageGet=u,t.retrieveSettings=s,t.retrieveSettingsKV=function(e){return n(this,void 0,void 0,(function*(){const t={},o=yield s(e);for(const e of o)void 0!==e.value&&(t[e.key]=e);return t}))}}},o={};function n(e){var i=o[e];if(void 0!==i)return i.exports;var r=o[e]={exports:{}};return t[e].call(r.exports,r,r.exports,n),r.exports}n.m=t,e=[],n.O=(t,o,i,r)=>{if(!o){var c=1/0;for(l=0;l<e.length;l++){for(var[o,i,r]=e[l],u=!0,s=0;s<o.length;s++)(!1&r||c>=r)&&Object.keys(n.O).every((e=>n.O[e](o[s])))?o.splice(s--,1):(u=!1,r<c&&(c=r));u&&(e.splice(l--,1),t=i())}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[o,i,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.j=386,(()=>{var e={386:0,533:0};n.O.j=t=>0===e[t];var t=(t,o)=>{var i,r,[c,u,s]=o,l=0;for(i in u)n.o(u,i)&&(n.m[i]=u[i]);if(s)var a=s(n);for(t&&t(o);l<c.length;l++)r=c[l],n.o(e,r)&&e[r]&&e[r][0](),e[c[l]]=0;return n.O(a)},o=self.webpackChunkextension=self.webpackChunkextension||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var i=n.O(void 0,[736],(()=>n(1209)));i=n.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,