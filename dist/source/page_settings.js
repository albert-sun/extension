(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking different button",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Custom notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistKeywords",description:"Comma-separated whitelisted keywords",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"}]}},735:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function c(e){try{a(o.next(e))}catch(e){r(e)}}function s(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=n(9416),r=n(1209),c=n(8681);function s(e,t,n=!0){return o(this,void 0,void 0,(function*(){if(yield i.browser.storage.local.set({[`setting-${e}`]:t}),!0===n){const n=yield i.browser.tabs.query({}),o={instruction:"updatedSetting",arguments:[e,t]};for(const e of n)i.browser.tabs.sendMessage(e.id,o)}}))}!function(){o(this,void 0,void 0,(function*(){const e=c.defaultSettings;for(const[t,n]of Object.entries(e))e[t]=yield r.retrieveSettings(t);for(const[t,n]of Object.entries(c.defaultSettings)){const n=$(`#settings-${t}`)[0];for(const o of e[t]){const e=document.createElement("tr");e.classList.add("table-row"),n.appendChild(e);const i=document.createElement("td");i.classList.add("table-element-left"),e.appendChild(i);const r=document.createElement("td");r.classList.add("table-element-right"),e.appendChild(r),i.innerText=o.description;const c=`${t}-${o.key}`;let a;if("slideSwitch"===o.type){a=document.createElement("label"),a.classList.add("switch");const e=document.createElement("input");a.appendChild(e),e.type="checkbox",e.checked=o.value,$(e).change((function(){s(c,e.checked)}));const t=document.createElement("span");t.classList.add("slider"),t.classList.add("round"),a.appendChild(t)}else a=document.createElement("input"),a.classList.add("table-input"),a.type=o.type,a.value=o.value,$(a).change((function(){s(c,a.value)}));if(r.appendChild(a),"button"!==o.type&&"checkbox"!==o.type&&o.extraText){const e=document.createElement("p");e.classList.add("table-extra"),e.textContent=o.extraText,r.appendChild(e)}}}}))}()},1209:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function c(e){try{a(o.next(e))}catch(e){r(e)}}function s(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,s)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const i=n(9416),r=n(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const c=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function s(e,t){return o(this,void 0,void 0,(function*(){const n=yield i.browser.storage.local.get(e);return void 0!==n[e]?n[e]:t}))}function a(e){return o(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const n of t){if(void 0===n.value)continue;const t=`setting-${e}-${n.key}`;n.value=yield s(t,n.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const n={r:0,g:0,b:0},o=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);n.r=Number(o[1]),n.g=Number(o[2]),n.b=Number(o[3]);const i={color:"",distance:442};for(const e of c){const t=Math.sqrt(Math.pow(n.r-e.r,2)+Math.pow(n.g-e.g,2)+(n.b-e.b));t<i.distance&&(i.color=e.color,i.distance=t)}return i.color},t.storageGet=s,t.retrieveSettings=a,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},n=yield a(e);for(const e of n)void 0!==e.value&&(t[e.key]=e);return t}))}}},n={};function o(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,n,i,r)=>{if(!n){var c=1/0;for(l=0;l<e.length;l++){for(var[n,i,r]=e[l],s=!0,a=0;a<n.length;a++)(!1&r||c>=r)&&Object.keys(o.O).every((e=>o.O[e](n[a])))?n.splice(a--,1):(s=!1,r<c&&(c=r));s&&(e.splice(l--,1),t=i())}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,i,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=436,(()=>{var e={436:0,533:0,386:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var i,r,[c,s,a]=n,l=0;for(i in s)o.o(s,i)&&(o.m[i]=s[i]);if(a)var u=a(o);for(t&&t(n);l<c.length;l++)r=c[l],o.o(e,r)&&e[r]&&e[r][0](),e[c[l]]=0;return o.O(u)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var i=o.O(void 0,[736],(()=>o(735)));i=o.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,