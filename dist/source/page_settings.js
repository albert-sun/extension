(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"}]}},735:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function c(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}a((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(8197)),s=n(9416),c=n(1209),a=n(8681);function l(e,t,n=!0){return o(this,void 0,void 0,(function*(){if(yield s.browser.storage.local.set({[`setting-${e}`]:t}),!0===n){const n=yield s.browser.tabs.query({}),o={instruction:"updatedSetting",arguments:[e,t]};for(const e of n)s.browser.tabs.sendMessage(e.id,o)}}))}const u=$(".settings")[0];new r.default(u,{autoHide:!1}),$(u).find(".content-main").load("/pages/settings.html",(function(){!function(){o(this,void 0,void 0,(function*(){const e=a.defaultSettings;for(const[t,n]of Object.entries(e))e[t]=yield c.retrieveSettings(t);for(const[t,n]of Object.entries(a.defaultSettings)){const n=$(`#settings-${t}`)[0];for(const o of e[t]){const e=document.createElement("tr");e.classList.add("table-row"),n.appendChild(e);const i=document.createElement("td");i.classList.add("table-element-left"),e.appendChild(i);const r=document.createElement("td");r.classList.add("table-element-right"),e.appendChild(r),i.innerText=o.description;const s=`${t}-${o.key}`;let c;if("slideSwitch"===o.type){c=document.createElement("label"),c.classList.add("switch");const e=document.createElement("input");c.appendChild(e),e.type="checkbox",e.checked=o.value,$(e).change((function(){l(s,e.checked)}));const t=document.createElement("span");t.classList.add("slider"),t.classList.add("round"),c.appendChild(t)}else c=document.createElement("input"),c.classList.add("table-input"),c.type=o.type,c.value=o.value,$(c).change((function(){l(s,c.value)}));if(r.appendChild(c),"button"!==o.type&&"checkbox"!==o.type&&o.extraText){const e=document.createElement("p");e.classList.add("table-extra"),e.textContent=o.extraText,r.appendChild(e)}}}}))}()}))},1209:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function c(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const i=n(9416),r=n(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function c(e,t){return o(this,void 0,void 0,(function*(){const n=yield i.browser.storage.local.get(e);return void 0!==n[e]?n[e]:t}))}function a(e){return o(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const n of t){if(void 0===n.value)continue;const t=`setting-${e}-${n.key}`;n.value=yield c(t,n.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const n={r:0,g:0,b:0},o=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);n.r=Number(o[1]),n.g=Number(o[2]),n.b=Number(o[3]);const i={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(n.r-e.r,2)+Math.pow(n.g-e.g,2)+(n.b-e.b));t<i.distance&&(i.color=e.color,i.distance=t)}return i.color},t.storageGet=c,t.retrieveSettings=a,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},n=yield a(e);for(const e of n)void 0!==e.value&&(t[e.key]=e);return t}))}}},n={};function o(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,n,i,r)=>{if(!n){var s=1/0;for(l=0;l<e.length;l++){for(var[n,i,r]=e[l],c=!0,a=0;a<n.length;a++)(!1&r||s>=r)&&Object.keys(o.O).every((e=>o.O[e](n[a])))?n.splice(a--,1):(c=!1,r<s&&(s=r));c&&(e.splice(l--,1),t=i())}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,i,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=436,(()=>{var e={436:0,533:0,386:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var i,r,[s,c,a]=n,l=0;for(i in c)o.o(c,i)&&(o.m[i]=c[i]);if(a)var u=a(o);for(t&&t(n);l<s.length;l++)r=s[l],o.o(e,r)&&e[r]&&e[r][0](),e[s[l]]=0;return o.O(u)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var i=o.O(void 0,[736],(()=>o(735)));i=o.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9leHRlbnNpb24vLi9zb3VyY2UvY29uc3RhbnRzLnRzIiwid2VicGFjazovL2V4dGVuc2lvbi8uL3NvdXJjZS9wYWdlX3NldHRpbmdzLnRzIiwid2VicGFjazovL2V4dGVuc2lvbi8uL3NvdXJjZS91dGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vZXh0ZW5zaW9uL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvcnVudGltZUlkIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0U2V0dGluZ3MiLCJjaGFuZ2Vsb2dzIiwia2V5IiwiZGVzY3JpcHRpb24iLCJ0eXBlIiwiZXh0cmFUZXh0IiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsInNpbXBsZWJhcl8xIiwid2ViZXh0ZW5zaW9uX3BvbHlmaWxsX3RzXzEiLCJ1dGlsaXRpZXNfMSIsImNvbnN0YW50c18xIiwidXBkYXRlU2V0dGluZyIsInNldHRpbmdLZXkiLCJzZXR0aW5nVmFsdWUiLCJub3RpZnkiLCJicm93c2VyIiwic3RvcmFnZSIsImxvY2FsIiwic2V0IiwidGFicyIsInF1ZXJ5IiwibWVzc2FnZSIsInRhYiIsInNlbmRNZXNzYWdlIiwiaWQiLCJwYWdlV3JhcHBlciIsIiQiLCJkZWZhdWx0IiwiYXV0b0hpZGUiLCJmaW5kIiwibG9hZCIsImN1cnJlbnRTZXR0aW5ncyIsInNldHRpbmdzQ2F0ZWdvcnkiLCJfIiwiZW50cmllcyIsInJldHJpZXZlU2V0dGluZ3MiLCJzZXR0aW5nc1RhYmxlIiwic2V0dGluZyIsInNldHRpbmdSb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImxlZnREZXNjcmlwdGlvbiIsInJpZ2h0RGVzY3JpcHRpb24iLCJpbm5lclRleHQiLCJzZXR0aW5nUmlnaHQiLCJ1bmRlckNoZWNrIiwiY2hlY2tlZCIsImNoYW5nZSIsInVuZGVyU3BhbiIsInRleHRDb250ZW50IiwicG9wdWxhdGVTZXR0aW5ncyIsInJldHJpZXZlU2V0dGluZ3NLViIsInN0b3JhZ2VHZXQiLCJlbGVtZW50Q29sb3IiLCJzbGVlcCIsIm1zIiwic2V0VGltZW91dCIsImNvbG9ycyIsImNvbG9yIiwiciIsImciLCJiIiwic3RvcmFnZUtleSIsImRlZmF1bHRWYWx1ZSIsInN0b3JhZ2VSZXN1bHQiLCJnZXQiLCJ1bmRlZmluZWQiLCJjYXRlZ29yeVNldHRpbmdzIiwiZWxlbWVudCIsImNvbG9yVGV4dCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaW5jbHVkZXMiLCJwYXJzZWRDb2xvciIsIm1hdGNoZWRDb2xvciIsIm1hdGNoIiwiTnVtYmVyIiwiY2xvc2VzdCIsImRpc3RhbmNlIiwiY2hlY2tDb2xvciIsIk1hdGgiLCJzcXJ0IiwicG93IiwiY2F0ZWdvcnlTZXR0aW5nc0tWIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImoiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImluc3RhbGxlZENodW5rcyIsImNodW5rSWQiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJmb3JFYWNoIiwiYmluZCIsInB1c2giLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoidUJBQUlBLEUsZ0JDQ0pDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxnQkFBa0JGLEVBQVFHLGdCQUFhLEVBRS9DSCxFQUFRRyxXQUFhLENBQ2pCLENBQ0ksUUFBVyxTQUNYLGFBQWdCLENBQ1osOEhBQ0Esd0lBQ0Esb0lBRUwsQ0FDQyxRQUFXLFNBQ1gsYUFBZ0Is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ZSI6InNvdXJjZS9wYWdlX3NldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0cmVzdWx0ID0gZm4oKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5kZWZhdWx0U2V0dGluZ3MgPSBleHBvcnRzLmNoYW5nZWxvZ3MgPSB2b2lkIDA7XHJcbi8vIENoYW5nZWxvZyBmcm9tIHByZXZpb3VzIHZlcnNpb25zXHJcbmV4cG9ydHMuY2hhbmdlbG9ncyA9IFtcclxuICAgIHtcclxuICAgICAgICBcInZlcnNpb25cIjogXCJiMC4wLjFcIixcclxuICAgICAgICBcImJ1bGxldHBvaW50c1wiOiBbXHJcbiAgICAgICAgICAgIGBQb3J0ZWQgbW9zdCBmdW5jdGlvbmFsaXR5IGZyb20gVGFtcGVybW9ua2V5IHNjcmlwdCBsb2NhdGVkIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vYWxiZXJ0LXN1bi90YW1wZXItc2NyaXB0cy9cIj5oZXJlPC9hPmAsXHJcbiAgICAgICAgICAgIGA8Yj5Ob3QgeWV0IGltcGxlbWVudGVkPC9iPjogYmxhY2tsaXN0ZWQga2V5d29yZHMgYW5kIGJ1dHRvbnMgZm9yIHRlc3Rpbmcgd3RpaGluIHNldHRpbmdzIChyZW1vdmVkIHVudGlsIHNldHRpbmdzIHN0cnVjdHVyZSBmaW5hbGl6ZWQpYCxcclxuICAgICAgICAgICAgYDxiPkltcHJvdmVtZW50cyBmcm9tIFRhbXBlcm1vbmtleSBzY3JpcHQ8L2I+OiBJbnN0YW50IHNldHRpbmdzIHByb3BvZ2F0aW9uIGFuZCBubyByZWZyZXNoIHJlcXVpcmVkIGZvciBjYXJ0IGFkZGl0aW9uIG9yIHJlbW92YWxgXHJcbiAgICAgICAgXVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwidmVyc2lvblwiOiBcImIwLjEuMFwiLFxyXG4gICAgICAgIFwiYnVsbGV0cG9pbnRzXCI6IFtcclxuICAgICAgICAgICAgYEFkZGVkIGNoYW5nZWxvZyAodGhpcyB0YWIgaGVyZSkgYW5kIHBsYWNlaG9sZGVyIGxvZ2dpbmcgdGFiIGZvciB0ZXN0aW5nYCxcclxuICAgICAgICAgICAgYENoYW5nZWQgZXh0ZW5zaW9uIHNjcmlwdCBsb2FkaW5nIHRvIHdvcmsgc29tZXdoYXQgbW9yZSBkeW5hbWljYWxseWAsXHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5dO1xyXG4vLyBTZXR0aW5ncyBhY3Jvc3MgYWxsIGNhdGVnb3JpZXMgZm9yIGV4dGVuc2lvblxyXG5leHBvcnRzLmRlZmF1bHRTZXR0aW5ncyA9IHtcclxuICAgIFwiYmVzdGJ1eVwiOiBbXHJcbiAgICAgICAgeyBrZXk6IFwiYXV0b21hdGljUXVldWVGaXhcIiwgZGVzY3JpcHRpb246IFwiQXR0ZW1wdCB0byBhdXRvbWF0aWNhbGx5IGZpeCBicm9rZW4gcXVldWVzXCIsIHR5cGU6IFwic2xpZGVTd2l0Y2hcIiwgdmFsdWU6IHRydWUgfSxcclxuICAgICAgICB7IGtleTogXCJhdXRvQ2xpY2tXaGl0ZWxpc3RlZFwiLCBkZXNjcmlwdGlvbjogXCJBdXRvbWF0aWNhbGx5IGNsaWNrIHdoaXRlbGlzdGVkIEFUQyBidXR0b25zXCIsIHR5cGU6IFwic2xpZGVTd2l0Y2hcIiwgdmFsdWU6IHRydWUgfSxcclxuICAgICAgICB7IGtleTogXCJzdG9wQ2xpY2tDYXJ0T2NjdXBpZWRcIiwgZGVzY3JpcHRpb246IFwiU3RvcCBhdXRvbWF0aWMgY2xpY2tpbmcgd2hlbiBjYXJ0IG9jY3VwaWVkXCIsIHR5cGU6IFwic2xpZGVTd2l0Y2hcIiwgdmFsdWU6IHRydWUgfSxcclxuICAgICAgICB7IGtleTogXCJnbG9iYWxQb2xsaW5nSW50ZXJ2YWxcIiwgZGVzY3JpcHRpb246IFwiR2xvYmFsIGNvbnRlbnQgc2NyaXB0IHBvbGxpbmcgaW50ZXJ2YWxcIiwgdHlwZTogXCJudW1iZXJcIiwgZXh0cmFUZXh0OiBcIm1zXCIsIHZhbHVlOiAxMDAgfSxcclxuICAgICAgICB7IGtleTogXCJzdWNjZXNzaXZlQ2xpY2tUaW1lb3V0XCIsIGRlc2NyaXB0aW9uOiBcIlRpbWVvdXQgYmV0d2VlbiBjbGlja2luZyB1bmlxdWUgYnV0dG9uc1wiLCB0eXBlOiBcIm51bWJlclwiLCBleHRyYVRleHQ6IFwibXNcIiwgdmFsdWU6IDI1MDAgfSxcclxuICAgICAgICB7IGtleTogXCJub3RpZmljYXRpb25Tb3VuZFVSTFwiLCBkZXNjcmlwdGlvbjogXCJOb3RpZmljYXRpb24gc291bmQgVVJMIChtcDMgaG90bGluaylcIiwgdHlwZTogXCJ0ZXh0XCIsIHZhbHVlOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9hbGJlcnQtc3VuL3RhbXBlci1zY3JpcHRzL2Jsb2IvbWFpbi9yZXNvdXJjZXMvbm90aWZpY2F0aW9uLm1wMz9yYXc9dHJ1ZVwiIH0sXHJcbiAgICAgICAgeyBrZXk6IFwid2hpdGVsaXN0S2V5d29yZHNcIiwgZGVzY3JpcHRpb246IFwiV2hpdGVsaXN0ZWQga2V5d29yZHMgKGNvbW1hLXNlcGFyYXRlZClcIiwgdHlwZTogXCJ0ZXh0XCIsIHZhbHVlOiBcIjMwNjAsMzA2MHRpLDMwNjAgdGksMzA3MCwzMDcwdGksMzA3MCB0aSwzMDgwLDMwODB0aSwzMDgwIHRpLDMwOTBcIiB9LFxyXG4gICAgICAgIC8vIHsga2V5OiBcInRlc3ROb3RpZmljYXRpb25Tb3VuZFwiLCBkZXNjcmlwdGlvbjogXCJQbGF5IGN1cnJlbnQgbm90aWZpY2F0aW9uIHNvdW5kXCIsIHR5cGU6IFwiYnV0dG9uXCIsIGluc3RydWN0aW9uOiBcInRlc3ROb3RpZmljYXRpb25Tb3VuZFwiIH0sXHJcbiAgICBdXHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgc2ltcGxlYmFyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInNpbXBsZWJhclwiKSk7XHJcbmNvbnN0IHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbC10c1wiKTtcclxuY29uc3QgdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG4vLyBBc3luY2hyb25vdXNseSB1cGRhdGVzIGV4dGVuc2lvbiBzdG9yYWdlIHdpdGggZ2l2ZW4gc2V0dGluZyBhbmQgbm90aWZ5IHRhYnMgb2YgdXBkYXRlXHJcbi8vIElzc3VlIHdpdGggbm90aWZ5aW5nIHRvIHBhZ2VzIG5vdCByZWxvYWRlZCB3aGVuIHVwZGF0aW5nIGV4dGVuc2lvbiBzb3VyY2U/XHJcbmZ1bmN0aW9uIHVwZGF0ZVNldHRpbmcoc2V0dGluZ0tleSwgc2V0dGluZ1ZhbHVlLCBub3RpZnkgPSB0cnVlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHlpZWxkIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBbYHNldHRpbmctJHtzZXR0aW5nS2V5fWBdOiBzZXR0aW5nVmFsdWUgfSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeSA9PT0gdHJ1ZSkgeyAvLyBFbmFibGVkIGJ5IGRlZmF1bHQgZm9yIGNvbnZlbmllbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYnMgPSB5aWVsZCB3ZWJleHRlbnNpb25fcG9seWZpbGxfdHNfMS5icm93c2VyLnRhYnMucXVlcnkoe30pO1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0geyBcImluc3RydWN0aW9uXCI6IFwidXBkYXRlZFNldHRpbmdcIiwgXCJhcmd1bWVudHNcIjogW3NldHRpbmdLZXksIHNldHRpbmdWYWx1ZV0gfTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0YWIgb2YgdGFicykgeyAvLyBOb3RpZnkgaW5kaXZpZHVhbCB0YWJzIG9mIHVwZGF0ZWQgc2V0dGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gUG9seWZpbGwgdGhyb3dzIGVycm9yIGlmIG1pc3NpbmcgbGlzdGVuZXIsIGlnbm9yZVxyXG4gICAgICAgICAgICAgICAgd2ViZXh0ZW5zaW9uX3BvbHlmaWxsX3RzXzEuYnJvd3Nlci50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4vLyBGcm9tIHNldHRpbmdzIGJ1dHRvbnMsIGJyb2FkY2FzdCBnaXZlbiBpbnN0cnVjdGlvbiB0byB0YWJzXHJcbmZ1bmN0aW9uIGJyb2FkY2FzdEluc3RydWN0aW9uKGluc3RydWN0aW9uLCBhcmdzID0gW10pIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgdGFicyA9IHlpZWxkIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIudGFicy5xdWVyeSh7fSk7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHsgXCJpbnN0cnVjdGlvblwiOiBpbnN0cnVjdGlvbiwgXCJhcmd1bWVudHNcIjogYXJncyB9O1xyXG4gICAgICAgIGZvciAoY29uc3QgdGFiIG9mIHRhYnMpIHtcclxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgcmVzcG9uc2UgYW5kIHJldHVybiB3aXRoIHRhYnM/XHJcbiAgICAgICAgICAgIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIudGFicy5zZW5kTWVzc2FnZSh0YWIuaWQsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8vIFJldHJpZXZlIGV4aXN0aW5nIHNldHRpbmdzIGZyb20gc3RvcmFnZSBhbmQgcG9wdWxhdGUgc2V0dGluZ3MgdGFibGUgZm9yIGNhdGVnb3J5XHJcbmZ1bmN0aW9uIHBvcHVsYXRlU2V0dGluZ3MoKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IGNvbnN0YW50c18xLmRlZmF1bHRTZXR0aW5nczsgLy8gQmVmb3JlIG1vZGlmaWNhdGlvblxyXG4gICAgICAgIGZvciAoY29uc3QgW3NldHRpbmdzQ2F0ZWdvcnksIF9dIG9mIE9iamVjdC5lbnRyaWVzKGN1cnJlbnRTZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgY3VycmVudFNldHRpbmdzW3NldHRpbmdzQ2F0ZWdvcnldID0geWllbGQgdXRpbGl0aWVzXzEucmV0cmlldmVTZXR0aW5ncyhzZXR0aW5nc0NhdGVnb3J5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUG9wdWxhdGUgYWxsIHNldHRpbmdzIGNhdGVnb3JpZXMgdGFibGVzIHdpdGhpbiBzZXR0aW5ncyBwYWdlXHJcbiAgICAgICAgZm9yIChjb25zdCBbc2V0dGluZ3NDYXRlZ29yeSwgX10gb2YgT2JqZWN0LmVudHJpZXMoY29uc3RhbnRzXzEuZGVmYXVsdFNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGZhbmN5IHRhYmxlIHJvd3MgYW5kIHN0dWZmLCBoYXMgdG8gYmUgYSBjbGVhbmVyIHdheT9cclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NUYWJsZSA9ICQoYCNzZXR0aW5ncy0ke3NldHRpbmdzQ2F0ZWdvcnl9YClbMF07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBjdXJyZW50U2V0dGluZ3Nbc2V0dGluZ3NDYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcmVsZXZhbnQgZWxlbWVudHMgZm9yIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Jvdy5jbGFzc0xpc3QuYWRkKFwidGFibGUtcm93XCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NUYWJsZS5hcHBlbmRDaGlsZChzZXR0aW5nUm93KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgICAgICAgIGxlZnREZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwidGFibGUtZWxlbWVudC1sZWZ0XCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Jvdy5hcHBlbmRDaGlsZChsZWZ0RGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0RGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcInRhYmxlLWVsZW1lbnQtcmlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nUm93LmFwcGVuZENoaWxkKHJpZ2h0RGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgZGVzY3JpcHRpb24gYW5kIGluZm9ybWF0aW9uIGZyb20gc2V0dGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gQWxzbyBhdHRhY2ggb25jbGljayAvIG9uY2hhbmdlIGNhbGxiYWNrcyB0byBjaGFuZ2Ugc2V0dGluZ3NcclxuICAgICAgICAgICAgICAgIGxlZnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBzZXR0aW5nLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ0tleSA9IGAke3NldHRpbmdzQ2F0ZWdvcnl9LSR7c2V0dGluZy5rZXl9YDtcclxuICAgICAgICAgICAgICAgIGxldCBzZXR0aW5nUmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAvKmlmKHNldHRpbmcudHlwZSA9PT0gXCJidXR0b25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1dHRvbiB1c3VhbGx5IGZvciB0ZXN0aW5nLCBicm9hZGNhc3RzIHNwZWNpZmljIGluc3RydWN0aW9uIChlbXB0eSBhcmd1bWVudHMpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJ0YWJsZS1idXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0LmhyZWYgPSBcIiNcIjtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuaW5uZXJUZXh0ID0gXCJDbGljayBtZSFcIjtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3RJbnN0cnVjdGlvbihzZXR0aW5nLmluc3RydWN0aW9uIGFzIHN0cmluZylcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlKi8gaWYgKHNldHRpbmcudHlwZSA9PT0gXCJzbGlkZVN3aXRjaFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2tib3gsIGFjdHMgbXVjaCBsaWtlIHJlZ3VsYXIgaW5wdXQgdy8gZGlmZmVyZW50IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJzd2l0Y2hcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5kZXJDaGVjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuYXBwZW5kQ2hpbGQodW5kZXJDaGVjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kZXJDaGVjay50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuZGVyQ2hlY2suY2hlY2tlZCA9IHNldHRpbmcudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh1bmRlckNoZWNrKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5nKHNldHRpbmdLZXksIHVuZGVyQ2hlY2suY2hlY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5kZXJTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kZXJTcGFuLmNsYXNzTGlzdC5hZGQoXCJzbGlkZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kZXJTcGFuLmNsYXNzTGlzdC5hZGQoXCJyb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuYXBwZW5kQ2hpbGQodW5kZXJTcGFuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyB0ZXh0IC8gbnVtYmVyIC8gZXRjLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlZ3VsYXIgaW5wdXQsIGFzc3VtZSB2YWx1ZXMgYXJlIHBhcnNlZCBwcm9wZXJseVxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuY2xhc3NMaXN0LmFkZChcInRhYmxlLWlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC50eXBlID0gc2V0dGluZy50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC52YWx1ZSA9IHNldHRpbmcudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJChzZXR0aW5nUmlnaHQpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmcoc2V0dGluZ0tleSwgc2V0dGluZ1JpZ2h0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJpZ2h0RGVzY3JpcHRpb24uYXBwZW5kQ2hpbGQoc2V0dGluZ1JpZ2h0KTtcclxuICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBleHRyYSB0ZXh0IHRvIGlucHV0ICh0ZXh0LCBudW1iZXIsIGV0Yy4pIHVzaW5nIGEgcGFyYWdyYXBoIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIGlmICgoc2V0dGluZy50eXBlICE9PSBcImJ1dHRvblwiICYmIHNldHRpbmcudHlwZSAhPT0gXCJjaGVja2JveFwiKSAmJiBzZXR0aW5nLmV4dHJhVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhVGV4dC5jbGFzc0xpc3QuYWRkKFwidGFibGUtZXh0cmFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFUZXh0LnRleHRDb250ZW50ID0gc2V0dGluZy5leHRyYVRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHREZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChleHRyYVRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgcGFnZU5hbWUgPSBcInNldHRpbmdzXCI7XHJcbi8vIFBhZ2Ugc3RhcnR1cCB3cmFwcGVyIGZvciBsb2FkaW5nIGNvbnRlbnQgYW5kIHNjcmlwdGluZ1xyXG5jb25zdCBwYWdlV3JhcHBlciA9ICQoYC4ke3BhZ2VOYW1lfWApWzBdO1xyXG5uZXcgc2ltcGxlYmFyXzEuZGVmYXVsdChwYWdlV3JhcHBlciwgeyBhdXRvSGlkZTogZmFsc2UgfSk7XHJcbmNvbnN0IHBhZ2VDb250ZW50ID0gJChwYWdlV3JhcHBlcikuZmluZChcIi5jb250ZW50LW1haW5cIik7XHJcbnBhZ2VDb250ZW50LmxvYWQoYC9wYWdlcy8ke3BhZ2VOYW1lfS5odG1sYCwgZnVuY3Rpb24gKCkge1xyXG4gICAgcG9wdWxhdGVTZXR0aW5ncygpO1xyXG59KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJldHJpZXZlU2V0dGluZ3NLViA9IGV4cG9ydHMucmV0cmlldmVTZXR0aW5ncyA9IGV4cG9ydHMuc3RvcmFnZUdldCA9IGV4cG9ydHMuZWxlbWVudENvbG9yID0gZXhwb3J0cy5zbGVlcCA9IHZvaWQgMDtcclxuY29uc3Qgd2ViZXh0ZW5zaW9uX3BvbHlmaWxsX3RzXzEgPSByZXF1aXJlKFwid2ViZXh0ZW5zaW9uLXBvbHlmaWxsLXRzXCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcclxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTUxMDIxL3doYXQtaXMtdGhlLWphdmFzY3JpcHQtdmVyc2lvbi1vZi1zbGVlcFxyXG4vLyBQb3NzaWJseSBoYXMgaXNzdWVzIHJlc29sdmluZyBvbiBGaXJlZm94PyBTdGFja092ZXJmbG93IHN1cmUgZG9lc24ndCB0aGluayBzby4uLlxyXG5mdW5jdGlvbiBzbGVlcChtcykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xyXG59XHJcbmV4cG9ydHMuc2xlZXAgPSBzbGVlcDtcclxuLy8gQXBwcm94aW1hdGVzIHRoZSByZW5kZXJlZCBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZ2l2ZW4gZWxlbWVudCB0byBhIGdpdmVuIHNldCBvZiBjb2xvcnMuXHJcbi8vIENoZWNrcyB3aGV0aGVyIHRoZSBcImRpc3RhbmNlXCIgZnJvbSB0aGUgZWxlbWVudCBjb2xvciBpcyB0cmFuc3BhcmVudCBvciBjbG9zZXN0IHRvIGVpdGhlciB5ZWxsb3cvd2hpdGUvYmx1ZS5cclxuY29uc3QgY29sb3JzID0gW1xyXG4gICAgeyBjb2xvcjogXCJ5ZWxsb3dcIiwgcjogMjU1LCBnOiAyMjQsIGI6IDAgfSxcclxuICAgIHsgY29sb3I6IFwiYmx1ZVwiLCByOiAwLCBnOiAzMCwgYjogMTE1IH0sXHJcbiAgICB7IGNvbG9yOiBcImdyZXlcIiwgcjogMTk3LCBnOiAyMDMsIGI6IDIxMyB9LFxyXG4gICAgeyBjb2xvcjogXCJ3aGl0ZVwiLCByOiAyNTUsIGc6IDI1NSwgYjogMjU1IH0sXHJcbl07XHJcbmZ1bmN0aW9uIGVsZW1lbnRDb2xvcihlbGVtZW50KSB7XHJcbiAgICAvLyBHZXQgdGhlIHJlbmRlcmVkIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIGVsZW1lbnRcclxuICAgIGNvbnN0IGNvbG9yVGV4dCA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcImJhY2tncm91bmQtY29sb3JcIik7XHJcbiAgICBpZiAoY29sb3JUZXh0LmluY2x1ZGVzKFwicmdiKDAsIDAsIDBcIikpIHsgLy8gZWxlbWVudCBoYXMgbm8gY29sb3IgPSB0cmFuc3BhcmVudFxyXG4gICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XHJcbiAgICB9XHJcbiAgICAvLyBQYXJzZSBSR0IgdmFsdWUgYW5kIHVzZSBmYW5jeSBtYXRocyB0byBmaW5kIGNsb3Nlc3QgY29sb3JcclxuICAgIGNvbnN0IHBhcnNlZENvbG9yID0geyByOiAwLCBnOiAwLCBiOiAwIH07XHJcbiAgICBjb25zdCBtYXRjaGVkQ29sb3IgPSBjb2xvclRleHQubWF0Y2goL15yZ2JcXHMqXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccypcXCkkL2kpO1xyXG4gICAgcGFyc2VkQ29sb3IuciA9IE51bWJlcihtYXRjaGVkQ29sb3JbMV0pO1xyXG4gICAgcGFyc2VkQ29sb3IuZyA9IE51bWJlcihtYXRjaGVkQ29sb3JbMl0pO1xyXG4gICAgcGFyc2VkQ29sb3IuYiA9IE51bWJlcihtYXRjaGVkQ29sb3JbM10pO1xyXG4gICAgY29uc3QgY2xvc2VzdCA9IHsgY29sb3I6IFwiXCIsIGRpc3RhbmNlOiA0NDIgfTsgLy8gRGVmYXVsdCBkaXN0YW5jZSBqdXN0IHNsaWdodGx5IGxhcmdlciB0aGFuIG1heFxyXG4gICAgZm9yIChjb25zdCBjaGVja0NvbG9yIG9mIGNvbG9ycykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KChwYXJzZWRDb2xvci5yIC0gY2hlY2tDb2xvci5yKSwgMikgKyBNYXRoLnBvdygocGFyc2VkQ29sb3IuZyAtIGNoZWNrQ29sb3IuZyksIDIpICsgKHBhcnNlZENvbG9yLmIgLSBjaGVja0NvbG9yLmIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCBjbG9zZXN0LmRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNsb3Nlc3QuY29sb3IgPSBjaGVja0NvbG9yLmNvbG9yO1xyXG4gICAgICAgICAgICBjbG9zZXN0LmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsb3Nlc3QuY29sb3I7XHJcbn1cclxuZXhwb3J0cy5lbGVtZW50Q29sb3IgPSBlbGVtZW50Q29sb3I7XHJcbi8vIFdyYXBwZXIgZm9yIHJldHJpZXZpbmcgZnJvbSBzdG9yYWdlIHdpdGggZGVmYXVsdCB2YWx1ZSBpZiB1bmRlZmluZWRcclxuZnVuY3Rpb24gc3RvcmFnZUdldChzdG9yYWdlS2V5LCBkZWZhdWx0VmFsdWUpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmFnZVJlc3VsdCA9IHlpZWxkIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQoc3RvcmFnZUtleSk7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2VSZXN1bHRbc3RvcmFnZUtleV0gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IHN0b3JhZ2VSZXN1bHRbc3RvcmFnZUtleV0gOiBkZWZhdWx0VmFsdWU7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnN0b3JhZ2VHZXQgPSBzdG9yYWdlR2V0O1xyXG4vLyBXcmFwcGVyIGZvciByZXRyaWV2aW5nIHNldHRpbmdzIGZvciBnaXZlbiBjYXRlZ29yeSBieSB1cGRhdGluZyBmcm9tIFN0b3JhZ2UgQVBJXHJcbmZ1bmN0aW9uIHJldHJpZXZlU2V0dGluZ3Moc2V0dGluZ3NDYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAvLyBHZXQgZGVmYXVsdCBzZXR0aW5ncywgdGhlbiB1cGRhdGUgaW5kaXZpZHVhbCBzZXR0aW5ncyBmcm9tIFN0b3JhZ2UgQVBJXHJcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlTZXR0aW5ncyA9IGNvbnN0YW50c18xLmRlZmF1bHRTZXR0aW5nc1tzZXR0aW5nc0NhdGVnb3J5XTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNldHRpbmcgb2YgY2F0ZWdvcnlTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAvLyBJZ25vcmUgc2V0dGluZ3Mgd2l0aG91dCBhIHZhbHVlIChidXR0b25zIG1haW5seSlcclxuICAgICAgICAgICAgaWYgKHNldHRpbmcudmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUmVwbGFjZSB3aXRoIHZhbHVlIGZyb20gc3RvcmFnZSBpZiBtb2RpZmllZCBleGlzdHMsIG90aGVyd2lzZSBrZWVwIGRlZmF1bHRcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ0tleSA9IGBzZXR0aW5nLSR7c2V0dGluZ3NDYXRlZ29yeX0tJHtzZXR0aW5nLmtleX1gO1xyXG4gICAgICAgICAgICBzZXR0aW5nLnZhbHVlID0geWllbGQgc3RvcmFnZUdldChzZXR0aW5nS2V5LCBzZXR0aW5nLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5U2V0dGluZ3M7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJldHJpZXZlU2V0dGluZ3MgPSByZXRyaWV2ZVNldHRpbmdzO1xyXG4vLyBXcmFwcGVyIGZvciBmb3JtYXR0aW5nIHRoZSBzZXR0aW5ncyBpbnRvIGtleS12YWx1ZSBpbnN0ZWFkIG9mIGFycmF5XHJcbmZ1bmN0aW9uIHJldHJpZXZlU2V0dGluZ3NLVihzZXR0aW5nc0NhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5U2V0dGluZ3NLViA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5U2V0dGluZ3MgPSB5aWVsZCByZXRyaWV2ZVNldHRpbmdzKHNldHRpbmdzQ2F0ZWdvcnkpOyAvLyBHZXQgc2V0dGluZ3MgYmVmb3JlIHJlZm9ybWF0dGluZ1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBjYXRlZ29yeVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIC8vIElnbm9yZSBzZXR0aW5ncyB3aXRob3V0IGEgdmFsdWUgKGJ1dHRvbnMgbWFpbmx5KVxyXG4gICAgICAgICAgICBpZiAoc2V0dGluZy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRlZ29yeVNldHRpbmdzS1Zbc2V0dGluZy5rZXldID0gc2V0dGluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5U2V0dGluZ3NLVjtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMucmV0cmlldmVTZXR0aW5nc0tWID0gcmV0cmlldmVTZXR0aW5nc0tWO1xyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5qID0gNDM2OyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ0MzY6IDAsXG5cdDUzMzogMCxcblx0Mzg2OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua2V4dGVuc2lvblwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtleHRlbnNpb25cIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs3MzZdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg3MzUpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwic291cmNlUm9vdCI6IiJ9