(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=t.changelogs=void 0,t.changelogs=[{version:"b0.2.1",bulletpoints:["Fixed empty blacklist disqualifying all saved items",'Replaced icon which said "AQU" instead of "AGU" (original extension name was AutoQueueUtilities)',"<b>TODO:</b> Fix notification sound not playing if user hasn't interacted with document, maybe play from background instead?"]},{version:"b0.2.0",bulletpoints:["Added About tab showing some information and usage instructions","Changed extension icon to something somewhat more presentable","Removed placeholder logging tab pending further development","Added blacklisted keywords functionality to script (still no test buttons)","Other minor edits to extension popup styling, nothing too major"]},{version:"b0.1.0",bulletpoints:["Added changelog (this tab here) and placeholder logging tab for testing","Changed extension script loading to work somewhat more dynamically"]},{version:"b0.0.1",bulletpoints:['Ported most functionality from Tampermonkey script located <a href="https://github.com/albert-sun/tamper-scripts/">here</a>',"<b>Features not yet implemented</b>: blacklisted keywords and buttons for testing wtihin settings (removed until settings structure finalized)","<b>Improvements from Tampermonkey script</b>: Instant settings propogation and no refresh required for cart addition or removal"]}],t.defaultSettings={bestbuy:[{key:"automaticQueueFix",description:"Attempt to automatically fix broken queues",type:"slideSwitch",value:!0},{key:"autoClickWhitelisted",description:"Automatically click whitelisted ATC buttons",type:"slideSwitch",value:!0},{key:"stopClickCartOccupied",description:"Stop automatic clicking when cart occupied",type:"slideSwitch",value:!0},{key:"globalPollingInterval",description:"Global content script polling interval",type:"number",extraText:"ms",value:100},{key:"successiveClickTimeout",description:"Timeout between clicking unique buttons",type:"number",extraText:"ms",value:2500},{key:"notificationSoundURL",description:"Notification sound URL (mp3 hotlink)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"whitelistedKeywords",description:"Whitelisted keywords (comma-separated)",type:"text",value:"3060,3060ti,3060 ti,3070,3070ti,3070 ti,3080,3080ti,3080 ti,3090"},{key:"blacklistedKeywords",description:"Blacklisted keywords (comma-separated)",type:"text",value:""}]}},735:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function a(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(8197)),s=n(9416),a=n(1209),c=n(8681);function l(e,t,n=!0){return o(this,void 0,void 0,(function*(){if(yield s.browser.storage.local.set({[`setting-${e}`]:t}),!0===n){const n=yield s.browser.tabs.query({}),o={instruction:"updatedSetting",arguments:[e,t]};for(const e of n)s.browser.tabs.sendMessage(e.id,o)}}))}const d=$(".settings")[0];new r.default(d,{autoHide:!1}),$(d).find(".content-main").load("/pages/settings.html",(function(){!function(){o(this,void 0,void 0,(function*(){const e=c.defaultSettings;for(const[t,n]of Object.entries(e))e[t]=yield a.retrieveSettings(t);for(const[t,n]of Object.entries(c.defaultSettings)){const n=$(`#settings-${t}`)[0];for(const o of e[t]){const e=document.createElement("tr");e.classList.add("table-row"),n.appendChild(e);const i=document.createElement("td");i.classList.add("table-element-left"),e.appendChild(i);const r=document.createElement("td");r.classList.add("table-element-right"),e.appendChild(r),i.innerText=o.description;const s=`${t}-${o.key}`;let a;if("slideSwitch"===o.type){a=document.createElement("label"),a.classList.add("switch");const e=document.createElement("input");a.appendChild(e),e.type="checkbox",e.checked=o.value,$(e).change((function(){l(s,e.checked)}));const t=document.createElement("span");t.classList.add("slider"),t.classList.add("round"),a.appendChild(t)}else a=document.createElement("input"),a.classList.add("table-input"),a.type=o.type,a.value=o.value,$(a).change((function(){l(s,a.value)}));if(r.appendChild(a),"button"!==o.type&&"checkbox"!==o.type&&o.extraText){const e=document.createElement("p");e.classList.add("table-extra"),e.textContent=o.extraText,r.appendChild(e)}}}}))}()}))},1209:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function a(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.retrieveSettingsKV=t.retrieveSettings=t.storageGet=t.elementColor=t.sleep=void 0;const i=n(9416),r=n(8681);t.sleep=function(e){return new Promise((t=>setTimeout(t,e)))};const s=[{color:"yellow",r:255,g:224,b:0},{color:"blue",r:0,g:30,b:115},{color:"grey",r:197,g:203,b:213},{color:"white",r:255,g:255,b:255}];function a(e,t){return o(this,void 0,void 0,(function*(){const n=yield i.browser.storage.local.get(e);return void 0!==n[e]?n[e]:t}))}function c(e){return o(this,void 0,void 0,(function*(){const t=r.defaultSettings[e];for(const n of t){if(void 0===n.value)continue;const t=`setting-${e}-${n.key}`;n.value=yield a(t,n.value)}return t}))}t.elementColor=function(e){const t=getComputedStyle(e,null).getPropertyValue("background-color");if(t.includes("rgb(0, 0, 0"))return"transparent";const n={r:0,g:0,b:0},o=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);n.r=Number(o[1]),n.g=Number(o[2]),n.b=Number(o[3]);const i={color:"",distance:442};for(const e of s){const t=Math.sqrt(Math.pow(n.r-e.r,2)+Math.pow(n.g-e.g,2)+(n.b-e.b));t<i.distance&&(i.color=e.color,i.distance=t)}return i.color},t.storageGet=a,t.retrieveSettings=c,t.retrieveSettingsKV=function(e){return o(this,void 0,void 0,(function*(){const t={},n=yield c(e);for(const e of n)void 0!==e.value&&(t[e.key]=e);return t}))}}},n={};function o(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,n,i,r)=>{if(!n){var s=1/0;for(l=0;l<e.length;l++){for(var[n,i,r]=e[l],a=!0,c=0;c<n.length;c++)(!1&r||s>=r)&&Object.keys(o.O).every((e=>o.O[e](n[c])))?n.splice(c--,1):(a=!1,r<s&&(s=r));a&&(e.splice(l--,1),t=i())}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,i,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=436,(()=>{var e={436:0,533:0,386:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var i,r,[s,a,c]=n,l=0;for(i in a)o.o(a,i)&&(o.m[i]=a[i]);if(c)var d=c(o);for(t&&t(n);l<s.length;l++)r=s[l],o.o(e,r)&&e[r]&&e[r][0](),e[s[l]]=0;return o.O(d)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var i=o.O(void 0,[736],(()=>o(735)));i=o.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,