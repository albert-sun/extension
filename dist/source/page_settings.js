(()=>{"use strict";var e,t={8681:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultSettings=void 0,t.defaultSettings={autoreload:[{key:"changeResetReload",description:"Reset auto-reload on change without refresh",type:"checkbox",value:!0},{key:"notificationSoundURL",description:"Notification sound URL (mp3)",type:"text",value:"https://github.com/albert-sun/tamper-scripts/blob/main/resources/notification.mp3?raw=true"},{key:"testNotificationSound",description:"Test current notification sound",type:"button",instruction:"testNotificationSound"}]}},735:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function c(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}a((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getAllSettings=void 0;const i=n(9416),r=n(8681);function s(e,t,n=!1){return o(this,void 0,void 0,(function*(){if(yield i.browser.storage.local.set({[`setting-${e}`]:t}),!0===n){const n=yield i.browser.tabs.query({}),o={instruction:"updatedSetting",arguments:[`${e}`,t]};for(const e of n)i.browser.tabs.sendMessage(e.id,o)}}))}function c(e,t=[]){return o(this,void 0,void 0,(function*(){const n=yield i.browser.tabs.query({}),o={instruction:e,arguments:t};for(const e of n)i.browser.tabs.sendMessage(e.id,o)}))}function a(){return o(this,void 0,void 0,(function*(){const e=r.defaultSettings;for(const[t,n]of Object.entries(e))for(const e of n){if(void 0===e.value)continue;const n=`${t}-${e.key}`,o=yield i.browser.storage.local.get(`setting-${n}`);void 0!==o[`setting-${n}`]&&(e.value=o[`setting-${n}`])}return e}))}t.getAllSettings=a,function(){o(this,void 0,void 0,(function*(){const e=yield a();for(const[t,n]of Object.entries(r.defaultSettings)){const n=$(`#settings-${t}`)[0];for(const o of e[t]){const e=document.createElement("tr");e.classList.add("table-row"),n.appendChild(e);const i=document.createElement("td");i.classList.add("table-element-left"),e.appendChild(i);const r=document.createElement("td");r.classList.add("table-element-right"),e.appendChild(r),i.innerText=o.description;const a=`${t}-${o.key}`;let d;if("button"===o.type)d=document.createElement("a"),d.classList.add("table-button"),d.href="#",d.innerText="Click me!",d.onclick=function(){c(o.instruction)};else if("checkbox"===o.type){d=document.createElement("label"),d.classList.add("switch");const e=document.createElement("input");d.appendChild(e),e.type="checkbox",e.checked=o.value,$(e).change((function(){s(a,e.checked)}));const t=document.createElement("span");t.classList.add("slider"),t.classList.add("round"),d.appendChild(t)}else d=document.createElement("input"),d.classList.add("table-input"),d.type=o.type,d.value=o.value,$(d).change((function(){s(a,d.value)}));if(r.appendChild(d),"button"!==o.type&&"checkbox"!==o.type&&o.extraText){const e=document.createElement("p");e.classList.add("table-extra"),e.textContent=o.extraText,r.appendChild(e)}}}}))}()}},n={};function o(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}o.m=t,e=[],o.O=(t,n,i,r)=>{if(!n){var s=1/0;for(d=0;d<e.length;d++){for(var[n,i,r]=e[d],c=!0,a=0;a<n.length;a++)(!1&r||s>=r)&&Object.keys(o.O).every((e=>o.O[e](n[a])))?n.splice(a--,1):(c=!1,r<s&&(s=r));c&&(e.splice(d--,1),t=i())}return t}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[n,i,r]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.j=436,(()=>{var e={436:0,533:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var i,r,[s,c,a]=n,d=0;for(i in c)o.o(c,i)&&(o.m[i]=c[i]);if(a)var l=a(o);for(t&&t(n);d<s.length;d++)r=s[d],o.o(e,r)&&e[r]&&e[r][0](),e[s[d]]=0;return o.O(l)},n=self.webpackChunkextension=self.webpackChunkextension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var i=o.O(void 0,[736],(()=>o(735)));i=o.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9leHRlbnNpb24vLi9zb3VyY2UvY29uc3RhbnRzLnRzIiwid2VicGFjazovL2V4dGVuc2lvbi8uL3NvdXJjZS9wYWdlX3NldHRpbmdzLnRzIiwid2VicGFjazovL2V4dGVuc2lvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL3J1bnRpbWVJZCIsIndlYnBhY2s6Ly9leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZXh0ZW5zaW9uL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdFNldHRpbmdzIiwia2V5IiwiZGVzY3JpcHRpb24iLCJ0eXBlIiwiaW5zdHJ1Y3Rpb24iLCJfX2F3YWl0ZXIiLCJ0aGlzIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJnZXRBbGxTZXR0aW5ncyIsIndlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xIiwiY29uc3RhbnRzXzEiLCJ1cGRhdGVTZXR0aW5nIiwic2V0dGluZ0tleSIsInNldHRpbmdWYWx1ZSIsIm5vdGlmeSIsImJyb3dzZXIiLCJzdG9yYWdlIiwibG9jYWwiLCJzZXQiLCJ0YWJzIiwicXVlcnkiLCJtZXNzYWdlIiwidGFiIiwic2VuZE1lc3NhZ2UiLCJpZCIsImJyb2FkY2FzdEluc3RydWN0aW9uIiwiYXJncyIsImN1cnJlbnRTZXR0aW5ncyIsInNldHRpbmdzQ2F0ZWdvcnkiLCJzZXR0aW5ncyIsImVudHJpZXMiLCJzZXR0aW5nIiwidW5kZWZpbmVkIiwic3RvcmFnZVJlc3VsdCIsImdldCIsIl8iLCJzZXR0aW5nc1RhYmxlIiwiJCIsInNldHRpbmdSb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImxlZnREZXNjcmlwdGlvbiIsInJpZ2h0RGVzY3JpcHRpb24iLCJpbm5lclRleHQiLCJzZXR0aW5nUmlnaHQiLCJocmVmIiwib25jbGljayIsInVuZGVyQ2hlY2siLCJjaGVja2VkIiwiY2hhbmdlIiwidW5kZXJTcGFuIiwiZXh0cmFUZXh0IiwidGV4dENvbnRlbnQiLCJwb3B1bGF0ZVNldHRpbmdzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImoiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJlbnVtZXJhYmxlIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIndpbmRvdyIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImluc3RhbGxlZENodW5rcyIsImNodW5rSWQiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJmb3JFYWNoIiwiYmluZCIsInB1c2giLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoidUJBQUlBLEUsZ0JDQ0pDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRRSxxQkFBa0IsRUFJMUJGLEVBQVFFLGdCQUFrQixDQUN0QixXQUFjLENBQ1YsQ0FBRUMsSUFBSyxvQkFBcUJDLFlBQWEsOENBQStDQyxLQUFNLFdBQVlKLE9BQU8sR0FDakgsQ0FBRUUsSUFBSyx1QkFBd0JDLFlBQWEsK0JBQWdDQyxLQUFNLE9BQVFKLE1BQU8sOEZBQ2pHLENBQUVFLElBQUssd0JBQXlCQyxZQUFhLGtDQUFtQ0MsS0FBTSxTQUFVQyxZQUFhLDRCLG9CQ1RySCxJQUFJQyxFQUFhQyxNQUFRQSxLQUFLRCxXQUFjLFNBQVVFLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVZixHQUFTLElBQU1nQixFQUFLTCxFQUFVTSxLQUFLakIsSUFBVyxNQUFPa0IsR0FBS0osRUFBT0ksSUFDcEYsU0FBU0MsRUFBU25CLEdBQVMsSUFBTWdCLEVBQUtMLEVBQWlCLE1BQUVYLElBQVcsTUFBT2tCLEdBQUtKLEVBQU9JLElBQ3ZGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVwQixFQUlhb0IsRUFBT0MsS0FBT1IsRUFBUU8sRUFBT3BCLFFBSjFDQSxFQUl5RG9C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QUE0Qix1QkFBSyxHQUMxRkQsRUFBbUJFLFFBQVFQLEVBQXFCUSxLQUFLLEtBQU0sSUFDM0RILEVBQW1CSSxLQUFPVCxFQUFxQlEsS0FBSyxLQUFNSCxFQUFtQkksS0FBS0QsS0FBS0gsSyxHQzVDdkYsSUFBSUssRUFBc0JsRCxFQUFvQk8sT0FBRWpDLEVBQVcsQ0FBQyxNQUFNLElBQU8wQixFQUFvQixPQUM3RmtELEVBQXNCbEQsRUFBb0JPLEVBQUUyQyxJIiwiZmlsZSI6InNvdXJjZS9wYWdlX3NldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0cmVzdWx0ID0gZm4oKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5kZWZhdWx0U2V0dGluZ3MgPSB2b2lkIDA7XHJcbmNvbnN0IHF1ZXVlRGF0YUtleSA9IFwiYmVzdGJ1eS1xdWV1ZURhdGFcIjtcclxuY29uc3Qgc2V0dGluZ3NLZXkgPSBcInNldHRpbmdzXCI7IC8vIEFsbCBzZXR0aW5nc1xyXG4vLyBTZXR0aW5ncyBhY3Jvc3MgYWxsIGNhdGVnb3JpZXMgZm9yIGV4dGVuc2lvblxyXG5leHBvcnRzLmRlZmF1bHRTZXR0aW5ncyA9IHtcclxuICAgIFwiYXV0b3JlbG9hZFwiOiBbXHJcbiAgICAgICAgeyBrZXk6IFwiY2hhbmdlUmVzZXRSZWxvYWRcIiwgZGVzY3JpcHRpb246IFwiUmVzZXQgYXV0by1yZWxvYWQgb24gY2hhbmdlIHdpdGhvdXQgcmVmcmVzaFwiLCB0eXBlOiBcImNoZWNrYm94XCIsIHZhbHVlOiB0cnVlIH0sXHJcbiAgICAgICAgeyBrZXk6IFwibm90aWZpY2F0aW9uU291bmRVUkxcIiwgZGVzY3JpcHRpb246IFwiTm90aWZpY2F0aW9uIHNvdW5kIFVSTCAobXAzKVwiLCB0eXBlOiBcInRleHRcIiwgdmFsdWU6IFwiaHR0cHM6Ly9naXRodWIuY29tL2FsYmVydC1zdW4vdGFtcGVyLXNjcmlwdHMvYmxvYi9tYWluL3Jlc291cmNlcy9ub3RpZmljYXRpb24ubXAzP3Jhdz10cnVlXCIgfSxcclxuICAgICAgICB7IGtleTogXCJ0ZXN0Tm90aWZpY2F0aW9uU291bmRcIiwgZGVzY3JpcHRpb246IFwiVGVzdCBjdXJyZW50IG5vdGlmaWNhdGlvbiBzb3VuZFwiLCB0eXBlOiBcImJ1dHRvblwiLCBpbnN0cnVjdGlvbjogXCJ0ZXN0Tm90aWZpY2F0aW9uU291bmRcIiB9LFxyXG4gICAgXVxyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0QWxsU2V0dGluZ3MgPSB2b2lkIDA7XHJcbmNvbnN0IHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbC10c1wiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XHJcbi8vIEFzeW5jaHJvbm91c2x5IHVwZGF0ZXMgZXh0ZW5zaW9uIHN0b3JhZ2Ugd2l0aCBnaXZlbiBzZXR0aW5nIGFuZCBub3RpZnkgdGFicyBvZiB1cGRhdGVcclxuLy8gSXNzdWUgd2l0aCBub3RpZnlpbmcgdG8gcGFnZXMgbm90IHJlbG9hZGVkIHdoZW4gdXBkYXRpbmcgZXh0ZW5zaW9uIHNvdXJjZT9cclxuZnVuY3Rpb24gdXBkYXRlU2V0dGluZyhzZXR0aW5nS2V5LCBzZXR0aW5nVmFsdWUsIG5vdGlmeSA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHlpZWxkIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBbYHNldHRpbmctJHtzZXR0aW5nS2V5fWBdOiBzZXR0aW5nVmFsdWUgfSk7XHJcbiAgICAgICAgaWYgKG5vdGlmeSA9PT0gdHJ1ZSkgeyAvLyBFbmFibGVkIGJ5IGRlZmF1bHQgZm9yIGNvbnZlbmllbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYnMgPSB5aWVsZCB3ZWJleHRlbnNpb25fcG9seWZpbGxfdHNfMS5icm93c2VyLnRhYnMucXVlcnkoe30pO1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0geyBcImluc3RydWN0aW9uXCI6IFwidXBkYXRlZFNldHRpbmdcIiwgXCJhcmd1bWVudHNcIjogW2Ake3NldHRpbmdLZXl9YCwgc2V0dGluZ1ZhbHVlXSB9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhYiBvZiB0YWJzKSB7IC8vIE5vdGlmeSBpbmRpdmlkdWFsIHRhYnMgb2YgdXBkYXRlZCBzZXR0aW5nXHJcbiAgICAgICAgICAgICAgICB3ZWJleHRlbnNpb25fcG9seWZpbGxfdHNfMS5icm93c2VyLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8vIEZyb20gc2V0dGluZ3MgYnV0dG9ucywgYnJvYWRjYXN0IGdpdmVuIGluc3RydWN0aW9uIHRvIHRhYnNcclxuZnVuY3Rpb24gYnJvYWRjYXN0SW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24sIGFyZ3MgPSBbXSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCB0YWJzID0geWllbGQgd2ViZXh0ZW5zaW9uX3BvbHlmaWxsX3RzXzEuYnJvd3Nlci50YWJzLnF1ZXJ5KHt9KTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0geyBcImluc3RydWN0aW9uXCI6IGluc3RydWN0aW9uLCBcImFyZ3VtZW50c1wiOiBhcmdzIH07XHJcbiAgICAgICAgZm9yIChjb25zdCB0YWIgb2YgdGFicykge1xyXG4gICAgICAgICAgICAvLyBXYWl0IGZvciByZXNwb25zZSBhbmQgcmV0dXJuIHdpdGggdGFicz9cclxuICAgICAgICAgICAgd2ViZXh0ZW5zaW9uX3BvbHlmaWxsX3RzXzEuYnJvd3Nlci50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgbWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8gQXN5bmNocm9ub3VzbHkgcmV0cmlldmUgYWxsIGV4dGVuc2lvbiBzZXR0aW5ncyBmcm9tIFN0b3JhZ2UgQVBJXHJcbi8vIEFscmlnaHQgdG8gbW9kaWZ5IGJlY2F1c2Ugc2NvcGVkIG9ubHkgd2l0aGluIGV4dGVuc2lvbiBwb3B1cC4uLj9cclxuZnVuY3Rpb24gZ2V0QWxsU2V0dGluZ3MoKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IGNvbnN0YW50c18xLmRlZmF1bHRTZXR0aW5nczsgLy8gQ2FuIEkgbW9kaWZ5IGRlZmF1bHRTZXR0aW5ncz9cclxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGNhdGVnb3JpZXMgYW5kIGluZGl2aWR1YWwgc2V0dGluZ3NcclxuICAgICAgICBmb3IgKGNvbnN0IFtzZXR0aW5nc0NhdGVnb3J5LCBzZXR0aW5nc10gb2YgT2JqZWN0LmVudHJpZXMoY3VycmVudFNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNldHRpbmcgb2Ygc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBzZXR0aW5ncyB0aGF0IGFyZW4ndCBhY3R1YWxseSBzZXR0aW5ncyAoYnV0dG9ucywgZXRjLilcclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nLnZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFJlcGxhY2Ugd2l0aCB2YWx1ZSBmcm9tIHN0b3JhZ2UgaWYgbW9kaWZpZWQgZXhpc3RzLCBvdGhlcndpc2Uga2VlcCBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nS2V5ID0gYCR7c2V0dGluZ3NDYXRlZ29yeX0tJHtzZXR0aW5nLmtleX1gO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZVJlc3VsdCA9IHlpZWxkIHdlYmV4dGVuc2lvbl9wb2x5ZmlsbF90c18xLmJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQoYHNldHRpbmctJHtzZXR0aW5nS2V5fWApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VSZXN1bHRbYHNldHRpbmctJHtzZXR0aW5nS2V5fWBdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnZhbHVlID0gc3RvcmFnZVJlc3VsdFtgc2V0dGluZy0ke3NldHRpbmdLZXl9YF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZXR0aW5ncztcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZ2V0QWxsU2V0dGluZ3MgPSBnZXRBbGxTZXR0aW5ncztcclxuLy8gUmV0cmlldmUgZXhpc3Rpbmcgc2V0dGluZ3MgZnJvbSBzdG9yYWdlIGFuZCBwb3B1bGF0ZSBzZXR0aW5ncyB0YWJsZSBmb3IgY2F0ZWdvcnlcclxuZnVuY3Rpb24gcG9wdWxhdGVTZXR0aW5ncygpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgLy8gQ2FjaGUgZXhpc3Rpbmcgc2V0dGluZ3MgZnJvbSBzdG9yYWdlIFxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IHlpZWxkIGdldEFsbFNldHRpbmdzKCk7XHJcbiAgICAgICAgLy8gUG9wdWxhdGUgYWxsIHNldHRpbmdzIGNhdGVnb3JpZXMgdGFibGVzIHdpdGhpbiBzZXR0aW5ncyBwYWdlXHJcbiAgICAgICAgZm9yIChjb25zdCBbc2V0dGluZ3NDYXRlZ29yeSwgX10gb2YgT2JqZWN0LmVudHJpZXMoY29uc3RhbnRzXzEuZGVmYXVsdFNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGZhbmN5IHRhYmxlIHJvd3MgYW5kIHN0dWZmLCBoYXMgdG8gYmUgYSBjbGVhbmVyIHdheT9cclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NUYWJsZSA9ICQoYCNzZXR0aW5ncy0ke3NldHRpbmdzQ2F0ZWdvcnl9YClbMF07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBjdXJyZW50U2V0dGluZ3Nbc2V0dGluZ3NDYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcmVsZXZhbnQgZWxlbWVudHMgZm9yIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Jvdy5jbGFzc0xpc3QuYWRkKFwidGFibGUtcm93XCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NUYWJsZS5hcHBlbmRDaGlsZChzZXR0aW5nUm93KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgICAgICAgIGxlZnREZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwidGFibGUtZWxlbWVudC1sZWZ0XCIpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1Jvdy5hcHBlbmRDaGlsZChsZWZ0RGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0RGVzY3JpcHRpb24uY2xhc3NMaXN0LmFkZChcInRhYmxlLWVsZW1lbnQtcmlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nUm93LmFwcGVuZENoaWxkKHJpZ2h0RGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgZGVzY3JpcHRpb24gYW5kIGluZm9ybWF0aW9uIGZyb20gc2V0dGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gQWxzbyBhdHRhY2ggb25jbGljayAvIG9uY2hhbmdlIGNhbGxiYWNrcyB0byBjaGFuZ2Ugc2V0dGluZ3NcclxuICAgICAgICAgICAgICAgIGxlZnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBzZXR0aW5nLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ0tleSA9IGAke3NldHRpbmdzQ2F0ZWdvcnl9LSR7c2V0dGluZy5rZXl9YDtcclxuICAgICAgICAgICAgICAgIGxldCBzZXR0aW5nUmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZy50eXBlID09PSBcImJ1dHRvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQnV0dG9uIHVzdWFsbHkgZm9yIHRlc3RpbmcsIGJyb2FkY2FzdHMgc3BlY2lmaWMgaW5zdHJ1Y3Rpb24gKGVtcHR5IGFyZ3VtZW50cylcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuY2xhc3NMaXN0LmFkZChcInRhYmxlLWJ1dHRvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuaHJlZiA9IFwiI1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC5pbm5lclRleHQgPSBcIkNsaWNrIG1lIVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3RJbnN0cnVjdGlvbihzZXR0aW5nLmluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2V0dGluZy50eXBlID09PSBcImNoZWNrYm94XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVja2JveCwgYWN0cyBtdWNoIGxpa2UgcmVndWxhciBpbnB1dCB3LyBkaWZmZXJlbnQgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nUmlnaHQuY2xhc3NMaXN0LmFkZChcInN3aXRjaFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bmRlckNoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC5hcHBlbmRDaGlsZCh1bmRlckNoZWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB1bmRlckNoZWNrLnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5kZXJDaGVjay5jaGVja2VkID0gc2V0dGluZy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkKHVuZGVyQ2hlY2spLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmcoc2V0dGluZ0tleSwgdW5kZXJDaGVjay5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bmRlclNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgICAgICAgICB1bmRlclNwYW4uY2xhc3NMaXN0LmFkZChcInNsaWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB1bmRlclNwYW4uY2xhc3NMaXN0LmFkZChcInJvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC5hcHBlbmRDaGlsZCh1bmRlclNwYW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHRleHQgLyBudW1iZXIgLyBldGMuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVndWxhciBpbnB1dCwgYXNzdW1lIHZhbHVlcyBhcmUgcGFyc2VkIHByb3Blcmx5XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdSaWdodC5jbGFzc0xpc3QuYWRkKFwidGFibGUtaW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0LnR5cGUgPSBzZXR0aW5nLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ1JpZ2h0LnZhbHVlID0gc2V0dGluZy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkKHNldHRpbmdSaWdodCkuY2hhbmdlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZyhzZXR0aW5nS2V5LCBzZXR0aW5nUmlnaHQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmlnaHREZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChzZXR0aW5nUmlnaHQpO1xyXG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIGV4dHJhIHRleHQgdG8gaW5wdXQgKHRleHQsIG51bWJlciwgZXRjLikgdXNpbmcgYSBwYXJhZ3JhcGggZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgaWYgKChzZXR0aW5nLnR5cGUgIT09IFwiYnV0dG9uXCIgJiYgc2V0dGluZy50eXBlICE9PSBcImNoZWNrYm94XCIpICYmIHNldHRpbmcuZXh0cmFUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0YWJsZS1leHRyYVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBleHRyYVRleHQudGV4dENvbnRlbnQgPSBzZXR0aW5nLmV4dHJhVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICByaWdodERlc2NyaXB0aW9uLmFwcGVuZENoaWxkKGV4dHJhVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5wb3B1bGF0ZVNldHRpbmdzKCk7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmogPSA0MzY7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDQzNjogMCxcblx0NTMzOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua2V4dGVuc2lvblwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtleHRlbnNpb25cIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs3MzZdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg3MzUpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwic291cmNlUm9vdCI6IiJ9