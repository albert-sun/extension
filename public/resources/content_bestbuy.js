(()=>{"use strict";var a,e,G,t,r,i,d={661:(a,e,G)=>{G.a(a,(async a=>{var e=G(313),t=G(256),r=G(54);const i=e.en,d={ping:t.z,"process-add_to_cart":async function(a,e,G){const t={accept:"application/json","accept-language":"en-US,en;q=0.9","content-type":"application/json; charset=UTF-8","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin"};void 0!==e&&(t.a2ctransactionreferenceid=e),void 0!==G&&(t.a2ctransactioncode=G);const r=await fetch("https://www.bestbuy.com/cart/api/v1/addToCart",{headers:t,referrer:"https://www.bestbuy.com/cart",referrerPolicy:"strict-origin-when-cross-origin",body:`{"items":[{"skuId":"${a}"}]}`,method:"POST",mode:"cors",credentials:"include"});let i;return 200!==r.status&&400!==r.status&&(i=["reload","retry"]),{value:r.status,execute:i}}};await async function(){(0,r.Z0)(i,d,["content","background","extension"]),(0,r.Vf)(i,"Finished processing content script startup routine")}(),await async function(){const a=atob(localStorage.getItem("purchaseTracker")||"e30="),e=JSON.parse(a);(0,r.km)("merge-bestbuy-product_queues",[e])}(),a()}),1)},313:(a,e,G)=>{G.d(e,{en:()=>t}),(0,G(261).fZ)([]);const t="content";Object.entries({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}}).reduce(((a,[e,G])=>Object.assign(Object.assign({},a),Object.entries(G.items).reduce(((a,[e,G])=>(a[G.data]=G.display,a)),{}))),{})},256:(a,e,G)=>{async function t(){return{value:"okay"}}G.d(e,{z:()=>t})},54:(a,e,G)=>{function t(a,e,G="info"){const t=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${a})\t\t${e}`;"info"===G?console.log(t):"debug"===G?console.debug(t):"warn"===G?console.warn(t):"error"===G&&console.error(t)}async function r(a,e=[]){const G={handler:a,args:e},t=await async function(a){return await new Promise((e=>{browser.runtime.sendMessage(a).then((a=>e(a))).catch((a=>e(a.message)))}))}(G);return t}function i(a,e,G){browser.runtime.onMessage.addListener((async(G,r)=>{const i=G;let d={result:"success",payload:{value:void 0}};const o=e[i.handler];if(void 0!==o){t(a,`Processing handler ${i.handler} with arguments ${JSON.stringify(i.args)}`);try{const a=await o(...i.args||[]);d.result="okay",d.payload=a}catch(e){const G=e.message;d.result="error",d.payload.value=G,t(a,`Error processing handler ${i.handler}: ${G}`,"error")}}return d}))}G.d(e,{Vf:()=>t,km:()=>r,Z0:()=>i}),G(261)}},o={};function s(a){var e=o[a];if(void 0!==e)return e.exports;var G=o[a]={exports:{}};return d[a](G,G.exports,s),G.exports}s.m=d,a="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",G=a=>{a&&(a.forEach((a=>a.r--)),a.forEach((a=>a.r--?a.r++:a())))},t=a=>!--a.r&&a(),r=(a,e)=>a?a.push(e):t(e),s.a=(i,d,o)=>{var s,T,c,R=o&&[],l=i.exports,p=!0,X=!1,A=(e,G,t)=>{X||(X=!0,G.r+=e.length,e.map(((e,r)=>e[a](G,t))),X=!1)},n=new Promise(((a,e)=>{c=e,T=()=>(a(l),G(R),R=0)}));n[e]=l,n[a]=(a,e)=>{if(p)return t(a);s&&A(s,a,e),r(R,a),n.catch(e)},i.exports=n,d((i=>{if(!i)return T();var d,o;s=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[a])return i;if(i.then){var d=[];i.then((a=>{o[e]=a,G(d),d=0}));var o={};return o[a]=(a,e)=>(r(d,a),i.catch(e)),o}}var s={};return s[a]=a=>t(a),s[e]=i,s})))(i);var c=new Promise(((a,G)=>{(d=()=>a(o=s.map((a=>a[e])))).r=0,A(s,d,G)}));return d.r?c:o})).then(T,c),p=!1},i=[],s.O=(a,e,G,t)=>{if(!e){var r=1/0;for(c=0;c<i.length;c++){for(var[e,G,t]=i[c],d=!0,o=0;o<e.length;o++)(!1&t||r>=t)&&Object.keys(s.O).every((a=>s.O[a](e[o])))?e.splice(o--,1):(d=!1,t<r&&(r=t));if(d){i.splice(c--,1);var T=G();void 0!==T&&(a=T)}}return a}t=t||0;for(var c=i.length;c>0&&i[c-1][2]>t;c--)i[c]=i[c-1];i[c]=[e,G,t]},s.d=(a,e)=>{for(var G in e)s.o(e,G)&&!s.o(a,G)&&Object.defineProperty(a,G,{enumerable:!0,get:e[G]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(a){if("object"==typeof window)return window}}(),s.o=(a,e)=>Object.prototype.hasOwnProperty.call(a,e),s.j=9,(()=>{var a={9:0};s.O.j=e=>0===a[e];var e=(e,G)=>{var t,r,[i,d,o]=G,T=0;if(i.some((e=>0!==a[e]))){for(t in d)s.o(d,t)&&(s.m[t]=d[t]);if(o)var c=o(s)}for(e&&e(G);T<i.length;T++)r=i[T],s.o(a,r)&&a[r]&&a[r][0](),a[i[T]]=0;return s.O(c)},G=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];G.forEach(e.bind(null,0)),G.push=e.bind(null,G.push.bind(G))})();var T=s.O(void 0,[154],(()=>s(661)));T=s.O(T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,