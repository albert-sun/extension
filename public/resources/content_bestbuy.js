(()=>{"use strict";var e,a,t,r,G,i,d={661:(e,a,t)=>{t.a(e,(async e=>{var a=t(313),r=t(54),G=e([r,a]);[r,a]=G.then?await G:G;const i=a.en,d={ping:r.zd,"content-add_to_cart":async function(e,a,t){const r={accept:"application/json","accept-language":"en-US,en;q=0.9","content-type":"application/json; charset=UTF-8","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin"};void 0!==a&&(r.a2ctransactionreferenceid=a),void 0!==t&&(r.a2ctransactioncode=t);const G=await fetch("https://www.bestbuy.com/cart/api/v1/addToCart",{headers:r,referrer:"https://www.bestbuy.com/cart",referrerPolicy:"strict-origin-when-cross-origin",body:`{"items":[{"skuId":"${e}"}]}`,method:"POST",mode:"cors",credentials:"include"});let i=[];return 200!==G.status&&400!==G.status&&i.push("reload","retry"),{value:G.status,execute:i}}};await async function(){(0,r.Z0)(i,d),(0,r.Vf)(i,"Finished processing content script startup routine")}(),await async function(){const e=atob(localStorage.getItem("purchaseTracker")||"e30="),a={handler:"merge-bestbuy-product_queues",args:[JSON.parse(e)]};(0,r.km)(a)}(),e()}),1)},313:(e,a,t)=>{t.a(e,(async e=>{t.d(a,{en:()=>d});var r=t(261),G=t(54),i=e([G]);G=(i.then?await i:i)[0],(0,r.fZ)([]),await(0,G.MO)("settings",{}),await(0,G.MO)("bestbuy-queues",{});const d="content";(0,G.ep)({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}}),e()}),1)},54:(e,a,t)=>{t.a(e,(async e=>{t.d(a,{ep:()=>d,Vf:()=>o,zd:()=>s,Z0:()=>c,km:()=>T,MO:()=>l});var r=t(261),G=t(313),i=e([G]);function d(e){return Object.entries(e).reduce(((e,[a,t])=>Object.assign(Object.assign({},e),Object.entries(t.items).reduce(((e,[a,t])=>(e[t.data]=t.display,e)),{}))),{})}function o(e,a,t="info"){const r=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${a}`;"info"===t?console.log(r):"debug"===t?console.debug(r):"warn"===t?console.warn(r):"error"===t&&console.error(r)}async function s(){return{result:"ok",payload:{value:"ping!",execute:[]}}}function c(e,a){browser.runtime.onMessage.addListener((async(t,r)=>{console.log("<= received"),console.log(t);const G=t;let i={result:"ok",payload:{value:void 0,execute:[]}};const d=a[G.handler];if(void 0!==d){o(e,`Processing handler ${G.handler} with arguments ${JSON.stringify(G.args)}`);try{const e=await d(...G.args||[]);i.result="ok",i.payload=e,console.log("== return"),console.log(i)}catch(a){const t=a.message;i.result="error",i.payload={value:t,execute:[]},o(e,`Error processing handler ${G.handler}: ${t}`,"error")}}return i}))}async function T(e){return console.log("=> sent"),console.log(e),await new Promise((a=>{browser.runtime.sendMessage(e).then((e=>a(e))).catch((e=>a({result:"error",payload:{value:e.message,execute:[]}})))}))}async function l(e,a){const t=await async function(e,a){const t=await browser.storage.local.get(e);return void 0===t[e]&&(t[e]=a),t[e]}(e,a),G=(0,r.fZ)(t);return browser.runtime.onMessage.addListener((async(a,t)=>{const r=a;if("update-set"===r.handler){const[a,t,i]=r.args;a===e&&G.update((e=>(e[t]=i,e)))}else if("update-delete"===r.handler){const[a,t]=r.args;a===e&&G.update((e=>(delete e[t],e)))}})),{store:G,set:(a,t)=>{G.update((e=>(e[a]=t,e))),browser.storage.local.set({[e]:(0,r.U2)(G)}),T({handler:"update-set",args:[e,a,t]})},del:a=>{G.update((e=>(delete e[a],e))),browser.storage.local.set({[e]:(0,r.U2)(G)}),T({handler:"update-del",args:[e,a]})}}}G=(i.then?await i:i)[0]}))}},o={};function s(e){var a=o[e];if(void 0!==a)return a.exports;var t=o[e]={exports:{}};return d[e](t,t.exports,s),t.exports}s.m=d,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",a="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},r=e=>!--e.r&&e(),G=(e,a)=>e?e.push(a):r(a),s.a=(i,d,o)=>{var s,c,T,l=o&&[],R=i.exports,n=!0,p=!1,X=(a,t,r)=>{p||(p=!0,t.r+=a.length,a.map(((a,G)=>a[e](t,r))),p=!1)},A=new Promise(((e,a)=>{T=a,c=()=>(e(R),t(l),l=0)}));A[a]=R,A[e]=(e,a)=>{if(n)return r(e);s&&X(s,e,a),G(l,e),A.catch(a)},i.exports=A,d((i=>{if(!i)return c();var d,o;s=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var d=[];i.then((e=>{o[a]=e,t(d),d=0}));var o={};return o[e]=(e,a)=>(G(d,e),i.catch(a)),o}}var s={};return s[e]=e=>r(e),s[a]=i,s})))(i);var T=new Promise(((e,t)=>{(d=()=>e(o=s.map((e=>e[a])))).r=0,X(s,d,t)}));return d.r?T:o})).then(c,T),n=!1},i=[],s.O=(e,a,t,r)=>{if(!a){var G=1/0;for(T=0;T<i.length;T++){for(var[a,t,r]=i[T],d=!0,o=0;o<a.length;o++)(!1&r||G>=r)&&Object.keys(s.O).every((e=>s.O[e](a[o])))?a.splice(o--,1):(d=!1,r<G&&(G=r));if(d){i.splice(T--,1);var c=t();void 0!==c&&(e=c)}}return e}r=r||0;for(var T=i.length;T>0&&i[T-1][2]>r;T--)i[T]=i[T-1];i[T]=[a,t,r]},s.d=(e,a)=>{for(var t in a)s.o(a,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:a[t]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),s.j=9,(()=>{var e={9:0};s.O.j=a=>0===e[a];var a=(a,t)=>{var r,G,[i,d,o]=t,c=0;if(i.some((a=>0!==e[a]))){for(r in d)s.o(d,r)&&(s.m[r]=d[r]);if(o)var T=o(s)}for(a&&a(t);c<i.length;c++)G=i[c],s.o(e,G)&&e[G]&&e[G][0](),e[i[c]]=0;return s.O(T)},t=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];t.forEach(a.bind(null,0)),t.push=a.bind(null,t.push.bind(t))})();var c=s.O(void 0,[154],(()=>s(661)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,