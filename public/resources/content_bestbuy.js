(()=>{"use strict";var e,r,t,n,o,s,a={661:(e,r,t)=>{t.a(e,(async e=>{var r=t(54);const n="content_bestbuy",o={"process-atc":async function(e,r,t){const n={accept:"application/json","accept-language":"en-US,en;q=0.9","content-type":"application/json; charset=UTF-8","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin"};void 0!==r&&(n.a2ctransactionreferenceid=r),void 0!==t&&(n.a2ctransactioncode=t);const o=await fetch("https://www.bestbuy.com/cart/api/v1/addToCart",{headers:n,referrer:"https://www.bestbuy.com/cart",referrerPolicy:"strict-origin-when-cross-origin",body:`{"items":[{"skuId":"${e}"}]}`,method:"POST",mode:"cors",credentials:"include"});return 200===o.status?"success":400===o.status?"failure":"error"}};await async function(){(0,r.Z0)(n,o,["background","extension"]),(0,r.Vf)(n,"Finished processing content script startup routine")}(),await async function(){const e=atob(localStorage.getItem("purchaseTracker")||"e30="),t=JSON.parse(e);(0,r.eJ)("content_best-buy","merge-bestbuy-product_queues",[t])}(),e()}),1)},54:(e,r,t)=>{function n(e,r,t="info"){const n=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${r}`;"info"===t?console.log(n):"debug"===t?console.debug(n):"warn"===t?console.warn(n):"error"===t&&console.error(n)}async function o(e,r,t=[]){const n={sender:e,handler:r,args:t};return await browser.runtime.sendMessage(n)}function s(e,r,t){browser.runtime.onMessage.addListener((async(o,s)=>{const a=o;let c={status:"success",payload:void 0};if(t.includes(a.sender)){const t=r[a.handler];if(void 0!==t){n(e,`Processing handler ${a.handler} from ${a.sender} with arguments ${JSON.stringify(a.args)}`);try{const e=await t(...a.args||[]);c.status="success",c.payload=e}catch(r){const t=r.message;c.status="error",c.payload=t,n(e,`Error processing handler ${a.handler}: ${t}`,"error")}}else n(e,`Error, given handler ${a.handler} doesn't exist`,"error"),c.status="not-found"}return c}))}t.d(r,{Vf:()=>n,eJ:()=>o,Z0:()=>s}),t(261)}},c={};function i(e){var r=c[e];if(void 0!==r)return r.exports;var t=c[e]={exports:{}};return a[e](t,t.exports,i),t.exports}i.m=a,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",r="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n=e=>!--e.r&&e(),o=(e,r)=>e?e.push(r):n(r),i.a=(s,a,c)=>{var i,u,l,d=c&&[],f=s.exports,h=!0,p=!1,b=(r,t,n)=>{p||(p=!0,t.r+=r.length,r.map(((r,o)=>r[e](t,n))),p=!1)},g=new Promise(((e,r)=>{l=r,u=()=>(e(f),t(d),d=0)}));g[r]=f,g[e]=(e,r)=>{if(h)return n(e);i&&b(i,e,r),o(d,e),g.catch(r)},s.exports=g,a((s=>{if(!s)return u();var a,c;i=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[e])return s;if(s.then){var a=[];s.then((e=>{c[r]=e,t(a),a=0}));var c={};return c[e]=(e,r)=>(o(a,e),s.catch(r)),c}}var i={};return i[e]=e=>n(e),i[r]=s,i})))(s);var l=new Promise(((e,t)=>{(a=()=>e(c=i.map((e=>e[r])))).r=0,b(i,a,t)}));return a.r?l:c})).then(u,l),h=!1},s=[],i.O=(e,r,t,n)=>{if(!r){var o=1/0;for(l=0;l<s.length;l++){for(var[r,t,n]=s[l],a=!0,c=0;c<r.length;c++)(!1&n||o>=n)&&Object.keys(i.O).every((e=>i.O[e](r[c])))?r.splice(c--,1):(a=!1,n<o&&(o=n));if(a){s.splice(l--,1);var u=t();void 0!==u&&(e=u)}}return e}n=n||0;for(var l=s.length;l>0&&s[l-1][2]>n;l--)s[l]=s[l-1];s[l]=[r,t,n]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),i.j=9,(()=>{var e={9:0};i.O.j=r=>0===e[r];var r=(r,t)=>{var n,o,[s,a,c]=t,u=0;if(s.some((r=>0!==e[r]))){for(n in a)i.o(a,n)&&(i.m[n]=a[n]);if(c)var l=c(i)}for(r&&r(t);u<s.length;u++)o=s[u],i.o(e,o)&&e[o]&&e[o][0](),e[s[u]]=0;return i.O(l)},t=self.webpackChunkgraphics_queue_utilities=self.webpackChunkgraphics_queue_utilities||[];t.forEach(r.bind(null,0)),t.push=r.bind(null,t.push.bind(t))})();var u=i.O(void 0,[154],(()=>i(661)));u=i.O(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,