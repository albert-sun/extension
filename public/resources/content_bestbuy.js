(()=>{"use strict";var e,t,r,n,o,a,s={661:(e,t,r)=>{r.a(e,(async e=>{var t=r(313),n=r(54);const o=t.en,a={ping:n.zd,"content-add_to_cart":async function(e,t,r){const n={accept:"application/json","accept-language":"en-US,en;q=0.9","content-type":"application/json; charset=UTF-8","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin"};void 0!==t&&(n.a2ctransactionreferenceid=t),void 0!==r&&(n.a2ctransactioncode=r);const o=await fetch("https://www.bestbuy.com/cart/api/v1/addToCart",{headers:n,referrer:"https://www.bestbuy.com/cart",referrerPolicy:"strict-origin-when-cross-origin",body:`{"items":[{"skuId":"${e}"}]}`,method:"POST",mode:"cors",credentials:"include"});let a=[];return 200!==o.status&&400!==o.status&&a.push("reload","retry"),{value:o.status,execute:a}}};await async function(){(0,n.Z0)(o,a),(0,n.Vf)(o,"Finished processing content script startup routine")}(),await async function(){const e=atob(localStorage.getItem("purchaseTracker")||"e30="),t={handler:"merge-bestbuy-product_queues",args:[JSON.parse(e)]};(0,n.km)(t)}(),e()}),1)},313:(e,t,r)=>{r.d(t,{en:()=>n});const n="content"},54:(e,t,r)=>{function n(e,t,r="info"){const n=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===r?console.log(n):"debug"===r?console.debug(n):"warn"===r?console.warn(n):"error"===r&&console.error(n)}async function o(){return{result:"ok",payload:{value:"ping!",execute:[]}}}function a(e,t){browser.runtime.onMessage.addListener((async(r,o)=>{const a=r;let s={result:"ok",payload:{value:void 0,execute:[]}};const c=t[a.handler];if(void 0!==c){n(e,`Processing handler ${a.handler} with arguments ${JSON.stringify(a.args)}`);try{const e=await c(...a.args||[]);s.result="ok",s.payload=e}catch(t){const r=t.message;s.result="error",s.payload={value:r,execute:[]},n(e,`Error processing handler ${a.handler}: ${r}`,"error")}}return s}))}async function s(e){return await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:{value:e.message,execute:[]}})))}))}r.d(t,{Vf:()=>n,zd:()=>o,Z0:()=>a,km:()=>s}),r(261),r(313)}},c={};function i(e){var t=c[e];if(void 0!==t)return t.exports;var r=c[e]={exports:{}};return s[e](r,r.exports,i),r.exports}i.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n=e=>!--e.r&&e(),o=(e,t)=>e?e.push(t):n(t),i.a=(a,s,c)=>{var i,u,l,d=c&&[],p=a.exports,h=!0,f=!1,g=(t,r,n)=>{f||(f=!0,r.r+=t.length,t.map(((t,o)=>t[e](r,n))),f=!1)},m=new Promise(((e,t)=>{l=t,u=()=>(e(p),r(d),d=0)}));m[t]=p,m[e]=(e,t)=>{if(h)return n(e);i&&g(i,e,t),o(d,e),m.catch(t)},a.exports=m,s((a=>{if(!a)return u();var s,c;i=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var s=[];a.then((e=>{c[t]=e,r(s),s=0}));var c={};return c[e]=(e,t)=>(o(s,e),a.catch(t)),c}}var i={};return i[e]=e=>n(e),i[t]=a,i})))(a);var l=new Promise(((e,r)=>{(s=()=>e(c=i.map((e=>e[t])))).r=0,g(i,s,r)}));return s.r?l:c})).then(u,l),h=!1},a=[],i.O=(e,t,r,n)=>{if(!t){var o=1/0;for(l=0;l<a.length;l++){for(var[t,r,n]=a[l],s=!0,c=0;c<t.length;c++)(!1&n||o>=n)&&Object.keys(i.O).every((e=>i.O[e](t[c])))?t.splice(c--,1):(s=!1,n<o&&(o=n));if(s){a.splice(l--,1);var u=r();void 0!==u&&(e=u)}}return e}n=n||0;for(var l=a.length;l>0&&a[l-1][2]>n;l--)a[l]=a[l-1];a[l]=[t,r,n]},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.j=9,(()=>{var e={9:0};i.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[a,s,c]=r,u=0;if(a.some((t=>0!==e[t]))){for(n in s)i.o(s,n)&&(i.m[n]=s[n]);if(c)var l=c(i)}for(t&&t(r);u<a.length;u++)o=a[u],i.o(e,o)&&e[o]&&e[o][0](),e[a[u]]=0;return i.O(l)},r=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var u=i.O(void 0,[154],(()=>i(661)));u=i.O(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,