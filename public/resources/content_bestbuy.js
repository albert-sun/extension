(()=>{"use strict";var a,e,t,i,G,r,s={661:(a,e,t)=>{t.a(a,(async a=>{var e=t(313),i=t(54);const G=e.en,r={"process-atc":async function(a,t,r){const s={accept:"application/json","accept-language":"en-US,en;q=0.9","content-type":"application/json; charset=UTF-8","sec-ch-ua":'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',"sec-ch-ua-mobile":"?0","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-origin"};void 0!==t&&(s.a2ctransactionreferenceid=t),void 0!==r&&(s.a2ctransactioncode=r);const o=await fetch("https://www.bestbuy.com/cart/api/v1/addToCart",{headers:s,referrer:"https://www.bestbuy.com/cart",referrerPolicy:"strict-origin-when-cross-origin",body:`{"items":[{"skuId":"${a}"}]}`,method:"POST",mode:"cors",credentials:"include"}),d=e.D7[a];if(200===o.status){const a="Best Buy - Successfully Carted",e=d;await(0,i.eJ)(G,"sound-notification",["success",a,e,["bestbuy-notifications","notificationSuccess"]])}if(400===o.status){const a=void 0!==r?"Best Buy - Failed to Cart":"Best Buy - Failed to Cart With Queue",e=d;await(0,i.eJ)(G,"sound-notification",["failure",a,e,["bestbuy-notifications","notificationFailure"]])}else if(200!==o.status){const a="Best Buy - Potential Rate-Limiting",e=`[${d}] Potential rate-limiting on add-to-cart request with status ${o.status}, try reloading the tab!`;await(0,i.eJ)(G,"sound-notification",["rateLimit",a,e,["bestbuy-notifications","notificationRateLimit"]])}return o.status}};await async function(){(0,i.Z0)(G,r,["content","background","extension"]),(0,i.Vf)(G,"Finished processing content script startup routine")}(),await async function(){const a=atob(localStorage.getItem("purchaseTracker")||"e30="),e=JSON.parse(a);(0,i.eJ)("content_best-buy","merge-bestbuy-product_queues",[e])}(),a()}),1)},313:(a,e,t)=>{t.d(e,{en:()=>i,D7:()=>G}),(0,t(261).fZ)([]);const i="content",G=Object.entries({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}}).reduce(((a,[e,t])=>Object.assign(Object.assign({},a),Object.entries(t.items).reduce(((a,[e,t])=>(a[t.data]=t.display,a)),{}))),{})},54:(a,e,t)=>{function i(a,e,t="info"){const i=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${a})\t\t${e}`;"info"===t?console.log(i):"debug"===t?console.debug(i):"warn"===t?console.warn(i):"error"===t&&console.error(i)}async function G(a,e,t=[]){const i={sender:a,handler:e,args:t};return await browser.runtime.sendMessage(i)}function r(a,e,t){browser.runtime.onMessage.addListener((async(G,r)=>{const s=G;let o={status:"success",payload:void 0};if(t.includes(s.sender)){const t=e[s.handler];if(void 0!==t){i(a,`Processing handler ${s.handler} from ${s.sender} with arguments ${JSON.stringify(s.args)}`);try{const a=await t(...s.args||[]);o.status="success",o.payload=a}catch(e){const t=e.message;o.status="error",o.payload=t,i(a,`Error processing handler ${s.handler}: ${t}`,"error")}}}return o}))}t.d(e,{Vf:()=>i,eJ:()=>G,Z0:()=>r}),t(261)}},o={};function d(a){var e=o[a];if(void 0!==e)return e.exports;var t=o[a]={exports:{}};return s[a](t,t.exports,d),t.exports}d.m=s,a="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t=a=>{a&&(a.forEach((a=>a.r--)),a.forEach((a=>a.r--?a.r++:a())))},i=a=>!--a.r&&a(),G=(a,e)=>a?a.push(e):i(e),d.a=(r,s,o)=>{var d,c,T,R=o&&[],n=r.exports,l=!0,p=!1,X=(e,t,i)=>{p||(p=!0,t.r+=e.length,e.map(((e,G)=>e[a](t,i))),p=!1)},A=new Promise(((a,e)=>{T=e,c=()=>(a(n),t(R),R=0)}));A[e]=n,A[a]=(a,e)=>{if(l)return i(a);d&&X(d,a,e),G(R,a),A.catch(e)},r.exports=A,s((r=>{if(!r)return c();var s,o;d=(r=>r.map((r=>{if(null!==r&&"object"==typeof r){if(r[a])return r;if(r.then){var s=[];r.then((a=>{o[e]=a,t(s),s=0}));var o={};return o[a]=(a,e)=>(G(s,a),r.catch(e)),o}}var d={};return d[a]=a=>i(a),d[e]=r,d})))(r);var T=new Promise(((a,t)=>{(s=()=>a(o=d.map((a=>a[e])))).r=0,X(d,s,t)}));return s.r?T:o})).then(c,T),l=!1},r=[],d.O=(a,e,t,i)=>{if(!e){var G=1/0;for(T=0;T<r.length;T++){for(var[e,t,i]=r[T],s=!0,o=0;o<e.length;o++)(!1&i||G>=i)&&Object.keys(d.O).every((a=>d.O[a](e[o])))?e.splice(o--,1):(s=!1,i<G&&(G=i));if(s){r.splice(T--,1);var c=t();void 0!==c&&(a=c)}}return a}i=i||0;for(var T=r.length;T>0&&r[T-1][2]>i;T--)r[T]=r[T-1];r[T]=[e,t,i]},d.d=(a,e)=>{for(var t in e)d.o(e,t)&&!d.o(a,t)&&Object.defineProperty(a,t,{enumerable:!0,get:e[t]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(a){if("object"==typeof window)return window}}(),d.o=(a,e)=>Object.prototype.hasOwnProperty.call(a,e),d.j=9,(()=>{var a={9:0};d.O.j=e=>0===a[e];var e=(e,t)=>{var i,G,[r,s,o]=t,c=0;if(r.some((e=>0!==a[e]))){for(i in s)d.o(s,i)&&(d.m[i]=s[i]);if(o)var T=o(d)}for(e&&e(t);c<r.length;c++)G=r[c],d.o(a,G)&&a[G]&&a[G][0](),a[r[c]]=0;return d.O(T)},t=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})();var c=d.O(void 0,[154],(()=>d(661)));c=d.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,