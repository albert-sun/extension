(()=>{"use strict";var e,t,a,o,r,i,s={270:(e,t,a)=>{a.a(e,(async o=>{a.d(t,{Z:()=>y});var r=a(234),i=a(655),s=a(568),n=a(54),d=a(169),c=a(357);a(434),a(374),e=a.hmd(e);var l=o([c,d,n]);function u(e){const t={c:r.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:r.ZTd,p:r.ZTd,i:r.ZTd,o:r.ZTd,d:r.ZTd};return(0,r.YyZ)("SvelteRegisterBlock",{block:t,id:u.name,type:"component",source:"",ctx:e}),t}[c,d,n]=l.then?await l:l;const G="background";function p(e,t,a){let{$$slots:o={},$$scope:l}=t;(0,r.KXV)("Background",o,[]),(0,s.H3)((function(){return(0,i.mG)(this,void 0,void 0,(function*(){yield(0,c.Oc)(),(0,d.Rl)();const e={"add-sync-request":c.ii,"create-tab-ready":c.uS,"sound-notification":c.Fy,"merge-product_queues":d.gD,"background-add_to_cart":d.IK};(0,n.Z0)(G,e)}))}));const u=[];return Object.keys(t).forEach((e=>{~u.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Background> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:i.mG,onMount:s.H3,messageProcessHandlers:n.Z0,mergeProductQueues:d.gD,processAddToCart:d.IK,setupBestBuyRequestHandlers:d.Rl,addSyncRequest:c.ii,createTabReady:c.uS,mergeSettings:c.Oc,soundNotification:c.Fy,loggingSelf:G}),[]}class T extends r.Mjb{constructor(e){super(e),(0,r.S1n)(this,e,p,u,r.N8,{}),(0,r.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Background",options:e,id:u.name})}}e&&e.hot;const y=T}))},650:(e,t,a)=>{a.a(e,(async e=>{var t=a(270),o=e([t]);new(t=(o.then?await o:o)[0]).Z({target:document.body,props:{}})}))},169:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Rl:()=>l,gD:()=>G,IK:()=>p});var o=a(261),r=a(313),i=a(54),s=a(357),n=e([s,r,i]);[s,r,i]=n.then?await n:n;const d="background_bestbuy",c="https://www.bestbuy.com/";function l(){(0,i.Vf)(d,"Setting-up webRequest interception for addToCart requests");const e={};chrome.webRequest.onBeforeRequest.addListener((function(t){if(void 0!==t.requestBody){const a=decodeURIComponent(String.fromCharCode.apply(null,new Uint8Array(t.requestBody.raw[0].bytes))),o=JSON.parse(a);e[t.requestId]=o;const r=o.items.map((e=>e.skuId)),s=JSON.stringify(r);(0,i.Vf)(d,`[webRequest.onBeforeRequest] Finished caching POST body for request ${t.requestId} with SKU(s) ${s}`,"debug")}}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestBody","blocking"]),chrome.webRequest.onBeforeSendHeaders.addListener((function(t){void 0!==e[t.requestId]||(0,i.Vf)(d,`[webRequest.onBeforeSendHeaders] Couldn't find cached POST body for request ${t.requestId}`,"error")}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestHeaders","blocking"]),chrome.webRequest.onHeadersReceived.addListener((function(t){var a;let n="",c="";for(const e of t.responseHeaders||[])"a2ctransactionreferenceid"===e.name?n=e.value:"a2ctransactioncode"===e.name&&(c=e.value);if((200!==t.statusCode||!0===(0,o.U2)(r.Xd.store).bestbuy.requeueSuccess)&&""!==n&&""!==c){const l=e[t.requestId];if(void 0===l)return void(0,i.Vf)(d,`[webRequest.onHeadersReceived] Couldn't find cached POST body for request ${t.requestId}`,"error");const G=null===(a=l.items[0])||void 0===a?void 0:a.skuId,p=(new Date).getTime(),T=(0,i.ul)(c),[y,f]=(0,i.OJ)(T),R={startTime:p,a2cTransactionReferenceId:n,a2cTransactionCode:c,queueTime:T};(0,i.Vf)(d,`[webRequest.onHeadersReceived] Queue response headers detected for request ${t.requestId} with time ${y}m ${f}s`);let g="";const I=r.D7[G];let S=(0,o.U2)(r.Ag.store)[G]||{};if(!0===(0,o.U2)(r.Xd.store).bestbuy.replaceQueue&&Object.keys(S).length>0){let e,t,a;[S,e,t,a]=u(S,R,p),g=!0===e?`[${I}] Queue replacement enabled, replacing with ${t}m ${a}s improvement`:`[${I}] Queue replacement enabled, not replacing because ${t}m ${a}s worse`,console.debug(e),console.debug(JSON.stringify(S))}else g=`[${I}] Intercepted new queue with timer ${y}m ${f}s`,S[n]=R;r.Ag.set(G,S);const A="Best Buy - Queue Intercepted";(0,s.Fy)("queue",A,g,["bestbuy","notificationQueue"])}delete e[t.requestId]}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["responseHeaders","blocking"])}function u(e,t,a){const o=Object.entries(e).map((([e,t])=>[t.startTime+t.queueTime-a,e,t]));o.sort(((e,t)=>e[0]-t[0]));const r=o[0][0],s=t.a2cTransactionReferenceId,n=t.startTime+t.queueTime-a;o.push([n,s,t]),o.sort(((e,t)=>e[0]-t[0]));const[d,c,l]=(0,i.OJ)(r-n,!0),u=o[0][1]===t.a2cTransactionReferenceId;e={};const G=o[0];return e[G[1]]=G[2],[e,u,d,c]}async function G(e){const t=(new Date).getTime();for(const[a,s]of Object.entries(e)){let e=(0,o.U2)(r.Ag.store)[a]||{};if(void 0===e[s[1]]){const[n,c,l]=s,G=(0,i.ul)(s[1]),p=n+G-t,[T,y,f]=(0,i.OJ)(p);if(p>-3e5){const t={startTime:n,a2cTransactionReferenceId:c,a2cTransactionCode:l,queueTime:G};if(!0===(0,o.U2)(r.Xd.store).bestbuy.replaceQueue&&Object.keys(e).length>0){let o,r,s;[e,o,r,s]=u(e,t,n),!0===o?(0,i.Vf)(d,`Importing queue for SKU ${a} has ${r}m ${s}s improvement, replacing`):(0,i.Vf)(d,`Importing queue for SKU ${a} worse by ${r}m ${s}s improvement, not replacing`)}else!1===f?(0,i.Vf)(d,`Importing queue for SKU ${a} with ${T}m ${y}s remaining`):(0,i.Vf)(d,`Importing queue for SKU ${a} already popped for ${T}m ${y}s`);r.Ag.set(a,e)}}}}async function p(e,t,a){const n={handler:"content-add_to_cart",args:[e,t,a]};let l;for(;;){(0,i.Vf)(d,"Broadcasting soon-queued synchronous add-to-cart request"),console.log("before sync");let e=await(0,s.ii)(n,"bestbuy");if(console.log(e),"error"===e.result)return void(0,i.Vf)(d,`Error performing streamlined add-to-cart request: ${e.payload}`);if("not-found"===e.result){if(!0===(0,o.U2)(r.Xd.store).global.autoOpenTab){(0,i.Vf)(d,`Matching tab not found, creating new tab with url ${c}`),await(0,s.uS)(c),(0,i.Vf)(d,"Tab creation finished, re-broadcasting initial request");continue}{(0,i.Vf)(d,"Matching tab not found, showing notification and exiting");const e=await(0,s.Fy)("error","Best Buy - Tab Not Found","Matching tab not found or content script not responding. Open a matching tab or try reloading the page.",["global","notificationNotFound"]);return void browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,s.uS)(c,!1)}))}}l=e.payload.value;break}const u=r.D7[e];if(200===l){(0,i.Vf)(d,`Successfully added ${u} to cart`);const e=await(0,s.Fy)("success","Best Buy - Successful Cart",u,["bestbuy","notificationSuccess"],["Go to Cart Page"]);browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,s.uS)("https://www.bestbuy.com/cart",!1)}))}else if(400===l)(0,i.Vf)(d,`Failed to cart ${u}, either invaild queue or unavailable`),await(0,s.Fy)("failure","Best Buy - Failed to Cart",u,["bestbuy","notificationFailure"]);else{let e;(0,i.Vf)(d,`Error carting ${u} with status ${status}`),e=!0===(0,o.U2)(r.Xd.store).bestbuy.autoReload?`Error carting ${u} - possible rate limiting, automatically reloading tab and retrying request`:`Error carting ${u} - possible rate limiting, not automatically reloading tab`,await(0,s.Fy)("error",`Best Buy - Error ${status}`,e,["bestbuy","notificationError"])}}}))},357:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Oc:()=>u,ii:()=>G,uS:()=>p,Fy:()=>T});var o=a(261),r=a(313),i=a(54),s=e([r,i]);[r,i]=s.then?await s:s;const n="background_main";let d={success:"../resources/notification_success.mp3",failure:"../resources/notification_queue.mp3",error:"../resources/notification_ratelimit.mp3",queue:"../resources/notification_queue.mp3"},c=[],l=!1;async function u(){(0,i.Vf)(n,"Merging stored settings with extension display values");for(const[e,t]of Object.entries(r.kA)){const a=(0,o.U2)(r.Xd.store)[e];if(void 0!==a){let o=!1;for(const[r,s]of Object.entries(t.settings)){const t=a[r];void 0!==t&&typeof t==typeof s.default||((0,i.Vf)(n,`Non-matching settings [${e}][${r}], merging`),a[r]=s.default,o=!0)}!0===o&&r.Xd.set(e,a)}else{(0,i.Vf)(n,`Stored settings category [${e}] not found, initializing`);const a=Object.entries(t.settings).reduce(((e,[t,a])=>(e[t]=a.default,e)),{});r.Xd.set(e,a)}}}async function G(e,t){return(0,i.Vf)(n,"Pushing request to back of queue for sync execution"),new Promise((a=>{const o=Object.assign(Object.assign({},e),{urlMatch:t,resolve:a});c.push(o),async function(){if(!0!==l){l=!0;try{for(;c.length>0;){const e=c.shift(),t={result:"not-found",payload:{value:void 0,execute:[]}},a=JSON.stringify(e);(0,i.Vf)(n,`Executing queued sequential request with body ${a}`);const o=r.$R[null==e?void 0:e.urlMatch],s=await browser.tabs.query({url:r.$R[null==e?void 0:e.urlMatch],discarded:!1});0===s.length&&((0,i.Vf)(n,`Couldn't find matching browser tabs with URL glob ${o}, resolving with not-found response`),e.resolve(t));let d=!1;for(const a of s){console.log("===========TAB"),(0,i.Vf)(n,`Attempting to ping tab with ID ${a.id} and URL ${a.url}`);const o=await(0,i.No)(a.id,r.Au);if(console.log("PING RESPONSE"),console.log(JSON.stringify(o)),"error"===o.result){console.log("TAB NO GOOD"),(0,i.Vf)(n,`Error pinging content script: ${o.payload.value}`);continue}(0,i.Vf)(n,"Received successful ping response, broadcasting request");const s={handler:e.handler,args:e.args},l=await(0,i.No)(a.id,s);if(console.log("BB RESPONSE"),console.log(l),"error"===l.result)throw new Error(`error performing handler: ${l}`);t.result="ok",t.payload=l.payload,void 0!==l.payload.execute?((0,i.Vf)(n,`Response received, performing execution handlers ${l.payload.execute}`),l.payload.execute.includes("reload")&&((0,i.Vf)(n,`Executing reload for tab with ID ${a.id}`),await browser.tabs.reload(a.id),await(0,i._v)(2500),await(0,i.YG)(a.id,100)),l.payload.execute.includes("retry")&&((0,i.Vf)(n,"Executing retry, re-pushing request to back of queue"),c.push(e),d=!0)):(0,i.Vf)(n,"Response received, no execution handler necessary");break}if(!0===d)continue;const l=JSON.stringify(t);(0,i.Vf)(n,`Finished processing queued request, responding with body ${l}`),e.resolve(t)}}catch(e){throw l=!1,e}l=!1}}()}))}async function p(e,t=!0){const a=await browser.tabs.create({active:!1,url:e});!0===t&&await(0,i.YG)(a.id,100)}async function T(e,t,a,i,s){let n;return!0===(0,o.U2)(r.Xd.store)[i[0]][i[1]]&&(n=await new Promise((e=>{chrome.notifications.create({type:"basic",title:t,message:a,iconUrl:"../resources/icon_512_dark.png",buttons:null==s?void 0:s.map((e=>({title:e})))},(function(t){e(t)}))})),setTimeout((()=>{chrome.notifications.clear(n)}),(0,o.U2)(r.Xd.store).global.durationNotification)),!0===(0,o.U2)(r.Xd.store).global.playNotifications&&new Audio(d[e]).play(),n}}))},313:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Xd:()=>s,Ag:()=>n,$R:()=>d,Au:()=>c,kA:()=>l,D7:()=>u});var o=a(261),r=a(54),i=e([r]);r=(i.then?await i:i)[0],(0,o.fZ)([]);const s=await(0,r.MO)("settings",{}),n=await(0,r.MO)("bestbuy-queues",{}),d={bestbuy:"https://*.bestbuy.com/*"},c={handler:"ping",args:[]},l={global:{display:"Global Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoOpenTab:{display:"Automatically open tab when script not detected",default:!0},playNotifications:{display:"Play notification sounds on events",default:!0},notificationError:{display:"Show desktop notification on extension error",default:!0},durationNotification:{display:"Notification popup duration before clearing",default:5e3,args:{suffix:"ms"}}}},bestbuy:{display:"Best Buy Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoAddQueue:{display:"Automatically execute queue add-to-cart when finished",default:!0},autoReload:{display:"Automatically reload tab on potential rate-limit (403/500)",default:!0},replaceQueue:{display:"Maintain shortest queue per SKU instead of multiple",default:!0},requeueSuccess:{display:"Re-queue with response queue on successful add-to-cart",default:!0},notificationSuccess:{display:"Show desktop notification on successful add-to-cart",default:!0},notificationFailure:{display:"Show desktop notification on failed add-to-cart",default:!0},notificationQueue:{display:"Show desktop notification on new queue interception",default:!0},notificationRateLimit:{display:"Show desktop notification on potential rate-limit (403/500)",default:!0}}}},u=(0,r.ep)({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}});e()}),1)},54:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{_v:()=>s,ep:()=>n,Vf:()=>d,Z0:()=>c,No:()=>u,MO:()=>G,YG:()=>p,OJ:()=>T,ul:()=>y});var o=a(261),r=a(313),i=e([r]);function s(e){return new Promise((t=>setTimeout(t,e)))}function n(e){return Object.entries(e).reduce(((e,[t,a])=>Object.assign(Object.assign({},e),Object.entries(a.items).reduce(((e,[t,a])=>(e[a.data]=a.display,e)),{}))),{})}function d(e,t,a="info"){const o=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===a?console.log(o):"debug"===a?console.debug(o):"warn"===a?console.warn(o):"error"===a&&console.error(o)}function c(e,t){browser.runtime.onMessage.addListener((async(a,o)=>{console.log("<= received"),console.log(a);const r=a;let i={result:"ok",payload:{value:void 0,execute:[]}};const s=t[r.handler];if(void 0!==s){d(e,`Processing handler ${r.handler} with arguments ${JSON.stringify(r.args)}`);try{const e=await s(...r.args||[]);i.result="ok",i.payload=e,console.log("== return"),console.log(i)}catch(t){const a=t.message;i.result="error",i.payload={value:a,execute:[]},d(e,`Error processing handler ${r.handler}: ${a}`,"error")}}return i}))}async function l(e){return console.log("=> sent"),console.log(e),await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:{value:e.message,execute:[]}})))}))}async function u(e,t){return await new Promise((a=>{browser.tabs.sendMessage(e,t).then((e=>a(e))).catch((e=>{console.log({result:"error",payload:{value:e.message,execute:[]}}),a({result:"error",payload:{value:e.message,execute:[]}})}))}))}async function G(e,t){const a=await async function(e,t){const a=await browser.storage.local.get(e);return void 0===a[e]&&(a[e]=t),a[e]}(e,t),r=(0,o.fZ)(a);return browser.runtime.onMessage.addListener((async(t,a)=>{const o=t;if("update-set"===o.handler){const[t,a,i]=o.args;t===e&&r.update((e=>(e[a]=i,e)))}else if("update-delete"===o.handler){const[t,a]=o.args;t===e&&r.update((e=>(delete e[a],e)))}})),{store:r,set:(t,a)=>{r.update((e=>(e[t]=a,e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),l({handler:"update-set",args:[e,t,a]})},del:t=>{r.update((e=>(delete e[t],e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),l({handler:"update-del",args:[e,t]})}}}async function p(e,t,a=!0){for(;!0===a&&"ok"!==(await u(e,r.Au)).result;)await s(t)}function T(e,t=!1){let a=!1;e<0&&(e*=-1,a=!0);const o=e/1e3;let r=Math.floor(o/60),i=o%60;return!0===t&&(r=Math.floor(r),i=Math.floor(i)),[r,i,a]}function y(e){const t=e.split("-"),a=t.map((e=>parseInt(e,16)));return 1e3*parseInt(t[2]+t[3],16)/a[1]}r=(i.then?await i:i)[0]}))}},n={};function d(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={id:e,loaded:!1,exports:{}};return s[e](a,a.exports,d),a.loaded=!0,a.exports}d.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",a=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),r=(e,t)=>e?e.push(t):o(t),d.a=(i,s,n)=>{var d,c,l,u=n&&[],G=i.exports,p=!0,T=!1,y=(t,a,o)=>{T||(T=!0,a.r+=t.length,t.map(((t,r)=>t[e](a,o))),T=!1)},f=new Promise(((e,t)=>{l=t,c=()=>(e(G),a(u),u=0)}));f[t]=G,f[e]=(e,t)=>{if(p)return o(e);d&&y(d,e,t),r(u,e),f.catch(t)},i.exports=f,s((i=>{if(!i)return c();var s,n;d=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];i.then((e=>{n[t]=e,a(s),s=0}));var n={};return n[e]=(e,t)=>(r(s,e),i.catch(t)),n}}var d={};return d[e]=e=>o(e),d[t]=i,d})))(i);var l=new Promise(((e,a)=>{(s=()=>e(n=d.map((e=>e[t])))).r=0,y(d,s,a)}));return s.r?l:n})).then(c,l),p=!1},i=[],d.O=(e,t,a,o)=>{if(!t){var r=1/0;for(l=0;l<i.length;l++){for(var[t,a,o]=i[l],s=!0,n=0;n<t.length;n++)(!1&o||r>=o)&&Object.keys(d.O).every((e=>d.O[e](t[n])))?t.splice(n--,1):(s=!1,o<r&&(r=o));if(s){i.splice(l--,1);var c=a();void 0!==c&&(e=c)}}return e}o=o||0;for(var l=i.length;l>0&&i[l-1][2]>o;l--)i[l]=i[l-1];i[l]=[t,a,o]},d.d=(e,t)=>{for(var a in t)d.o(t,a)&&!d.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d.j=979,(()=>{var e={979:0};d.O.j=t=>0===e[t];var t=(t,a)=>{var o,r,[i,s,n]=a,c=0;if(i.some((t=>0!==e[t]))){for(o in s)d.o(s,o)&&(d.m[o]=s[o]);if(n)var l=n(d)}for(t&&t(a);c<i.length;c++)r=i[c],d.o(e,r)&&e[r]&&e[r][0](),e[i[c]]=0;return d.O(l)},a=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var c=d.O(void 0,[154],(()=>d(650)));c=d.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,