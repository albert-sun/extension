(()=>{"use strict";var e,t,a,o,r,i,s={270:(e,t,a)=>{a.a(e,(async o=>{a.d(t,{Z:()=>y});var r=a(234),i=a(655),s=a(568),n=a(54),d=a(169),c=a(357);a(434),a(374),e=a.hmd(e);var u=o([c,d]);function l(e){const t={c:r.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:r.ZTd,p:r.ZTd,i:r.ZTd,o:r.ZTd,d:r.ZTd};return(0,r.YyZ)("SvelteRegisterBlock",{block:t,id:l.name,type:"component",source:"",ctx:e}),t}[c,d]=u.then?await u:u;const G="background";function p(e,t,a){let{$$slots:o={},$$scope:u}=t;(0,r.KXV)("Background",o,[]),(0,s.H3)((function(){return(0,i.mG)(this,void 0,void 0,(function*(){yield(0,c.Oc)(),(0,d.Rl)();const e={"add-sync-request":c.ii,"create-tab-ready":c.uS,"sound-notification":c.Fy,"merge-product_queues":d.gD,"background-add_to_cart":d.IK};(0,n.Z0)(G,e)}))}));const l=[];return Object.keys(t).forEach((e=>{~l.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Background> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:i.mG,onMount:s.H3,messageProcessHandlers:n.Z0,mergeProductQueues:d.gD,processAddToCart:d.IK,setupBestBuyRequestHandlers:d.Rl,addSyncRequest:c.ii,createTabReady:c.uS,mergeSettings:c.Oc,soundNotification:c.Fy,loggingSelf:G}),[]}class T extends r.Mjb{constructor(e){super(e),(0,r.S1n)(this,e,p,l,r.N8,{}),(0,r.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Background",options:e,id:l.name})}}e&&e.hot;const y=T}))},650:(e,t,a)=>{a.a(e,(async e=>{var t=a(270),o=e([t]);new(t=(o.then?await o:o)[0]).Z({target:document.body,props:{}})}))},169:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Rl:()=>l,gD:()=>p,IK:()=>T});var o=a(261),r=a(313),i=a(309),s=a(54),n=a(357),d=e([n,i]);[n,i]=d.then?await d:d;const c="background_bestbuy",u="https://www.bestbuy.com/";function l(){(0,s.Vf)(c,"Setting-up webRequest interception for addToCart requests");const e={};chrome.webRequest.onBeforeRequest.addListener((function(t){if(void 0!==t.requestBody){const a=decodeURIComponent(String.fromCharCode.apply(null,new Uint8Array(t.requestBody.raw[0].bytes))),o=JSON.parse(a);e[t.requestId]=o;const r=o.items.map((e=>e.skuId)),i=JSON.stringify(r);(0,s.Vf)(c,`[webRequest.onBeforeRequest] Finished caching POST body for request ${t.requestId} with SKU(s) ${i}`,"debug")}}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestBody","blocking"]),chrome.webRequest.onBeforeSendHeaders.addListener((function(t){void 0!==e[t.requestId]||(0,s.Vf)(c,`[webRequest.onBeforeSendHeaders] Couldn't find cached POST body for request ${t.requestId}`,"error")}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestHeaders","blocking"]),chrome.webRequest.onHeadersReceived.addListener((function(t){var a;let d="",u="";for(const e of t.responseHeaders||[])"a2ctransactionreferenceid"===e.name?d=e.value:"a2ctransactioncode"===e.name&&(u=e.value);if((200!==t.statusCode||!0===(0,o.U2)(i.X.store).bestbuy.requeueSuccess)&&""!==d&&""!==u){const l=e[t.requestId];if(void 0===l)return void(0,s.Vf)(c,`[webRequest.onHeadersReceived] Couldn't find cached POST body for request ${t.requestId}`,"error");const p=null===(a=l.items[0])||void 0===a?void 0:a.skuId,T=(new Date).getTime(),y=(0,s.ul)(u),[f,R]=(0,s.OJ)(y),I={startTime:T,a2cTransactionReferenceId:d,a2cTransactionCode:u,queueTime:y};(0,s.Vf)(c,`[webRequest.onHeadersReceived] Queue response headers detected for request ${t.requestId} with time ${f}m ${R}s`);let A="";const S=r.D7[p];let X=(0,o.U2)(i.A.store)[p]||{};if(!0===(0,o.U2)(i.X.store).bestbuy.replaceQueue&&Object.keys(X).length>0){let e,t,a;[X,e,t,a]=G(X,I,T),A=!0===e?`[${S}] Queue replacement enabled, replacing with ${t}m ${a}s improvement`:`[${S}] Queue replacement enabled, not replacing because ${t}m ${a}s worse`}else A=`[${S}] Intercepted new queue with timer ${f}m ${R}s`,X[d]=I;i.A.set(p,X);const b="Best Buy - Queue Intercepted";(0,n.Fy)("queue",b,A,["bestbuy","notificationQueue"])}delete e[t.requestId]}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["responseHeaders","blocking"])}function G(e,t,a){const o=Object.entries(e).map((([e,t])=>[t.startTime+t.queueTime-a,e,t]));o.sort(((e,t)=>e[0]-t[0]));const r=o[0][0],i=t.a2cTransactionReferenceId,n=t.startTime+t.queueTime-a;o.push([n,i,t]),o.sort(((e,t)=>e[0]-t[0]));const[d,c,u]=(0,s.OJ)(r-n,!0),l=o[0][1]===t.a2cTransactionReferenceId;e={};const G=o[0];return e[G[1]]=G[2],[e,l,d,c]}async function p(e){const t=(new Date).getTime();for(const[a,r]of Object.entries(e)){let e=(0,o.U2)(i.A.store)[a]||{};if(void 0===e[r[1]]){const[n,d,u]=r,l=(0,s.ul)(r[1]),p=n+l-t,[T,y,f]=(0,s.OJ)(p);if(p>-3e5){const t={startTime:n,a2cTransactionReferenceId:d,a2cTransactionCode:u,queueTime:l};if(!0===(0,o.U2)(i.X.store).bestbuy.replaceQueue&&Object.keys(e).length>0){let o,r,i;[e,o,r,i]=G(e,t,n),!0===o?(0,s.Vf)(c,`Importing queue for SKU ${a} has ${r}m ${i}s improvement, replacing`):(0,s.Vf)(c,`Importing queue for SKU ${a} worse by ${r}m ${i}s improvement, not replacing`)}else!1===f?(0,s.Vf)(c,`Importing queue for SKU ${a} with ${T}m ${y}s remaining`):(0,s.Vf)(c,`Importing queue for SKU ${a} already popped for ${T}m ${y}s`);i.A.set(a,e)}}}}async function T(e,t,a){const d={handler:"content-add_to_cart",args:[e,t,a]};let l;for(;;){(0,s.Vf)(c,"Broadcasting soon-queued synchronous add-to-cart request");let e=await(0,n.ii)(d,"bestbuy");if("error"===e.result)return void(0,s.Vf)(c,`Error performing streamlined add-to-cart request: ${e.payload}`);if("not-found"===e.result){if(!0===(0,o.U2)(i.X.store).global.autoOpenTab){(0,s.Vf)(c,`Matching tab not found, creating new tab with url ${u}`),await(0,n.uS)(u),(0,s.Vf)(c,"Tab creation finished, re-broadcasting initial request");continue}{(0,s.Vf)(c,"Matching tab not found, showing notification and exiting");const e=await(0,n.Fy)("error","Best Buy - Tab Not Found","Matching tab not found or content script not responding. Open a matching tab or try reloading the page.",["global","notificationNotFound"]);return void browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,n.uS)(u,!1)}))}}l=e.payload.value;break}const G=r.D7[e];if(200===l){(0,s.Vf)(c,`Successfully added ${G} to cart`);const e=await(0,n.Fy)("success","Best Buy - Successful Cart",G,["bestbuy","notificationSuccess"],["Go to Cart Page"]);browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,n.uS)("https://www.bestbuy.com/cart",!1)}))}else if(400===l)(0,s.Vf)(c,`Failed to cart ${G}, either invaild queue or unavailable`),await(0,n.Fy)("failure","Best Buy - Failed to Cart",G,["bestbuy","notificationFailure"]);else{let e;(0,s.Vf)(c,`Error carting ${G} with status ${status}`),e=!0===(0,o.U2)(i.X.store).bestbuy.autoReload?`Error carting ${G} - possible rate limiting, automatically reloading tab and retrying request`:`Error carting ${G} - possible rate limiting, not automatically reloading tab`,await(0,n.Fy)("error",`Best Buy - Error ${status}`,e,["bestbuy","notificationError"])}}}))},357:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Oc:()=>G,ii:()=>p,uS:()=>T,Fy:()=>y});var o=a(261),r=a(313),i=a(309),s=a(54),n=e([i]);i=(n.then?await n:n)[0];const d="background_main";let c={success:"../resources/notification_success.mp3",failure:"../resources/notification_queue.mp3",error:"../resources/notification_ratelimit.mp3",queue:"../resources/notification_queue.mp3"},u=[],l=!1;async function G(){(0,s.Vf)(d,"Merging stored settings with extension display values");for(const[e,t]of Object.entries(r.kA)){const a=(0,o.U2)(i.X.store)[e];if(void 0!==a){let o=!1;for(const[r,i]of Object.entries(t.settings)){const t=a[r];void 0!==t&&typeof t==typeof i.default||((0,s.Vf)(d,`Non-matching settings [${e}][${r}], merging`),a[r]=i.default,o=!0)}!0===o&&i.X.set(e,a)}else{(0,s.Vf)(d,`Stored settings category [${e}] not found, initializing`);const a=Object.entries(t.settings).reduce(((e,[t,a])=>(e[t]=a.default,e)),{});i.X.set(e,a)}}}async function p(e,t){return(0,s.Vf)(d,"Pushing request to back of queue for sync execution"),new Promise((a=>{const o=Object.assign(Object.assign({},e),{urlMatch:t,resolve:a});u.push(o),async function(){if(!0!==l){l=!0;try{for(;u.length>0;){const e=u.shift(),t={result:"not-found",payload:{value:void 0,execute:[]}},a=JSON.stringify(e);(0,s.Vf)(d,`Executing queued sequential request with body ${a}`);const o=r.$R[null==e?void 0:e.urlMatch],i=await browser.tabs.query({url:r.$R[null==e?void 0:e.urlMatch],discarded:!1});0===i.length&&((0,s.Vf)(d,`Couldn't find matching browser tabs with URL glob ${o}, resolving with not-found response`),e.resolve(t));let n=!1;for(const a of i){(0,s.Vf)(d,`Attempting to ping tab with ID ${a.id} and URL ${a.url}`);const o=await(0,s.No)(a.id,r.Au);if("error"===o.result){(0,s.Vf)(d,`Error pinging content script: ${o.payload.value}`);continue}(0,s.Vf)(d,"Received successful ping response, broadcasting request");const i={handler:e.handler,args:e.args},c=await(0,s.No)(a.id,i);if("error"===c.result)throw new Error(`error performing handler: ${c}`);t.result="ok",t.payload=c.payload,void 0!==c.payload.execute?((0,s.Vf)(d,`Response received, performing execution handlers ${c.payload.execute}`),c.payload.execute.includes("reload")&&((0,s.Vf)(d,`Executing reload for tab with ID ${a.id}`),await browser.tabs.reload(a.id),await(0,s._v)(2500),await(0,s.YG)(a.id,100)),c.payload.execute.includes("retry")&&((0,s.Vf)(d,"Executing retry, re-pushing request to back of queue"),u.push(e),n=!0)):(0,s.Vf)(d,"Response received, no execution handler necessary");break}if(!0===n)continue;const c=JSON.stringify(t);(0,s.Vf)(d,`Finished processing queued request, responding with body ${c}`),e.resolve(t)}}catch(e){throw l=!1,e}l=!1}}()}))}async function T(e,t=!0){const a=await browser.tabs.create({active:!1,url:e});!0===t&&await(0,s.YG)(a.id,100)}async function y(e,t,a,r,s){let n;return!0===(0,o.U2)(i.X.store)[r[0]][r[1]]&&(n=await new Promise((e=>{chrome.notifications.create({type:"basic",title:t,message:a,iconUrl:"../resources/icon_512_dark.png",buttons:null==s?void 0:s.map((e=>({title:e})))},(function(t){e(t)}))})),setTimeout((()=>{chrome.notifications.clear(n)}),(0,o.U2)(i.X.store).global.durationNotification)),!0===(0,o.U2)(i.X.store).global.playNotifications&&new Audio(c[e]).play(),n}}))},313:(e,t,a)=>{a.d(t,{$R:()=>i,Au:()=>s,kA:()=>n,D7:()=>d});var o=a(261),r=a(54);(0,o.fZ)([]);const i={bestbuy:"https://*.bestbuy.com/*"},s={handler:"ping",args:[]},n={global:{display:"Global Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoOpenTab:{display:"Automatically open tab when script not detected",default:!0},playNotifications:{display:"Play notification sounds on events",default:!0},notificationError:{display:"Show desktop notification on extension error",default:!0},durationNotification:{display:"Notification popup duration before clearing",default:5e3,args:{suffix:"ms"}}}},bestbuy:{display:"Best Buy Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoAddQueue:{display:"Automatically execute queue add-to-cart when finished",default:!0},autoReload:{display:"Automatically reload tab on potential rate-limit (403/500)",default:!0},replaceQueue:{display:"Maintain shortest queue per SKU instead of multiple",default:!0},requeueSuccess:{display:"Re-queue with response queue on successful add-to-cart",default:!0},notificationSuccess:{display:"Show desktop notification on successful add-to-cart",default:!0},notificationFailure:{display:"Show desktop notification on failed add-to-cart",default:!0},notificationQueue:{display:"Show desktop notification on new queue interception",default:!0},notificationRateLimit:{display:"Show desktop notification on potential rate-limit (403/500)",default:!0}}}},d=(0,r.ep)({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}})},309:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{X:()=>r,A:()=>i});var o=a(54);const r=await(0,o.MO)("settings",{}),i=await(0,o.MO)("bestbuy-queues",{});e()}),1)},54:(e,t,a)=>{a.d(t,{_v:()=>i,ep:()=>s,Vf:()=>n,Z0:()=>d,No:()=>u,MO:()=>l,YG:()=>G,OJ:()=>p,ul:()=>T});var o=a(261),r=a(313);function i(e){return new Promise((t=>setTimeout(t,e)))}function s(e){return Object.entries(e).reduce(((e,[t,a])=>Object.assign(Object.assign({},e),Object.entries(a.items).reduce(((e,[t,a])=>(e[a.data]=a.display,e)),{}))),{})}function n(e,t,a="info"){const o=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===a?console.log(o):"debug"===a?console.debug(o):"warn"===a?console.warn(o):"error"===a&&console.error(o)}function d(e,t){browser.runtime.onMessage.addListener((async(a,o)=>{const r=a;let i={result:"ok",payload:{value:void 0,execute:[]}};const s=t[r.handler];if(void 0!==s){n(e,`Processing handler ${r.handler} with arguments ${JSON.stringify(r.args)}`);try{const e=await s(...r.args||[]);i.result="ok",i.payload=e}catch(t){const a=t.message;i.result="error",i.payload={value:a,execute:[]},n(e,`Error processing handler ${r.handler}: ${a}`,"error")}}return i}))}async function c(e){return await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:{value:e.message,execute:[]}})))}))}async function u(e,t){return await new Promise((a=>{browser.tabs.sendMessage(e,t).then((e=>a(e))).catch((e=>a({result:"error",payload:{value:e.message,execute:[]}})))}))}async function l(e,t){const a=await async function(e,t){const a=await browser.storage.local.get(e);return void 0===a[e]&&(a[e]=t),a[e]}(e,t),r=(0,o.fZ)(a);return browser.runtime.onMessage.addListener((async(t,a)=>{const o=t;if("update-set"===o.handler){const[t,a,i]=o.args;t===e&&r.update((e=>(e[a]=i,e)))}else if("update-delete"===o.handler){const[t,a]=o.args;t===e&&r.update((e=>(delete e[a],e)))}})),{store:r,set:(t,a)=>{r.update((e=>(e[t]=a,e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),c({handler:"update-set",args:[e,t,a]})},del:t=>{r.update((e=>(delete e[t],e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),c({handler:"update-del",args:[e,t]})}}}async function G(e,t,a=!0){for(;!0===a&&"ok"!==(await u(e,r.Au)).result;)await i(t)}function p(e,t=!1){let a=!1;e<0&&(e*=-1,a=!0);const o=e/1e3;let r=Math.floor(o/60),i=o%60;return!0===t&&(r=Math.floor(r),i=Math.floor(i)),[r,i,a]}function T(e){const t=e.split("-"),a=t.map((e=>parseInt(e,16)));return 1e3*parseInt(t[2]+t[3],16)/a[1]}}},n={};function d(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={id:e,loaded:!1,exports:{}};return s[e](a,a.exports,d),a.loaded=!0,a.exports}d.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",a=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),r=(e,t)=>e?e.push(t):o(t),d.a=(i,s,n)=>{var d,c,u,l=n&&[],G=i.exports,p=!0,T=!1,y=(t,a,o)=>{T||(T=!0,a.r+=t.length,t.map(((t,r)=>t[e](a,o))),T=!1)},f=new Promise(((e,t)=>{u=t,c=()=>(e(G),a(l),l=0)}));f[t]=G,f[e]=(e,t)=>{if(p)return o(e);d&&y(d,e,t),r(l,e),f.catch(t)},i.exports=f,s((i=>{if(!i)return c();var s,n;d=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];i.then((e=>{n[t]=e,a(s),s=0}));var n={};return n[e]=(e,t)=>(r(s,e),i.catch(t)),n}}var d={};return d[e]=e=>o(e),d[t]=i,d})))(i);var u=new Promise(((e,a)=>{(s=()=>e(n=d.map((e=>e[t])))).r=0,y(d,s,a)}));return s.r?u:n})).then(c,u),p=!1},i=[],d.O=(e,t,a,o)=>{if(!t){var r=1/0;for(u=0;u<i.length;u++){for(var[t,a,o]=i[u],s=!0,n=0;n<t.length;n++)(!1&o||r>=o)&&Object.keys(d.O).every((e=>d.O[e](t[n])))?t.splice(n--,1):(s=!1,o<r&&(r=o));if(s){i.splice(u--,1);var c=a();void 0!==c&&(e=c)}}return e}o=o||0;for(var u=i.length;u>0&&i[u-1][2]>o;u--)i[u]=i[u-1];i[u]=[t,a,o]},d.d=(e,t)=>{for(var a in t)d.o(t,a)&&!d.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d.j=979,(()=>{var e={979:0};d.O.j=t=>0===e[t];var t=(t,a)=>{var o,r,[i,s,n]=a,c=0;if(i.some((t=>0!==e[t]))){for(o in s)d.o(s,o)&&(d.m[o]=s[o]);if(n)var u=n(d)}for(t&&t(a);c<i.length;c++)r=i[c],d.o(e,r)&&e[r]&&e[r][0](),e[i[c]]=0;return d.O(u)},a=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var c=d.O(void 0,[154],(()=>d(650)));c=d.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljL3Jlc291cmNlcy9iYWNrZ3JvdW5kLmpzIiwibWFwcGluZ3MiOiJ1QkFBSUEsRUFDQUMsRUFDQUMsRUFNQUMsRUFDQUMsRUNUQUMsRSxnOUNDQ1EsSSx5QkFBSSxFQUFXLENBQ3ZCQyxPQUFRQyxTQUFTQyxLQUNqQkMsTUFBTyxTLHFKQ0dYLE1BQU1DLEVBQWMscUJBRWRDLEVBQWdCLDJCQUVmLFNBQVNDLEtBQ1osUUFBYUYsRUFBYSw2REFFMUIsTUFBTUcsRUFBbUIsR0FDekJDLE9BQU9DLFdBQVdDLGdCQUFnQkMsYUFBWSxTQUFVQyxHQUVwRCxRQUE0QkMsSUFBeEJELEVBQVFFLFlBQTJCLENBRW5DLE1BQU1DLEVBQWNDLG1CQUFtQkMsT0FBT0MsYUFBYUMsTUFBTSxLQUNqRSxJQUFJQyxXQUFXUixFQUFRRSxZQUFZTyxJQUFJLEdBQUdDLFNBQ3BDQyxFQUFhQyxLQUFLQyxNQUFNVixHQUM5QlIsRUFBaUJLLEVBQVFjLFdBQWFILEVBRXRDLE1BQU1JLEVBQU9KLEVBQVdLLE1BQU1DLEtBQUlDLEdBQVFBLEVBQUtDLFFBQ3pDQyxFQUFpQlIsS0FBS1MsVUFBVU4sSUFDdEMsUUFBYXZCLEVBQWEsdUVBQXVFUSxFQUFRYyx5QkFBeUJNLElBQWtCLFlBRXpKLENBQUVFLEtBQU0sQ0FBQyw0Q0FBOEMsQ0FBQyxjQUFlLGFBQzFFMUIsT0FBT0MsV0FBVzBCLG9CQUFvQnhCLGFBQVksU0FBVUMsUUFHckNDLElBREFOLEVBQWlCSyxFQUFRYyxhQUd4QyxRQUFhdEIsRUFBYSwrRUFBK0VRLEVBQVFjLFlBQWEsV0FHbkksQ0FBRVEsS0FBTSxDQUFDLDRDQUE4QyxDQUFDLGlCQUFrQixhQUM3RTFCLE9BQU9DLFdBQVcyQixrQkFBa0J6QixhQUFZLFNBQVVDLEdBQ3RELElBQUl5QixFQUVKLElBQUlDLEVBQTRCLEdBQzVCQyxFQUFxQixHQUN6QixJQUFLLE1BQU1DLEtBQVc1QixFQUFRNkIsaUJBQW1CLEdBQ3pCLDhCQUFoQkQsRUFBT0UsS0FDUEosRUFBNEJFLEVBQU9HLE1BRWQsdUJBQWhCSCxFQUFPRSxPQUNaSCxFQUFxQkMsRUFBT0csT0FJcEMsSUFBNEIsTUFBdkIvQixFQUFRZ0MsYUFBMkUsS0FBckQsUUFBSSxXQUF5QixRQUFrQixpQkFDN0MsS0FBOUJOLEdBQTJELEtBQXZCQyxFQUEyQixDQUVsRSxNQUFNTSxFQUFhdEMsRUFBaUJLLEVBQVFjLFdBQzVDLFFBQW1CYixJQUFmZ0MsRUFHQSxZQURBLFFBQWF6QyxFQUFhLDZFQUE2RVEsRUFBUWMsWUFBYSxTQUdoSSxNQUFNb0IsRUFBcUMsUUFBOUJULEVBQUtRLEVBQVdqQixNQUFNLFVBQXVCLElBQVBTLE9BQWdCLEVBQVNBLEVBQUdOLE1BRXpFZ0IsR0FBWSxJQUFJQyxNQUFPQyxVQUN2QkMsR0FBWSxRQUFtQlgsSUFDOUJZLEVBQVNDLElBQVcsUUFBZUYsR0FDcENHLEVBQVksQ0FBRU4sVUFBQUEsRUFBV1QsMEJBQUFBLEVBQTJCQyxtQkFBQUEsRUFBb0JXLFVBQUFBLElBQzlFLFFBQWE5QyxFQUFhLDhFQUE4RVEsRUFBUWMsdUJBQXVCeUIsTUFBWUMsTUFFbkosSUFBSUUsRUFBVSxHQUNkLE1BQU1DLEVBQWMsS0FBZ0JULEdBQ3BDLElBQUlVLEdBQWlCLFFBQUksV0FBcUJWLElBQVEsR0FFdEQsSUFBdUQsS0FBbkQsUUFBSSxXQUF5QixRQUFnQixjQUFjVyxPQUFPQyxLQUFLRixHQUFnQkcsT0FBUyxFQUFHLENBSW5HLElBQUlDLEVBQ0FDLEVBQ0FDLEdBQ0ZOLEVBQWdCSSxFQUFTQyxFQUFhQyxHQUFlQyxFQUFvQlAsRUFBZ0JILEVBQVdOLEdBR2xHTyxHQUZZLElBQVpNLEVBRVUsSUFBSUwsZ0RBQTBETSxNQUFnQkMsaUJBSTlFLElBQUlQLHVEQUFpRU0sTUFBZ0JDLGdCQUluR1IsRUFBVSxJQUFJQyx1Q0FBaURKLE1BQVlDLEtBRTNFSSxFQUFlbEIsR0FBNkJlLEVBRWhELFFBQWtCUCxFQUFLVSxHQUd2QixNQUFNUSxFQUFRLGdDQUNkLFFBQWtCLFFBQVNBLEVBQU9WLEVBQVMsQ0FBQyxVQUFXLDZCQUdwRC9DLEVBQWlCSyxFQUFRYyxhQUNqQyxDQUFFUSxLQUFNLENBQUMsNENBQThDLENBQUMsa0JBQW1CLGFBR2xGLFNBQVM2QixFQUFvQlAsRUFBZ0JTLEVBQWNDLEdBRXZELE1BQU1DLEVBQXVCVixPQUFPVyxRQUFRWixHQUN2QzNCLEtBQUksRUFBRXdDLEVBQVVoQixLQUVWLENBRGVBLEVBQVVOLFVBQVlNLEVBQVVILFVBQVlnQixFQUMzQ0csRUFBVWhCLEtBR3JDYyxFQUFxQkcsTUFBSyxDQUFDQyxFQUFRQyxJQUFvQkQsRUFBTyxHQUFLQyxFQUFPLEtBQzFFLE1BQU1DLEVBQXdCTixFQUFxQixHQUFHLEdBRWhETyxFQUFjVCxFQUFhM0IsMEJBQzNCcUMsRUFBZVYsRUFBYWxCLFVBQVlrQixFQUFhZixVQUFZZ0IsRUFDdkVDLEVBQXFCUyxLQUFLLENBQUNELEVBQWNELEVBQWFULElBRXRERSxFQUFxQkcsTUFBSyxDQUFDQyxFQUFRQyxJQUFvQkQsRUFBTyxHQUFLQyxFQUFPLEtBQzFFLE1BQU9YLEVBQWFDLEVBQWFlLElBQWdCLFFBQWVKLEVBQXdCRSxHQUFjLEdBQ2hHZixFQUFVTyxFQUFxQixHQUFHLEtBQU9GLEVBQWEzQiwwQkFFNURrQixFQUFpQixHQUNqQixNQUFNc0IsRUFBZ0JYLEVBQXFCLEdBRTNDLE9BREFYLEVBQWVzQixFQUFjLElBQU1BLEVBQWMsR0FDMUMsQ0FBQ3RCLEVBQWdCSSxFQUFTQyxFQUFhQyxHQUkzQ2lCLGVBQWVDLEVBQW1CQyxHQUVyQyxNQUFNZixHQUFjLElBQUlsQixNQUFPQyxVQUMvQixJQUFLLE1BQU9ILEVBQUtvQyxLQUFpQnpCLE9BQU9XLFFBQVFhLEdBQWlCLENBRTlELElBQUl6QixHQUFpQixRQUFJLFdBQXFCVixJQUFRLEdBQ3RELFFBQXdDakMsSUFBcEMyQyxFQUFlMEIsRUFBYSxJQUFtQixDQUUvQyxNQUFPbkMsRUFBV1QsRUFBMkJDLEdBQXNCMkMsRUFDN0RoQyxHQUFZLFFBQW1CZ0MsRUFBYSxJQUM1Q0MsRUFBZ0JwQyxFQUFZRyxFQUFZZ0IsR0FDdkNrQixFQUFrQkMsRUFBa0JDLElBQVksUUFBZUgsR0FFdEUsR0FBSUEsR0FBZ0IsSUFBZ0IsQ0FHaEMsTUFBTTlCLEVBQVksQ0FBRU4sVUFBQUEsRUFBV1QsMEJBQUFBLEVBQTJCQyxtQkFBQUEsRUFBb0JXLFVBQUFBLEdBRTlFLElBQXVELEtBQW5ELFFBQUksV0FBeUIsUUFBZ0IsY0FBY08sT0FBT0MsS0FBS0YsR0FBZ0JHLE9BQVMsRUFBRyxDQUVuRyxJQUFJQyxFQUNBQyxFQUNBQyxHQUNGTixFQUFnQkksRUFBU0MsRUFBYUMsR0FBZUMsRUFBb0JQLEVBQWdCSCxFQUFXTixJQUN0RixJQUFaYSxHQUVBLFFBQWF4RCxFQUFhLDJCQUEyQjBDLFNBQVdlLE1BQWdCQyw4QkFJaEYsUUFBYTFELEVBQWEsMkJBQTJCMEMsY0FBZ0JlLE1BQWdCQyxzQ0FLeEUsSUFBYndCLEdBRUEsUUFBYWxGLEVBQWEsMkJBQTJCMEMsVUFBWXNDLE1BQXFCQyxpQkFJdEYsUUFBYWpGLEVBQWEsMkJBQTJCMEMsd0JBQTBCc0MsTUFBcUJDLE1BRzVHLFFBQWtCdkMsRUFBS1UsTUFPaEN1QixlQUFlUSxFQUFpQnpDLEVBQUtSLEVBQTJCQyxHQUVuRSxNQUFNaUQsRUFBYyxDQUNoQkMsUUFBUyxzQkFDVEMsS0FBTSxDQUFDNUMsRUFBS1IsRUFBMkJDLElBRzNDLElBQUlvRCxFQUNKLE9BQUcsRUFDQyxRQUFhdkYsRUFBYSw0REFDMUIsSUFBSXdGLFFBQTJCLFFBQWVKLEVBQWEsV0FDM0QsR0FBa0MsVUFBOUJJLEVBQW1CQyxPQUduQixZQURBLFFBQWF6RixFQUFhLHFEQUFxRHdGLEVBQW1CRSxXQUdqRyxHQUFrQyxjQUE5QkYsRUFBbUJDLE9BQXdCLENBRWhELElBQXFELEtBQWpELFFBQUksV0FBd0IsT0FBZSxZQUFZLEVBQ3ZELFFBQWF6RixFQUFhLHFEQUFxREMsV0FFekUsUUFBZUEsSUFDckIsUUFBYUQsRUFBYSwwREFDMUIsU0FFQyxFQUNELFFBQWFBLEVBQWEsNERBRTFCLE1BQU0yRixRQUF1QixRQUFrQixRQUFTLDJCQUE0QiwwR0FBMkcsQ0FBQyxTQUFVLHlCQVUxTSxZQVBBQyxRQUFRQyxjQUFjQyxnQkFBZ0J2RixhQUFZb0UsZUFBZ0JvQixFQUFXQyxHQUVyRUQsSUFBY0osR0FBa0MsSUFBaEJLLFNBRTFCLFFBQWUvRixHQUFlLE9BT3BEc0YsRUFBbUJDLEVBQW1CRSxRQUFRbkQsTUFDOUMsTUFLSixNQUFNWSxFQUFjLEtBQWdCVCxHQUVwQyxHQUF5QixNQUFyQjZDLEVBQTBCLEVBRTFCLFFBQWF2RixFQUFhLHNCQUFzQm1ELGFBRWhELE1BQU13QyxRQUF1QixRQUFrQixVQUFXLDZCQUE4QnhDLEVBQWEsQ0FBQyxVQUFXLHVCQUF3QixDQUFDLG9CQUcxSXlDLFFBQVFDLGNBQWNDLGdCQUFnQnZGLGFBQVlvRSxlQUFnQm9CLEVBQVdDLEdBRXJFRCxJQUFjSixHQUFrQyxJQUFoQkssU0FFMUIsUUE1T0MsZ0NBNE84QixXQUk1QyxHQUF5QixNQUFyQlQsR0FFTCxRQUFhdkYsRUFBYSxrQkFBa0JtRCxnREFFdEMsUUFBa0IsVUFBVyw0QkFBNkJBLEVBQWEsQ0FBQyxVQUFXLDRCQUV4RixDQUtELElBQUlELEdBRkosUUFBYWxELEVBQWEsaUJBQWlCbUQsaUJBQTJCOEMsVUFJbEUvQyxHQURpRCxLQUFqRCxRQUFJLFdBQXlCLFFBQWMsV0FDakMsaUJBQWlCQywrRUFHakIsaUJBQWlCQSxvRUFHekIsUUFBa0IsUUFBUyxvQkFBb0I4QyxTQUFVL0MsRUFBUyxDQUFDLFVBQVcsNEIsb0pDclE1RixNQUFNbEQsRUFBYyxrQkFDcEIsSUFBSTZGLEVBQWdCLENBQ2hCLFFBQVcsd0NBQ1gsUUFBVyxzQ0FDWCxNQUFTLDBDQUVULE1BQVMsdUNBRVRLLEVBQWlCLEdBQ2pCQyxHQUFZLEVBRVR4QixlQUFleUIsS0FDbEIsUUFBYXBHLEVBQWEseURBRzFCLElBQUssTUFBT3FHLEVBQWFDLEtBQWlCakQsT0FBT1csUUFBUSxNQUFtQixDQUV4RSxNQUFNdUMsR0FBeUIsUUFBSSxXQUFnQkYsR0FDbkQsUUFBK0I1RixJQUEzQjhGLEVBQXNDLENBRXRDLElBQUlDLEdBQW1CLEVBQ3ZCLElBQUssTUFBT0MsRUFBWUMsS0FBZ0JyRCxPQUFPVyxRQUFRc0MsRUFBYUssVUFBVyxDQUUzRSxNQUFNQyxFQUFxQkwsRUFBdUJFLFFBQ3ZCaEcsSUFBdkJtRyxVQUEyQ0EsVUFBOEJGLEVBQVlHLFdBQ3JGLFFBQWE3RyxFQUFhLDBCQUEwQnFHLE1BQWdCSSxlQUNwRUYsRUFBdUJFLEdBQWNDLEVBQVlHLFFBQ2pETCxHQUFtQixJQUlGLElBQXJCQSxHQUNBLElBQUFNLElBQWFULEVBQWFFLE9BRzdCLEVBQ0QsUUFBYXZHLEVBQWEsNkJBQTZCcUcsOEJBRXZELE1BQU1VLEVBQTBCMUQsT0FBT1csUUFBUXNDLEVBQWFLLFVBQVVLLFFBQU8sQ0FBQ0MsR0FBTVIsRUFBWUMsTUFDNUZPLEVBQUlSLEdBQWNDLEVBQVlHLFFBQ3ZCSSxJQUNSLElBQ0gsSUFBQUgsSUFBYVQsRUFBYVUsS0FzRy9CcEMsZUFBZXVDLEVBQWVDLEVBQVNDLEdBRzFDLE9BRkEsUUFBYXBILEVBQWEsdURBRW5CLElBQUlxSCxTQUFTQyxJQUVoQixNQUFNQyxFQUFnQmxFLE9BQU9tRSxPQUFPbkUsT0FBT21FLE9BQU8sR0FBSUwsR0FBVSxDQUFFQyxTQUFBQSxFQUFVRSxRQUFBQSxJQUM1RXBCLEVBQWUxQixLQUFLK0MsR0F2RzVCNUMsaUJBRUksSUFBa0IsSUFBZHdCLEVBQUosQ0FHQUEsR0FBWSxFQUVaLElBRUksS0FBT0QsRUFBZTNDLE9BQVMsR0FBRyxDQUU5QixNQUFNZ0UsRUFBZ0JyQixFQUFldUIsUUFDL0JDLEVBQWlCLENBQ25CakMsT0FBUSxZQUNSQyxRQUFTLENBQ0xuRCxXQUFPOUIsRUFDUGtILFFBQVMsS0FHWEMsRUFBb0J4RyxLQUFLUyxVQUFVMEYsSUFDekMsUUFBYXZILEVBQWEsaURBQWlENEgsS0FFM0UsTUFBTUMsRUFBVSxLQUFjTixNQUFBQSxPQUFxRCxFQUFTQSxFQUFjSCxVQUNwR1UsUUFBcUJsQyxRQUFRbUMsS0FBS0MsTUFBTSxDQUMxQ0MsSUFBSyxLQUFjVixNQUFBQSxPQUFxRCxFQUFTQSxFQUFjSCxVQUMvRmMsV0FBVyxJQUdhLElBQXhCSixFQUFhdkUsVUFDYixRQUFhdkQsRUFBYSxxREFBcUQ2SCx3Q0FHL0VOLEVBQWNELFFBQVFJLElBRzFCLElBQUlTLEdBQWUsRUFDbkIsSUFBSyxNQUFNQyxLQUFPTixFQUFjLEVBQzVCLFFBQWE5SCxFQUFhLGtDQUFrQ29JLEVBQUlDLGNBQWNELEVBQUlILE9BRWxGLE1BQU1LLFFBQXFCLFFBQW1CRixFQUFJQyxHQUFJLE1BQ3RELEdBQTRCLFVBQXhCQyxFQUFhN0MsT0FBb0IsRUFDakMsUUFBYXpGLEVBQWEsaUNBQWlDc0ksRUFBYTVDLFFBQVFuRCxTQUNoRixVQUVKLFFBQWF2QyxFQUFhLDJEQUUxQixNQUFNbUgsRUFBVSxDQUNaOUIsUUFBU2tDLEVBQWNsQyxRQUN2QkMsS0FBTWlDLEVBQWNqQyxNQUVsQmlELFFBQWlCLFFBQW1CSCxFQUFJQyxHQUFJbEIsR0FDbEQsR0FBd0IsVUFBcEJvQixFQUFTOUMsT0FFVCxNQUFNLElBQUkrQyxNQUFNLDZCQUE2QkQsS0FFakRiLEVBQWVqQyxPQUFTLEtBQ3hCaUMsRUFBZWhDLFFBQVU2QyxFQUFTN0MsYUFFRGpGLElBQTdCOEgsRUFBUzdDLFFBQVFpQyxVQUNqQixRQUFhM0gsRUFBYSxvREFBb0R1SSxFQUFTN0MsUUFBUWlDLFdBQzNGWSxFQUFTN0MsUUFBUWlDLFFBQVFjLFNBQVMsYUFDbEMsUUFBYXpJLEVBQWEsb0NBQW9Db0ksRUFBSUMsWUFFNUR6QyxRQUFRbUMsS0FBS1csT0FBT04sRUFBSUMsVUFDeEIsUUFBTSxZQUNOLFFBQWFELEVBQUlDLEdBQUksTUFFM0JFLEVBQVM3QyxRQUFRaUMsUUFBUWMsU0FBUyxZQUNsQyxRQUFhekksRUFBYSx3REFFMUJrRyxFQUFlMUIsS0FBSytDLEdBQ3BCWSxHQUFlLEtBSW5CLFFBQWFuSSxFQUFhLHFEQUU5QixNQUdKLElBQXFCLElBQWpCbUksRUFDQSxTQUVKLE1BQU1RLEVBQXFCdkgsS0FBS1MsVUFBVTZGLElBQzFDLFFBQWExSCxFQUFhLDREQUE0RDJJLEtBRXRGcEIsRUFBY0QsUUFBUUksSUFHOUIsTUFBT2tCLEdBR0gsTUFEQXpDLEdBQVksRUFDTnlDLEVBRVZ6QyxHQUFZLEdBVVIwQyxNQUlEbEUsZUFBZW1FLEVBQWViLEVBQUtjLEdBQU8sR0FFN0MsTUFBTVgsUUFBWXhDLFFBQVFtQyxLQUFLaUIsT0FBTyxDQUNsQ0MsUUFBUSxFQUNSaEIsSUFBQUEsS0FHUyxJQUFUYyxTQUNNLFFBQWFYLEVBQUlDLEdBQUksS0FJNUIxRCxlQUFldUUsRUFBa0JDLEVBQVV2RixFQUFPVixFQUFTa0csRUFBYUMsR0FFM0UsSUFBSTFELEVBMEJKLE9BekI0RCxLQUF4RCxRQUFJLFdBQWdCeUQsRUFBWSxJQUFJQSxFQUFZLE1BRWhEekQsUUFBdUIsSUFBSTBCLFNBQVNDLElBRWhDbEgsT0FBT3lGLGNBQWNtRCxPQUFPLENBQ3hCTSxLQUFNLFFBQ04xRixNQUFPQSxFQUNQVixRQUFTQSxFQUNUcUcsUUFBUyxpQ0FDVEYsUUFBU0EsTUFBQUEsT0FBeUMsRUFBU0EsRUFBUTVILEtBQUltQyxJQUFTLENBQUdBLE1BQU9BLFFBQzNGLFNBQVV5RSxHQUNUZixFQUFRZSxTQUloQm1CLFlBQVcsS0FDUHBKLE9BQU95RixjQUFjNEQsTUFBTTlELE1BQzVCLFFBQUksV0FBd0IsT0FBd0Isd0JBSUEsS0FBdkQsUUFBSSxXQUF3QixPQUFxQixtQkFDdkIsSUFBSStELE1BQU03RCxFQUFjc0QsSUFDaENRLE9BRWZoRSxPLGlGQ3JNWSxRQUFTLElBQXpCLE1BS01pRSxFQUFnQixDQUN6QixRQUFXLDJCQUVGQyxFQUFjLENBQ3ZCeEUsUUFBUyxPQUNUQyxLQUFNLElBOERHd0UsRUFBbUIsQ0FDNUIsT0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxZQUFhLDhKQUNickQsU0FBVSxDQUNOLFlBQWUsQ0FDWG9ELFFBQVMsa0RBQ1RsRCxTQUFTLEdBRWIsa0JBQXFCLENBQ2pCa0QsUUFBUyxxQ0FDVGxELFNBQVMsR0FFYixrQkFBcUIsQ0FDakJrRCxRQUFTLCtDQUNUbEQsU0FBUyxHQUViLHFCQUF3QixDQUNwQmtELFFBQVMsOENBQ1RsRCxRQUFTLElBQ1R2QixLQUFNLENBQ0YsT0FBVSxTQUsxQixRQUFXLENBQ1B5RSxRQUFTLG9CQUNUQyxZQUFhLDhKQUNickQsU0FBVSxDQUNOLGFBQWdCLENBQ1pvRCxRQUFTLHdEQUNUbEQsU0FBUyxHQUViLFdBQWMsQ0FDVmtELFFBQVMsNkRBQ1RsRCxTQUFTLEdBRWIsYUFBZ0IsQ0FDWmtELFFBQVMsc0RBQ1RsRCxTQUFTLEdBRWIsZUFBa0IsQ0FDZGtELFFBQVMseURBQ1RsRCxTQUFTLEdBRWIsb0JBQXVCLENBQ25Ca0QsUUFBUyxzREFDVGxELFNBQVMsR0FFYixvQkFBdUIsQ0FDbkJrRCxRQUFTLGtEQUNUbEQsU0FBUyxHQUViLGtCQUFxQixDQUNqQmtELFFBQVMsc0RBQ1RsRCxTQUFTLEdBRWIsc0JBQXlCLENBQ3JCa0QsUUFBUyw4REFDVGxELFNBQVMsTUE0SlpvRCxHQUFrQixRQXRKQSxDQUMzQixTQUFVLENBQ05GLFFBQVMsbUNBQ1R2SSxNQUFPLENBQ0gsQ0FBRXVJLFFBQVMsNENBQTZDLEtBQVEsV0FDaEUsQ0FBRUEsUUFBUyw4Q0FBK0MsS0FBUSxXQUNsRSxDQUFFQSxRQUFTLDBDQUEyQyxLQUFRLFdBQzlELENBQUVBLFFBQVMsc0NBQXVDLEtBQVEsV0FDMUQsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLGtDQUFtQyxLQUFRLFdBQ3RELENBQUVBLFFBQVMsNENBQTZDLEtBQVEsV0FDaEUsQ0FBRUEsUUFBUyw0Q0FBNkMsS0FBUSxhQUd4RSxXQUFZLENBQ1JBLFFBQVMsOEJBQ1R2SSxNQUFPLENBQ0gsQ0FBRXVJLFFBQVMsOEJBQStCLEtBQVEsV0FDbEQsQ0FBRUEsUUFBUyxvQ0FBcUMsS0FBUSxXQUN4RCxDQUFFQSxRQUFTLG1DQUFvQyxLQUFRLFdBQ3ZELENBQUVBLFFBQVMseUNBQTBDLEtBQVEsV0FDN0QsQ0FBRUEsUUFBUyx1Q0FBd0MsS0FBUSxXQUMzRCxDQUFFQSxRQUFTLHVDQUF3QyxLQUFRLFdBQzNELENBQUVBLFFBQVMsd0NBQXlDLEtBQVEsV0FDNUQsQ0FBRUEsUUFBUyxxQ0FBc0MsS0FBUSxXQUN6RCxDQUFFQSxRQUFTLDJDQUE0QyxLQUFRLFdBQy9ELENBQUVBLFFBQVMsc0NBQXVDLEtBQVEsV0FDMUQsQ0FBRUEsUUFBUyw0Q0FBNkMsS0FBUSxXQUNoRSxDQUFFQSxRQUFTLHNDQUF1QyxLQUFRLFdBQzFELENBQUVBLFFBQVMsbUNBQW9DLEtBQVEsV0FDdkQsQ0FBRUEsUUFBUyxvQ0FBcUMsS0FBUSxXQUN4RCxDQUFFQSxRQUFTLG9DQUFxQyxLQUFRLFdBQ3hELENBQUVBLFFBQVMsZ0RBQWlELEtBQVEsYUFHNUUsYUFBYyxDQUNWQSxRQUFTLGdDQUNUdkksTUFBTyxDQUNILENBQUV1SSxRQUFTLHFDQUFzQyxLQUFRLFdBQ3pELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUywyQ0FBNEMsS0FBUSxXQUMvRCxDQUFFQSxRQUFTLGdEQUFpRCxLQUFRLFdBQ3BFLENBQUVBLFFBQVMsZ0RBQWlELEtBQVEsV0FDcEUsQ0FBRUEsUUFBUyx1Q0FBd0MsS0FBUSxXQUMzRCxDQUFFQSxRQUFTLDZDQUE4QyxLQUFRLFdBQ2pFLENBQUVBLFFBQVMsd0NBQXlDLEtBQVEsV0FDNUQsQ0FBRUEsUUFBUyw4Q0FBK0MsS0FBUSxXQUNsRSxDQUFFQSxRQUFTLGlEQUFrRCxLQUFRLFdBQ3JFLENBQUVBLFFBQVMsa0NBQW1DLEtBQVEsV0FDdEQsQ0FBRUEsUUFBUyxrQ0FBbUMsS0FBUSxXQUN0RCxDQUFFQSxRQUFTLHNDQUF1QyxLQUFRLFdBQzFELENBQUVBLFFBQVMsNENBQTZDLEtBQVEsV0FDaEUsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLHFDQUFzQyxLQUFRLGFBR2pFLFdBQVksQ0FDUkEsUUFBUyw4QkFDVHZJLE1BQU8sQ0FDSCxDQUFFdUksUUFBUyw4QkFBK0IsS0FBUSxXQUNsRCxDQUFFQSxRQUFTLG9DQUFxQyxLQUFRLFdBQ3hELENBQUVBLFFBQVMsbUNBQW9DLEtBQVEsV0FDdkQsQ0FBRUEsUUFBUyx5Q0FBMEMsS0FBUSxXQUM3RCxDQUFFQSxRQUFTLG1EQUFvRCxLQUFRLFdBQ3ZFLENBQUVBLFFBQVMsbURBQW9ELEtBQVEsV0FDdkUsQ0FBRUEsUUFBUyw4Q0FBK0MsS0FBUSxXQUNsRSxDQUFFQSxRQUFTLHlDQUEwQyxLQUFRLFdBQzdELENBQUVBLFFBQVMsK0NBQWdELEtBQVEsV0FDbkUsQ0FBRUEsUUFBUyxrQ0FBbUMsS0FBUSxXQUN0RCxDQUFFQSxRQUFTLDJDQUE0QyxLQUFRLFdBQy9ELENBQUVBLFFBQVMsc0NBQXVDLEtBQVEsV0FDMUQsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLHFDQUFzQyxLQUFRLFdBQ3pELENBQUVBLFFBQVMsb0NBQXFDLEtBQVEsV0FDeEQsQ0FBRUEsUUFBUywwQ0FBMkMsS0FBUSxXQUM5RCxDQUFFQSxRQUFTLG9DQUFxQyxLQUFRLFdBQ3hELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUyxtQ0FBb0MsS0FBUSxhQUcvRCxhQUFjLENBQ1ZBLFFBQVMsZ0NBQ1R2SSxNQUFPLENBQ0gsQ0FBRXVJLFFBQVMsZ0NBQWlDLEtBQVEsV0FDcEQsQ0FBRUEsUUFBUyxxQ0FBc0MsS0FBUSxXQUN6RCxDQUFFQSxRQUFTLDJDQUE0QyxLQUFRLFdBQy9ELENBQUVBLFFBQVMsd0NBQXlDLEtBQVEsV0FDNUQsQ0FBRUEsUUFBUyxvQ0FBcUMsS0FBUSxXQUN4RCxDQUFFQSxRQUFTLHVDQUF3QyxLQUFRLFdBQzNELENBQUVBLFFBQVMsd0NBQXlDLEtBQVEsV0FDNUQsQ0FBRUEsUUFBUyx1Q0FBd0MsS0FBUSxXQUMzRCxDQUFFQSxRQUFTLHNDQUF1QyxLQUFRLFdBQzFELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsYUFHakUsV0FBWSxDQUNSQSxRQUFTLDhCQUNUdkksTUFBTyxDQUNILENBQUV1SSxRQUFTLDhCQUErQixLQUFRLFdBQ2xELENBQUVBLFFBQVMsb0NBQXFDLEtBQVEsV0FDeEQsQ0FBRUEsUUFBUyw4Q0FBK0MsS0FBUSxXQUNsRSxDQUFFQSxRQUFTLG1EQUFvRCxLQUFRLFdBQ3ZFLENBQUVBLFFBQVMsK0NBQWdELEtBQVEsV0FDbkUsQ0FBRUEsUUFBUyx5Q0FBMEMsS0FBUSxXQUM3RCxDQUFFQSxRQUFTLCtDQUFnRCxLQUFRLFdBQ25FLENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLDRDQUE2QyxLQUFRLFdBQ2hFLENBQUVBLFFBQVMsc0NBQXVDLEtBQVEsV0FDMUQsQ0FBRUEsUUFBUyw0Q0FBNkMsS0FBUSxXQUNoRSxDQUFFQSxRQUFTLHFDQUFzQyxLQUFRLFdBQ3pELENBQUVBLFFBQVMsdUNBQXdDLEtBQVEsV0FDM0QsQ0FBRUEsUUFBUyxvQ0FBcUMsS0FBUSxXQUN4RCxDQUFFQSxRQUFTLDRDQUE2QyxLQUFRLFdBQ2hFLENBQUVBLFFBQVMsbUNBQW9DLEtBQVEsYUFHL0QsYUFBYyxDQUNWQSxRQUFTLGdDQUNUdkksTUFBTyxDQUNILENBQUV1SSxRQUFTLGdDQUFpQyxLQUFRLFdBQ3BELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUyxpREFBa0QsS0FBUSxXQUNyRSxDQUFFQSxRQUFTLDJDQUE0QyxLQUFRLFdBQy9ELENBQUVBLFFBQVMsMkNBQTRDLEtBQVEsV0FDL0QsQ0FBRUEsUUFBUyx3Q0FBeUMsS0FBUSxXQUM1RCxDQUFFQSxRQUFTLHdDQUF5QyxLQUFRLFdBQzVELENBQUVBLFFBQVMsdUNBQXdDLEtBQVEsV0FDM0QsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLHFDQUFzQyxLQUFRLFdBQ3pELENBQUVBLFFBQVMsa0RBQW1ELEtBQVEsYUFHOUUsV0FBWSxDQUNSQSxRQUFTLDhCQUNUdkksTUFBTyxDQUNILENBQUV1SSxRQUFTLDhCQUErQixLQUFRLFdBQ2xELENBQUVBLFFBQVMsbUNBQW9DLEtBQVEsV0FDdkQsQ0FBRUEsUUFBUyw4Q0FBK0MsS0FBUSxXQUNsRSxDQUFFQSxRQUFTLHlDQUEwQyxLQUFRLFdBQzdELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUyxzQ0FBdUMsS0FBUSxXQUMxRCxDQUFFQSxRQUFTLHNDQUF1QyxLQUFRLFdBQzFELENBQUVBLFFBQVMscUNBQXNDLEtBQVEsV0FDekQsQ0FBRUEsUUFBUyxvQ0FBcUMsS0FBUSxnQkFDeEQsQ0FBRUEsUUFBUyx3Q0FBeUMsS0FBUSxXQUM1RCxDQUFFQSxRQUFTLG1DQUFvQyxLQUFRLGdCLG9FQzdSNUQsTUFBTXBELFFBQWlCLFFBQWdCLFdBQVksSUFDN0N1RCxRQUFzQixRQUFnQixpQkFBa0IsSSx1SUNBOUQsU0FBU0MsRUFBTUMsR0FDbEIsT0FBTyxJQUFJL0MsU0FBUUMsR0FBV2tDLFdBQVdsQyxFQUFTOEMsS0FRL0MsU0FBU0MsRUFBZUMsR0FDM0IsT0FBT2pILE9BQU9XLFFBQVFzRyxHQUFPdEQsUUFBTyxDQUFDQyxHQUFNc0QsRUFBR0MsS0FDcENuSCxPQUFPbUUsT0FBT25FLE9BQU9tRSxPQUFPLEdBQUlQLEdBQU01RCxPQUFPVyxRQUFRd0csRUFBZ0JoSixPQUFPd0YsUUFBTyxDQUFDeUQsR0FBU0YsRUFBR0csTUFDbEdELEVBQU9DLEVBQVlDLE1BQVFELEVBQVlYLFFBQ2hDVSxJQUNSLE1BRUosSUFHQSxTQUFTRyxFQUFhQyxFQUFRM0gsRUFBUzRILEVBQVEsUUFFbEQsTUFNTUMsRUFBUyxLQU5HLElBQUtuSSxNQUFRb0ksbUJBQW1CLFFBQVMsQ0FDdkRDLEtBQU0sVUFDTkMsT0FBUSxVQUNSQyxPQUFRLFlBQ1RDLFVBQVUsRUFBRyxXQUVxQlAsU0FBYzNILElBQ3JDLFNBQVY0SCxFQUNBTyxRQUFRQyxJQUFJUCxHQUVHLFVBQVZELEVBQ0xPLFFBQVFFLE1BQU1SLEdBRUMsU0FBVkQsRUFDTE8sUUFBUUcsS0FBS1QsR0FFRSxVQUFWRCxHQUNMTyxRQUFRSSxNQUFNVixHQWNmLFNBQVNXLEVBQXVCQyxFQUFZQyxHQUUvQ2hHLFFBQVFpRyxRQUFRQyxVQUFVdkwsYUFBWW9FLE1BQU96QixFQUFTMkgsS0FDbEQsTUFBTTFELEVBQVVqRSxFQUNoQixJQUFJcUYsRUFBVyxDQUNYOUMsT0FBUSxLQUNSQyxRQUFTLENBQ0xuRCxXQUFPOUIsRUFDUGtILFFBQVMsS0FJakIsTUFBTXRDLEVBQVV1RyxFQUFTekUsRUFBUTlCLFNBQ2pDLFFBQWdCNUUsSUFBWjRFLEVBQXVCLENBQ3ZCdUYsRUFBYWUsRUFBWSxzQkFBc0J4RSxFQUFROUIsMEJBQTBCakUsS0FBS1MsVUFBVXNGLEVBQVE3QixTQUV4RyxJQUNJLE1BQU1JLFFBQWdCTCxLQUFXOEIsRUFBUTdCLE1BQVEsSUFDakRpRCxFQUFTOUMsT0FBUyxLQUNsQjhDLEVBQVM3QyxRQUFVQSxFQUV2QixNQUFPK0YsR0FDSCxNQUFNTSxFQUFlTixFQUFNdkksUUFDM0JxRixFQUFTOUMsT0FBUyxRQUNsQjhDLEVBQVM3QyxRQUFVLENBQ2ZuRCxNQUFPd0osRUFDUHBFLFFBQVMsSUFFYmlELEVBQWFlLEVBQVksNEJBQTRCeEUsRUFBUTlCLFlBQVkwRyxJQUFnQixVQUdqRyxPQUFPeEQsS0FLUjVELGVBQWVxSCxFQUFzQjdFLEdBQ3hDLGFBQWEsSUFBSUUsU0FBU0MsSUFDdEIxQixRQUFRaUcsUUFBUUksWUFBWTlFLEdBQ3ZCK0UsTUFBSzNELEdBQVlqQixFQUFRaUIsS0FDekI0RCxPQUFNVixHQUFTbkUsRUFBUSxDQUN4QjdCLE9BQVEsUUFDUkMsUUFBUyxDQUNMbkQsTUFBT2tKLEVBQU12SSxRQUNieUUsUUFBUyxXQU9sQmhELGVBQWV5SCxFQUFtQkMsRUFBT2xGLEdBQzVDLGFBQWEsSUFBSUUsU0FBU0MsSUFDdEIxQixRQUFRbUMsS0FBS2tFLFlBQVlJLEVBQU9sRixHQUMzQitFLE1BQUszRCxHQUFZakIsRUFBUWlCLEtBQ3pCNEQsT0FBTVYsR0FBU25FLEVBQVEsQ0FDeEI3QixPQUFRLFFBQ1JDLFFBQVMsQ0FDTG5ELE1BQU9rSixFQUFNdkksUUFDYnlFLFFBQVMsV0FvQmxCaEQsZUFBZTJILEVBQWdCQyxFQUFLQyxHQUV2QyxNQUFNQyxRQWhCSDlILGVBQTBCNEgsRUFBS0MsR0FFbEMsTUFBTUUsUUFBdUI5RyxRQUFRK0csUUFBUUMsTUFBTUMsSUFBSU4sR0FJdkQsWUFINEI5TCxJQUF4QmlNLEVBQWVILEtBQ2ZHLEVBQWVILEdBQU9DLEdBRW5CRSxFQUFlSCxHQVVLTyxDQUFXUCxFQUFLQyxHQUNyQ08sR0FBUSxRQUFTTixHQThDdkIsT0FwQkE3RyxRQUFRaUcsUUFBUUMsVUFBVXZMLGFBQVlvRSxNQUFPekIsRUFBUzJILEtBRWxELE1BQU0xRCxFQUFVakUsRUFDaEIsR0FBd0IsZUFBcEJpRSxFQUFROUIsUUFBMEIsQ0FFbEMsTUFBTzJILEVBQVVDLEVBQVFDLEdBQVkvRixFQUFRN0IsS0FDekMwSCxJQUFhVCxHQUViUSxFQUFNSSxRQUFPNUssSUFBV0EsRUFBTTBLLEdBQVVDLEVBQWlCM0ssVUFHNUQsR0FBd0Isa0JBQXBCNEUsRUFBUTlCLFFBQTZCLENBRTFDLE1BQU8ySCxFQUFVSSxHQUFVakcsRUFBUTdCLEtBQy9CMEgsSUFBYVQsR0FFYlEsRUFBTUksUUFBTzVLLFdBQWtCQSxFQUFNNkssR0FBZ0I3SyxTQUkxRCxDQUFFd0ssTUFBQUEsRUFBT2pHLElBM0NKLENBQUNtRyxFQUFRQyxLQUVqQkgsRUFBTUksUUFBTzVLLElBQVdBLEVBQU0wSyxHQUFVQyxFQUFpQjNLLEtBQ3pEcUQsUUFBUStHLFFBQVFDLE1BQU05RixJQUFJLENBQUUsQ0FBQ3lGLElBQU0sUUFBSVEsS0FNdkNmLEVBSnNCLENBQ2xCM0csUUFBUyxhQUNUQyxLQUFNLENBQUNpSCxFQUFLVSxFQUFRQyxNQW9DUEcsSUFoQ1JELElBRVRMLEVBQU1JLFFBQU81SyxXQUFrQkEsRUFBTTZLLEdBQWdCN0ssS0FDckRxRCxRQUFRK0csUUFBUUMsTUFBTTlGLElBQUksQ0FBRSxDQUFDeUYsSUFBTSxRQUFJUSxLQU12Q2YsRUFKc0IsQ0FDbEIzRyxRQUFTLGFBQ1RDLEtBQU0sQ0FBQ2lILEVBQUthLE9BNkJqQnpJLGVBQWUySSxFQUFhakIsRUFBT2tCLEVBQWlCQyxHQUFRLEdBRS9ELE1BQWlCLElBQVZBLEdBRXlCLGNBRERwQixFQUFtQkMsRUFBTyxPQUNwQzVHLGNBR1gwRSxFQUFNb0QsR0FJYixTQUFTRSxFQUFlQyxFQUFtQkMsR0FBVyxHQUV6RCxJQUFJekksR0FBVyxFQUNYd0ksRUFBb0IsSUFDcEJBLElBQXlDLEVBQ3pDeEksR0FBVyxHQUVmLE1BQU0wSSxFQUFlRixFQUFvQixJQUN6QyxJQUFJM0ssRUFBVThLLEtBQUtDLE1BQU1GLEVBQWUsSUFDcEM1SyxFQUFVNEssRUFBZSxHQU03QixPQUppQixJQUFiRCxJQUNBNUssRUFBVThLLEtBQUtDLE1BQU0vSyxHQUNyQkMsRUFBVTZLLEtBQUtDLE1BQU05SyxJQUVsQixDQUFDRCxFQUFTQyxFQUFTa0MsR0FHdkIsU0FBUzZJLEVBQW1CQyxHQUMvQixNQUFNQyxFQUFZRCxFQUFVRSxNQUFNLEtBQzVCQyxFQUFhRixFQUFVeE0sS0FBSTJNLEdBQVNDLFNBQVNELEVBQU8sTUFHMUQsT0FEcUIsSUFBV0MsU0FBU0osRUFBVSxHQUFLQSxFQUFVLEdBQUksSUFBTUUsRUFBVyxNQzNOdkZHLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUIvTixJQUFqQmdPLEVBQ0gsT0FBT0EsRUFBYUMsUUFHckIsSUFBSUMsRUFBU0wsRUFBeUJFLEdBQVksQ0FDakRuRyxHQUFJbUcsRUFDSkksUUFBUSxFQUNSRixRQUFTLElBVVYsT0FOQUcsRUFBb0JMLEdBQVVHLEVBQVFBLEVBQU9ELFFBQVNILEdBR3RESSxFQUFPQyxRQUFTLEVBR1RELEVBQU9ELFFBSWZILEVBQW9CTyxFQUFJRCxFUjVCcEJ2UCxFQUFnQyxtQkFBWHlQLE9BQXdCQSxPQUFPLGdCQUFrQixtQkFDdEV4UCxFQUFtQyxtQkFBWHdQLE9BQXdCQSxPQUFPLG1CQUFxQixzQkFDNUV2UCxFQUFpQndQLElBQ2pCQSxJQUNGQSxFQUFNQyxTQUFTQyxHQUFRQSxFQUFHQyxNQUMxQkgsRUFBTUMsU0FBU0MsR0FBUUEsRUFBR0MsSUFBTUQsRUFBR0MsSUFBTUQsUUFHdkN6UCxFQUFvQnlQLE1BQVdBLEVBQUdDLEdBQUtELElBQ3ZDeFAsRUFBZ0IsQ0FBQ3NQLEVBQU9FLElBQVFGLEVBQVFBLEVBQU14SyxLQUFLMEssR0FBTXpQLEVBQWlCeVAsR0FxQjlFWCxFQUFvQmEsRUFBSSxDQUFDVCxFQUFRN08sRUFBTXVQLEtBQ3RDLElBRUlDLEVBQ0FDLEVBQ0FDLEVBSkFSLEVBQVFLLEdBQVksR0FDcEJYLEVBQVVDLEVBQU9ELFFBSWpCZSxHQUFlLEVBQ2ZDLEdBQVMsRUFDVEMsRUFBVSxDQUFDQyxFQUFNQyxFQUFXQyxLQUMzQkosSUFDSkEsR0FBUyxFQUNURyxFQUFVVixHQUFLUyxFQUFLck0sT0FDcEJxTSxFQUFLbk8sS0FBSSxDQUFDc08sRUFBS0MsSUFBT0QsRUFBSXpRLEdBQWF1USxFQUFXQyxLQUNsREosR0FBUyxJQUVOTyxFQUFVLElBQUk1SSxTQUFRLENBQUNDLEVBQVM0SSxLQUNuQ1YsRUFBU1UsRUFDVFgsRUFBZSxLQUFPakksRUFBUW9ILEdBQVVsUCxFQUFjd1AsR0FBUUEsRUFBUSxNQUV2RWlCLEVBQVExUSxHQUFrQm1QLEVBQzFCdUIsRUFBUTNRLEdBQWUsQ0FBQzRQLEVBQUlpQixLQUMzQixHQUFJVixFQUFnQixPQUFPaFEsRUFBaUJ5UCxHQUN4Q0ksR0FBYUssRUFBUUwsRUFBYUosRUFBSWlCLEdBQzFDelEsRUFBY3NQLEVBQU9FLEdBQ3JCZSxFQUFROUQsTUFBTWdFLElBRWZ4QixFQUFPRCxRQUFVdUIsRUFDakJuUSxHQUFNOFAsSUFDTCxJQUFJQSxFQUFNLE9BQU9MLElBRWpCLElBQUlMLEVBQUl6SixFQURSNkosRUFqRGEsQ0FBQ00sR0FBVUEsRUFBS25PLEtBQUtzTyxJQUNuQyxHQUFXLE9BQVJBLEdBQStCLGlCQUFSQSxFQUFrQixDQUMzQyxHQUFHQSxFQUFJelEsR0FBYyxPQUFPeVEsRUFDNUIsR0FBR0EsRUFBSTdELEtBQU0sQ0FDWixJQUFJOEMsRUFBUSxHQUNaZSxFQUFJN0QsTUFBTWlELElBQ1RsSSxFQUFJMUgsR0FBa0I0UCxFQUN0QjNQLEVBQWN3UCxHQUNkQSxFQUFRLEtBRVQsSUFBSS9ILEVBQU0sR0FFVixPQURPQSxFQUFJM0gsR0FBZSxDQUFDNFAsRUFBSU0sS0FBWTlQLEVBQWNzUCxFQUFPRSxHQUFLYSxFQUFJNUQsTUFBTXFELElBQ3hFdkksR0FHVCxJQUFJbUosRUFBTSxHQUdMLE9BRkFBLEVBQUk5USxHQUFnQjRQLEdBQVF6UCxFQUFpQnlQLEdBQzdDa0IsRUFBSTdRLEdBQWtCd1EsRUFDZkssS0ErQkdDLENBQVNULEdBRXZCLElBQUlLLEVBQVUsSUFBSTVJLFNBQVEsQ0FBQ0MsRUFBU2tJLE1BQ25DTixFQUFLLElBQU81SCxFQUFRN0IsRUFBUzZKLEVBQVk3TixLQUFLNk8sR0FBT0EsRUFBRS9RLE9BQ3BENFAsRUFBSSxFQUNQUSxFQUFRTCxFQUFhSixFQUFJTSxNQUUxQixPQUFPTixFQUFHQyxFQUFJYyxFQUFVeEssS0FDdEJ5RyxLQUFLcUQsRUFBY0MsR0FDdEJDLEdBQWUsR0NwRVo5UCxFQUFXLEdBQ2Y0TyxFQUFvQmdDLEVBQUksQ0FBQzlLLEVBQVErSyxFQUFVdEIsRUFBSXVCLEtBQzlDLElBQUdELEVBQUgsQ0FNQSxJQUFJRSxFQUFlQyxFQUFBQSxFQUNuQixJQUFTWCxFQUFJLEVBQUdBLEVBQUlyUSxFQUFTNEQsT0FBUXlNLElBQUssQ0FHekMsSUFGQSxJQUFLUSxFQUFVdEIsRUFBSXVCLEdBQVk5USxFQUFTcVEsR0FDcENZLEdBQVksRUFDUEMsRUFBSSxFQUFHQSxFQUFJTCxFQUFTak4sT0FBUXNOLE1BQ3BCLEVBQVhKLEdBQXNCQyxHQUFnQkQsSUFBYXBOLE9BQU9DLEtBQUtpTCxFQUFvQmdDLEdBQUdPLE9BQU92RSxHQUFTZ0MsRUFBb0JnQyxFQUFFaEUsR0FBS2lFLEVBQVNLLE1BQzlJTCxFQUFTTyxPQUFPRixJQUFLLElBRXJCRCxHQUFZLEVBQ1RILEVBQVdDLElBQWNBLEVBQWVELElBRzdDLEdBQUdHLEVBQVcsQ0FDYmpSLEVBQVNvUixPQUFPZixJQUFLLEdBQ3JCLElBQUliLEVBQUlELFNBQ0V6TyxJQUFOME8sSUFBaUIxSixFQUFTMEosSUFHaEMsT0FBTzFKLEVBdkJOZ0wsRUFBV0EsR0FBWSxFQUN2QixJQUFJLElBQUlULEVBQUlyUSxFQUFTNEQsT0FBUXlNLEVBQUksR0FBS3JRLEVBQVNxUSxFQUFJLEdBQUcsR0FBS1MsRUFBVVQsSUFBS3JRLEVBQVNxUSxHQUFLclEsRUFBU3FRLEVBQUksR0FDckdyUSxFQUFTcVEsR0FBSyxDQUFDUSxFQUFVdEIsRUFBSXVCLElRSi9CbEMsRUFBb0IrQixFQUFJLENBQUM1QixFQUFTc0MsS0FDakMsSUFBSSxJQUFJekUsS0FBT3lFLEVBQ1h6QyxFQUFvQjBDLEVBQUVELEVBQVl6RSxLQUFTZ0MsRUFBb0IwQyxFQUFFdkMsRUFBU25DLElBQzVFbEosT0FBTzZOLGVBQWV4QyxFQUFTbkMsRUFBSyxDQUFFNEUsWUFBWSxFQUFNdEUsSUFBS21FLEVBQVd6RSxNQ0ozRWdDLEVBQW9CNkMsRUFBSSxXQUN2QixHQUEwQixpQkFBZkMsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPQyxNQUFRLElBQUlDLFNBQVMsY0FBYixHQUNkLE1BQU9DLEdBQ1IsR0FBc0IsaUJBQVhDLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCbEQsRUFBb0JtRCxJQUFPL0MsS0FDMUJBLEVBQVN0TCxPQUFPMkYsT0FBTzJGLElBQ1hnRCxXQUFVaEQsRUFBT2dELFNBQVcsSUFDeEN0TyxPQUFPNk4sZUFBZXZDLEVBQVEsVUFBVyxDQUN4Q3dDLFlBQVksRUFDWnJLLElBQUssS0FDSixNQUFNLElBQUkwQixNQUFNLDBGQUE0Rm1HLEVBQU90RyxPQUc5R3NHLEdDVFJKLEVBQW9CMEMsRUFBSSxDQUFDaEssRUFBSzJLLElBQVV2TyxPQUFPd08sVUFBVUMsZUFBZUMsS0FBSzlLLEVBQUsySyxHQ0FsRnJELEVBQW9Cc0MsRUFBSSxJLE1DS3hCLElBQUltQixFQUFrQixDQUNyQixJQUFLLEdBYU56RCxFQUFvQmdDLEVBQUVNLEVBQUtvQixHQUEwQyxJQUE3QkQsRUFBZ0JDLEdBR3hELElBQUlDLEVBQXVCLENBQUNDLEVBQTRCeEgsS0FDdkQsSUFHSTZELEVBQVV5RCxHQUhUekIsRUFBVTRCLEVBQWF2RyxHQUFXbEIsRUFHaEJxRixFQUFJLEVBQzNCLEdBQUdRLEVBQVM2QixNQUFNaEssR0FBZ0MsSUFBeEIySixFQUFnQjNKLEtBQWEsQ0FDdEQsSUFBSW1HLEtBQVk0RCxFQUNaN0QsRUFBb0IwQyxFQUFFbUIsRUFBYTVELEtBQ3JDRCxFQUFvQk8sRUFBRU4sR0FBWTRELEVBQVk1RCxJQUdoRCxHQUFHM0MsRUFBUyxJQUFJcEcsRUFBU29HLEVBQVEwQyxHQUdsQyxJQURHNEQsR0FBNEJBLEVBQTJCeEgsR0FDckRxRixFQUFJUSxFQUFTak4sT0FBUXlNLElBQ3pCaUMsRUFBVXpCLEVBQVNSLEdBQ2hCekIsRUFBb0IwQyxFQUFFZSxFQUFpQkMsSUFBWUQsRUFBZ0JDLElBQ3JFRCxFQUFnQkMsR0FBUyxLQUUxQkQsRUFBZ0J4QixFQUFTUixJQUFNLEVBRWhDLE9BQU96QixFQUFvQmdDLEVBQUU5SyxJQUcxQjZNLEVBQXFCQyxLQUE2Qyx1Q0FBSUEsS0FBNkMsd0NBQUssR0FDNUhELEVBQW1CckQsUUFBUWlELEVBQXFCTSxLQUFLLEtBQU0sSUFDM0RGLEVBQW1COU4sS0FBTzBOLEVBQXFCTSxLQUFLLEtBQU1GLEVBQW1COU4sS0FBS2dPLEtBQUtGLEssR0M3Q3ZGLElBQUlHLEVBQXNCbEUsRUFBb0JnQyxPQUFFOVAsRUFBVyxDQUFDLE1BQU0sSUFBTzhOLEVBQW9CLE9BQzdGa0UsRUFBc0JsRSxFQUFvQmdDLEVBQUVrQyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9ydW50aW1lL2FzeW5jIG1vZHVsZSIsIndlYnBhY2s6Ly9ha2l0b3MtYXV0b21hdGVkLXV0aWxpdGllcy93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL2FraXRvcy1hdXRvbWF0ZWQtdXRpbGl0aWVzLy4vc291cmNlL2JhY2tncm91bmQvYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly9ha2l0b3MtYXV0b21hdGVkLXV0aWxpdGllcy8uL3NvdXJjZS9iYWNrZ3JvdW5kL21vZHVsZV9iZXN0YnV5LnRzIiwid2VicGFjazovL2FraXRvcy1hdXRvbWF0ZWQtdXRpbGl0aWVzLy4vc291cmNlL2JhY2tncm91bmQvbW9kdWxlX21haW4udHMiLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvLi9zb3VyY2Uvc2hhcmVkL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9ha2l0b3MtYXV0b21hdGVkLXV0aWxpdGllcy8uL3NvdXJjZS9zaGFyZWQvaW5pdGlhbGl6YXRpb25zLnRzIiwid2VicGFjazovL2FraXRvcy1hdXRvbWF0ZWQtdXRpbGl0aWVzLy4vc291cmNlL3NoYXJlZC91dGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2FraXRvcy1hdXRvbWF0ZWQtdXRpbGl0aWVzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9ha2l0b3MtYXV0b21hdGVkLXV0aWxpdGllcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FraXRvcy1hdXRvbWF0ZWQtdXRpbGl0aWVzL3dlYnBhY2svcnVudGltZS9ydW50aW1lSWQiLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWtpdG9zLWF1dG9tYXRlZC11dGlsaXRpZXMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWJwYWNrVGhlbiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgdGhlblwiKSA6IFwiX193ZWJwYWNrX3RoZW5fX1wiO1xudmFyIHdlYnBhY2tFeHBvcnRzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBleHBvcnRzXCIpIDogXCJfX3dlYnBhY2tfZXhwb3J0c19fXCI7XG52YXIgY29tcGxldGVRdWV1ZSA9IChxdWV1ZSkgPT4ge1xuXHRpZihxdWV1ZSkge1xuXHRcdHF1ZXVlLmZvckVhY2goKGZuKSA9PiAoZm4uci0tKSk7XG5cdFx0cXVldWUuZm9yRWFjaCgoZm4pID0+IChmbi5yLS0gPyBmbi5yKysgOiBmbigpKSk7XG5cdH1cbn1cbnZhciBjb21wbGV0ZUZ1bmN0aW9uID0gKGZuKSA9PiAoIS0tZm4uciAmJiBmbigpKTtcbnZhciBxdWV1ZUZ1bmN0aW9uID0gKHF1ZXVlLCBmbikgPT4gKHF1ZXVlID8gcXVldWUucHVzaChmbikgOiBjb21wbGV0ZUZ1bmN0aW9uKGZuKSk7XG52YXIgd3JhcERlcHMgPSAoZGVwcykgPT4gKGRlcHMubWFwKChkZXApID0+IHtcblx0aWYoZGVwICE9PSBudWxsICYmIHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpIHtcblx0XHRpZihkZXBbd2VicGFja1RoZW5dKSByZXR1cm4gZGVwO1xuXHRcdGlmKGRlcC50aGVuKSB7XG5cdFx0XHR2YXIgcXVldWUgPSBbXTtcblx0XHRcdGRlcC50aGVuKChyKSA9PiB7XG5cdFx0XHRcdG9ialt3ZWJwYWNrRXhwb3J0c10gPSByO1xuXHRcdFx0XHRjb21wbGV0ZVF1ZXVlKHF1ZXVlKTtcblx0XHRcdFx0cXVldWUgPSAwO1xuXHRcdFx0fSk7XG5cdFx0XHR2YXIgb2JqID0ge307XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9ialt3ZWJwYWNrVGhlbl0gPSAoZm4sIHJlamVjdCkgPT4gKHF1ZXVlRnVuY3Rpb24ocXVldWUsIGZuKSwgZGVwLmNhdGNoKHJlamVjdCkpO1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9XG5cdH1cblx0dmFyIHJldCA9IHt9O1xuXHRcdFx0XHRcdFx0cmV0W3dlYnBhY2tUaGVuXSA9IChmbikgPT4gKGNvbXBsZXRlRnVuY3Rpb24oZm4pKTtcblx0XHRcdFx0XHRcdHJldFt3ZWJwYWNrRXhwb3J0c10gPSBkZXA7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0O1xufSkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5hID0gKG1vZHVsZSwgYm9keSwgaGFzQXdhaXQpID0+IHtcblx0dmFyIHF1ZXVlID0gaGFzQXdhaXQgJiYgW107XG5cdHZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XG5cdHZhciBjdXJyZW50RGVwcztcblx0dmFyIG91dGVyUmVzb2x2ZTtcblx0dmFyIHJlamVjdDtcblx0dmFyIGlzRXZhbHVhdGluZyA9IHRydWU7XG5cdHZhciBuZXN0ZWQgPSBmYWxzZTtcblx0dmFyIHdoZW5BbGwgPSAoZGVwcywgb25SZXNvbHZlLCBvblJlamVjdCkgPT4ge1xuXHRcdGlmIChuZXN0ZWQpIHJldHVybjtcblx0XHRuZXN0ZWQgPSB0cnVlO1xuXHRcdG9uUmVzb2x2ZS5yICs9IGRlcHMubGVuZ3RoO1xuXHRcdGRlcHMubWFwKChkZXAsIGkpID0+IChkZXBbd2VicGFja1RoZW5dKG9uUmVzb2x2ZSwgb25SZWplY3QpKSk7XG5cdFx0bmVzdGVkID0gZmFsc2U7XG5cdH07XG5cdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuXHRcdHJlamVjdCA9IHJlajtcblx0XHRvdXRlclJlc29sdmUgPSAoKSA9PiAocmVzb2x2ZShleHBvcnRzKSwgY29tcGxldGVRdWV1ZShxdWV1ZSksIHF1ZXVlID0gMCk7XG5cdH0pO1xuXHRwcm9taXNlW3dlYnBhY2tFeHBvcnRzXSA9IGV4cG9ydHM7XG5cdHByb21pc2Vbd2VicGFja1RoZW5dID0gKGZuLCByZWplY3RGbikgPT4ge1xuXHRcdGlmIChpc0V2YWx1YXRpbmcpIHsgcmV0dXJuIGNvbXBsZXRlRnVuY3Rpb24oZm4pOyB9XG5cdFx0aWYgKGN1cnJlbnREZXBzKSB3aGVuQWxsKGN1cnJlbnREZXBzLCBmbiwgcmVqZWN0Rm4pO1xuXHRcdHF1ZXVlRnVuY3Rpb24ocXVldWUsIGZuKTtcblx0XHRwcm9taXNlLmNhdGNoKHJlamVjdEZuKTtcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBwcm9taXNlO1xuXHRib2R5KChkZXBzKSA9PiB7XG5cdFx0aWYoIWRlcHMpIHJldHVybiBvdXRlclJlc29sdmUoKTtcblx0XHRjdXJyZW50RGVwcyA9IHdyYXBEZXBzKGRlcHMpO1xuXHRcdHZhciBmbiwgcmVzdWx0O1xuXHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0Zm4gPSAoKSA9PiAocmVzb2x2ZShyZXN1bHQgPSBjdXJyZW50RGVwcy5tYXAoKGQpID0+IChkW3dlYnBhY2tFeHBvcnRzXSkpKSk7XG5cdFx0XHRmbi5yID0gMDtcblx0XHRcdHdoZW5BbGwoY3VycmVudERlcHMsIGZuLCByZWplY3QpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmbi5yID8gcHJvbWlzZSA6IHJlc3VsdDtcblx0fSkudGhlbihvdXRlclJlc29sdmUsIHJlamVjdCk7XG5cdGlzRXZhbHVhdGluZyA9IGZhbHNlO1xufTsiLCJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJpbXBvcnQgQmFja2dyb3VuZCBmcm9tIFwiLi9CYWNrZ3JvdW5kLnN2ZWx0ZVwiO1xyXG5jb25zdCBhcHAgPSBuZXcgQmFja2dyb3VuZCh7XHJcbiAgICB0YXJnZXQ6IGRvY3VtZW50LmJvZHksXHJcbiAgICBwcm9wczoge30sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBhcHA7XHJcbiIsImltcG9ydCB7IGdldCB9IGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3N0b3JlXCI7XHJcbmltcG9ydCB7IGJlc3RCdXlEaXNwbGF5cyB9IGZyb20gXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IGJlc3RCdXlRdWV1ZXMsIHNldHRpbmdzIH0gZnJvbSBcIi4uL3NoYXJlZC9pbml0aWFsaXphdGlvbnNcIjtcclxuaW1wb3J0IHsgYmVzdEJ1eURlY29kZVF1ZXVlLCBleHRlbnNpb25Mb2csIG1pbnV0ZXNTZWNvbmRzIH0gZnJvbSBcIi4uL3NoYXJlZC91dGlsaXRpZXNcIjtcclxuaW1wb3J0IHsgYWRkU3luY1JlcXVlc3QsIGNyZWF0ZVRhYlJlYWR5LCBzb3VuZE5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL21vZHVsZV9tYWluXCI7XHJcbjsgLy8gQm9keSBzZW50IHdpdGggYWRkVG9DYXJ0IFBPU1QgcmVxdWVzdFxyXG5jb25zdCBsb2dnaW5nU2VsZiA9IFwiYmFja2dyb3VuZF9iZXN0YnV5XCI7XHJcbmNvbnN0IGJlc3RCdXlDYXJ0VVJMID0gXCJodHRwczovL3d3dy5iZXN0YnV5LmNvbS9jYXJ0XCI7XHJcbmNvbnN0IGJlc3RCdXlUYWJVUkwgPSBcImh0dHBzOi8vd3d3LmJlc3RidXkuY29tL1wiOyAvLyBGb3IgYXV0by1vcGVuaW5nIHRhYnNcclxuLy8gU2V0dXAgYWRkLXRvLWNhcnQgcmVxdWVzdCBpbnRlcmNlcHRpb24gaGFuZGxlcnMgdGhvcnVnaCB3ZWJSZXF1ZXN0IEFQSVxyXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBCZXN0QnV5UmVxdWVzdEhhbmRsZXJzKCkge1xyXG4gICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBcIlNldHRpbmctdXAgd2ViUmVxdWVzdCBpbnRlcmNlcHRpb24gZm9yIGFkZFRvQ2FydCByZXF1ZXN0c1wiKTtcclxuICAgIC8vIGJhY2tncm91bmQtYmVzdGJ1eTogUmVnaXN0ZXIgd2ViUmVxdWVzdCBsaXN0ZW5lcnMgZm9yIGludGVyY2VwdGluZyBCZXN0IEJ1eSBhZGQtdG8tY2FydCByZXF1ZXN0c1xyXG4gICAgY29uc3QgcmVxdWVzdEJvZHlDYWNoZSA9IHt9O1xyXG4gICAgY2hyb21lLndlYlJlcXVlc3Qub25CZWZvcmVSZXF1ZXN0LmFkZExpc3RlbmVyKGZ1bmN0aW9uIChkZXRhaWxzKSB7XHJcbiAgICAgICAgLy8gSWdub3JlIGZvciBHRVQgcmVxdWVzdHMgd2hpY2ggc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgIGlmIChkZXRhaWxzLnJlcXVlc3RCb2R5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gQ29tcGxpY2F0ZWQgcHJvY2VzcyB0byBkZWNvZGUgcmVxdWVzdCBib2R5IHRvIHN0cmluZy4uLlxyXG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkQm9keSA9IGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZGV0YWlscy5yZXF1ZXN0Qm9keS5yYXdbMF0uYnl0ZXMpKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBKU09OLnBhcnNlKGRlY29kZWRCb2R5KTtcclxuICAgICAgICAgICAgcmVxdWVzdEJvZHlDYWNoZVtkZXRhaWxzLnJlcXVlc3RJZF0gPSBwYXJzZWRCb2R5O1xyXG4gICAgICAgICAgICAvLyBQcmVwYXJlIGxpc3Qgb2YgU0tVKHMpIGZvciBvdXRwdXQgZnJvbSBwYXJzZWQgYm9keVxyXG4gICAgICAgICAgICBjb25zdCBza3VzID0gcGFyc2VkQm9keS5pdGVtcy5tYXAoaXRlbSA9PiBpdGVtLnNrdUlkKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZFNLVXMgPSBKU09OLnN0cmluZ2lmeShza3VzKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgW3dlYlJlcXVlc3Qub25CZWZvcmVSZXF1ZXN0XSBGaW5pc2hlZCBjYWNoaW5nIFBPU1QgYm9keSBmb3IgcmVxdWVzdCAke2RldGFpbHMucmVxdWVzdElkfSB3aXRoIFNLVShzKSAke3NlcmlhbGl6ZWRTS1VzfWAsIFwiZGVidWdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgeyB1cmxzOiBbXCIqOi8vKi5iZXN0YnV5LmNvbS9jYXJ0L2FwaS92MS9hZGRUb0NhcnRcIl0gfSwgW1wicmVxdWVzdEJvZHlcIiwgXCJibG9ja2luZ1wiXSk7XHJcbiAgICBjaHJvbWUud2ViUmVxdWVzdC5vbkJlZm9yZVNlbmRIZWFkZXJzLmFkZExpc3RlbmVyKGZ1bmN0aW9uIChkZXRhaWxzKSB7XHJcbiAgICAgICAgLy8gUGFyc2UgcGF5bG9hZCBmcm9tIGNhY2hlZCByZXF1ZXN0IGJvZHlcclxuICAgICAgICBjb25zdCBjYWNoZWRCb2R5ID0gcmVxdWVzdEJvZHlDYWNoZVtkZXRhaWxzLnJlcXVlc3RJZF07IC8vIEluIGNhc2UgaWYgc29tZWhvdyBub3QgY2FjaGVkXHJcbiAgICAgICAgaWYgKGNhY2hlZEJvZHkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBDYWNoZWQgYm9keSBkb2Vzbid0IGV4aXN0LCBzaG91bGRuJ3QgaGFwcGVuXHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYFt3ZWJSZXF1ZXN0Lm9uQmVmb3JlU2VuZEhlYWRlcnNdIENvdWxkbid0IGZpbmQgY2FjaGVkIFBPU1QgYm9keSBmb3IgcmVxdWVzdCAke2RldGFpbHMucmVxdWVzdElkfWAsIFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9LCB7IHVybHM6IFtcIio6Ly8qLmJlc3RidXkuY29tL2NhcnQvYXBpL3YxL2FkZFRvQ2FydFwiXSB9LCBbXCJyZXF1ZXN0SGVhZGVyc1wiLCBcImJsb2NraW5nXCJdKTtcclxuICAgIGNocm9tZS53ZWJSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkLmFkZExpc3RlbmVyKGZ1bmN0aW9uIChkZXRhaWxzKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIFRyYWNrIHdoZXRoZXIgaGVhZGVycyBmb3VuZCBiZWZvcmUgYWRkaW5nXHJcbiAgICAgICAgbGV0IGEyY1RyYW5zYWN0aW9uUmVmZXJlbmNlSWQgPSBcIlwiO1xyXG4gICAgICAgIGxldCBhMmNUcmFuc2FjdGlvbkNvZGUgPSBcIlwiO1xyXG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIChkZXRhaWxzLnJlc3BvbnNlSGVhZGVycyB8fCBbXSkpIHtcclxuICAgICAgICAgICAgaWYgKGhlYWRlci5uYW1lID09PSBcImEyY3RyYW5zYWN0aW9ucmVmZXJlbmNlaWRcIikge1xyXG4gICAgICAgICAgICAgICAgYTJjVHJhbnNhY3Rpb25SZWZlcmVuY2VJZCA9IGhlYWRlci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoZWFkZXIubmFtZSA9PT0gXCJhMmN0cmFuc2FjdGlvbmNvZGVcIikge1xyXG4gICAgICAgICAgICAgICAgYTJjVHJhbnNhY3Rpb25Db2RlID0gaGVhZGVyLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIGJvdGggaGVhZGVycyBleGlzdCBhbmQgc2V0dGluZyBlbmFibGVkLCBhZGQgcXVldWUgdXNpbmcgc2t1IGZyb20gY2FjaGVkIGJvZHlcclxuICAgICAgICBpZiAoKGRldGFpbHMuc3RhdHVzQ29kZSAhPT0gMjAwIHx8IGdldChzZXR0aW5ncy5zdG9yZSlbXCJiZXN0YnV5XCJdW1wicmVxdWV1ZVN1Y2Nlc3NcIl0gPT09IHRydWUpXHJcbiAgICAgICAgICAgICYmIGEyY1RyYW5zYWN0aW9uUmVmZXJlbmNlSWQgIT09IFwiXCIgJiYgYTJjVHJhbnNhY3Rpb25Db2RlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIFNLVSBmcm9tIGNhY2hlZCByZXF1ZXN0IGJvZHksIGFzc3VtZSBTS1UgaXMgZGVzaXJlZFxyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRCb2R5ID0gcmVxdWVzdEJvZHlDYWNoZVtkZXRhaWxzLnJlcXVlc3RJZF07IC8vIEluIGNhc2UgaWYgc29tZWhvdyBub3QgY2FjaGVkXHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRCb2R5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIENhY2hlZCBib2R5IGRvZXNuJ3QgZXhpc3QsIHNob3VsZG4ndCBoYXBwZW5cclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYFt3ZWJSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkXSBDb3VsZG4ndCBmaW5kIGNhY2hlZCBQT1NUIGJvZHkgZm9yIHJlcXVlc3QgJHtkZXRhaWxzLnJlcXVlc3RJZH1gLCBcImVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNrdSA9IChfYSA9IGNhY2hlZEJvZHkuaXRlbXNbMF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5za3VJZDsgLy8gQXNzdW1lIGFsd2F5cyBkZWZpbmVkXHJcbiAgICAgICAgICAgIC8vIERlY29kZSByZW1haW5pbmcgcXVldWUgdGltZSBmcm9tIGEyY3RyYW5zYWN0aW9uY29kZVxyXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgLy8gSW4gbWlsbGlzZWNvbmRzIGZyb20gZXBvY2hcclxuICAgICAgICAgICAgY29uc3QgcXVldWVUaW1lID0gYmVzdEJ1eURlY29kZVF1ZXVlKGEyY1RyYW5zYWN0aW9uQ29kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IFttaW51dGVzLCBzZWNvbmRzXSA9IG1pbnV0ZXNTZWNvbmRzKHF1ZXVlVGltZSk7IC8vIE9ubHkgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZURhdGEgPSB7IHN0YXJ0VGltZSwgYTJjVHJhbnNhY3Rpb25SZWZlcmVuY2VJZCwgYTJjVHJhbnNhY3Rpb25Db2RlLCBxdWV1ZVRpbWUgfTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgW3dlYlJlcXVlc3Qub25IZWFkZXJzUmVjZWl2ZWRdIFF1ZXVlIHJlc3BvbnNlIGhlYWRlcnMgZGV0ZWN0ZWQgZm9yIHJlcXVlc3QgJHtkZXRhaWxzLnJlcXVlc3RJZH0gd2l0aCB0aW1lICR7bWludXRlc31tICR7c2Vjb25kc31zYCk7XHJcbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCBhbmQgYnJvYWRjYXN0IHF1ZXVlIGRhdGEgdGhyb3VnaCBXcml0YWJsZVxyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IFwiXCI7IC8vIFRvIGJlIGZpbGxlZCB3aXRoaW4gc3RhdGVtZW50c1xyXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0TmFtZSA9IGJlc3RCdXlEaXNwbGF5c1tza3VdO1xyXG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdRdWV1ZXMgPSBnZXQoYmVzdEJ1eVF1ZXVlcy5zdG9yZSlbc2t1XSB8fCB7fTtcclxuICAgICAgICAgICAgLy8gRWl0aGVyIGFwcGVuZCB0byBleGlzdGluZyBvciByZXBsYWNlIHF1ZXVlIGRlcGVuZGluZyBvbiBzZXR0aW5nXHJcbiAgICAgICAgICAgIGlmIChnZXQoc2V0dGluZ3Muc3RvcmUpW1wiYmVzdGJ1eVwiXVtcInJlcGxhY2VRdWV1ZVwiXSA9PT0gdHJ1ZSAmJiBPYmplY3Qua2V5cyhleGlzdGluZ1F1ZXVlcykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUGVyZm9ybSByZXBsYWNlbWVudCBhbmQgY2hlY2sgd2hldGhlciBuZXcgcXVldWUgaW1wcm92ZWRcclxuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nUXVldWVzIHVwZGF0ZWQgd2l0aGluIHVwZGF0ZVJlcGxhY2VRdWV1ZXMgd2hlbiByYW5cclxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBleGlzdGluZ1F1ZXVlcyBoYXMgdG8gYmUgcmUtc2V0IGJlY2F1c2Ugbm8gcGFzcyBieSB2YWx1ZSBiZXR3ZWVuIGZpbGVzXHJcbiAgICAgICAgICAgICAgICBsZXQgc2hvcnRlcjtcclxuICAgICAgICAgICAgICAgIGxldCBkaWZmTWludXRlcztcclxuICAgICAgICAgICAgICAgIGxldCBkaWZmU2Vjb25kcztcclxuICAgICAgICAgICAgICAgIChbZXhpc3RpbmdRdWV1ZXMsIHNob3J0ZXIsIGRpZmZNaW51dGVzLCBkaWZmU2Vjb25kc10gPSB1cGRhdGVSZXBsYWNlUXVldWVzKGV4aXN0aW5nUXVldWVzLCBxdWV1ZURhdGEsIHN0YXJ0VGltZSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3J0ZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDdXJyZW50IHF1ZXVlIGhhcyBpbXByb3ZlbWVudCwgc2hvdyBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYFske3Byb2R1Y3ROYW1lfV0gUXVldWUgcmVwbGFjZW1lbnQgZW5hYmxlZCwgcmVwbGFjaW5nIHdpdGggJHtkaWZmTWludXRlc31tICR7ZGlmZlNlY29uZHN9cyBpbXByb3ZlbWVudGA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBpbXByb3ZlbWVudCwgY2xlYXIgc3RyYWdnbGVycyBhbmQgc2hvdyBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYFske3Byb2R1Y3ROYW1lfV0gUXVldWUgcmVwbGFjZW1lbnQgZW5hYmxlZCwgbm90IHJlcGxhY2luZyBiZWNhdXNlICR7ZGlmZk1pbnV0ZXN9bSAke2RpZmZTZWNvbmRzfXMgd29yc2VgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBbJHtwcm9kdWN0TmFtZX1dIEludGVyY2VwdGVkIG5ldyBxdWV1ZSB3aXRoIHRpbWVyICR7bWludXRlc31tICR7c2Vjb25kc31zYDtcclxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgcGVyZm9ybSByZWd1bGFyIFwiYXBwZW5kaW5nXCIgdG8gcXVldWVzXHJcbiAgICAgICAgICAgICAgICBleGlzdGluZ1F1ZXVlc1thMmNUcmFuc2FjdGlvblJlZmVyZW5jZUlkXSA9IHF1ZXVlRGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiZXN0QnV5UXVldWVzLnNldChza3UsIGV4aXN0aW5nUXVldWVzKTtcclxuICAgICAgICAgICAgLy8gQ29uc3RydWN0IGZvciBzZW5kaW5nIG5vdGlmaWNhdGlvbiB3aXRoIHNvdW5kXHJcbiAgICAgICAgICAgIC8vIENhbid0IGF3YWl0IHNvdW5kTm90aWZpY2F0aW9uIGJlY2F1c2UgYXN5bmMgbm90IGFsbG93ZWQ/XHJcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gXCJCZXN0IEJ1eSAtIFF1ZXVlIEludGVyY2VwdGVkXCI7XHJcbiAgICAgICAgICAgIHNvdW5kTm90aWZpY2F0aW9uKFwicXVldWVcIiwgdGl0bGUsIG1lc3NhZ2UsIFtcImJlc3RidXlcIiwgXCJub3RpZmljYXRpb25RdWV1ZVwiXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERlbGV0ZSBjYWNoZWQgYm9keSB3aXRoIHJlcXVlc3QgSUQgdG8gcHJldmVudCBtZW1vcnkgbGVha3NcclxuICAgICAgICBkZWxldGUgcmVxdWVzdEJvZHlDYWNoZVtkZXRhaWxzLnJlcXVlc3RJZF07XHJcbiAgICB9LCB7IHVybHM6IFtcIio6Ly8qLmJlc3RidXkuY29tL2NhcnQvYXBpL3YxL2FkZFRvQ2FydFwiXSB9LCBbXCJyZXNwb25zZUhlYWRlcnNcIiwgXCJibG9ja2luZ1wiXSk7XHJcbn1cclxuLy8gVXBkYXRlIGFuZCByZXBsYWNlIHF1ZXVlcyBmb3IgZ2l2ZW4gZXhpc3RpbmcgcXVldWVzLCBrZWVwaW5nIHRoZSBzaG9ydGVzdFxyXG5mdW5jdGlvbiB1cGRhdGVSZXBsYWNlUXVldWVzKGV4aXN0aW5nUXVldWVzLCBuZXdRdWV1ZURhdGEsIGN1cnJlbnRUaW1lKSB7XHJcbiAgICAvLyBEZWNvbnN0cnVjdCBjdXJyZW50IHF1ZXVlcyBpbnRvIHJlbWFpbmluZyB0aW1lXHJcbiAgICBjb25zdCBleGlzdGluZ1F1ZXVlc01hcHBlZCA9IE9iamVjdC5lbnRyaWVzKGV4aXN0aW5nUXVldWVzKVxyXG4gICAgICAgIC5tYXAoKFtxdWV1ZUtleSwgcXVldWVEYXRhXSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ1RpbWUgPSBxdWV1ZURhdGEuc3RhcnRUaW1lICsgcXVldWVEYXRhLnF1ZXVlVGltZSAtIGN1cnJlbnRUaW1lO1xyXG4gICAgICAgIHJldHVybiBbcmVtYWluaW5nVGltZSwgcXVldWVLZXksIHF1ZXVlRGF0YV07XHJcbiAgICB9KTsgLy8gW3JlbWFpbmluZywgcXVldWVLZXksIHF1ZXVlRGF0YV1cclxuICAgIC8vIFNvcnQgYmVmb3JlIGFkZGluZyBuZXcgcXVldWUsIGluZWZmaWNpZW50IEkga25vd1xyXG4gICAgZXhpc3RpbmdRdWV1ZXNNYXBwZWQuc29ydCgocXVldWUxLCBxdWV1ZTIpID0+IHsgcmV0dXJuIHF1ZXVlMVswXSAtIHF1ZXVlMlswXTsgfSk7XHJcbiAgICBjb25zdCBwcmV2aW91c0Jlc3RSZW1haW5pbmcgPSBleGlzdGluZ1F1ZXVlc01hcHBlZFswXVswXTtcclxuICAgIC8vIENoZWNrIHdoZXRoZXIgcHJldmlvdXMgcXVldWUgdGltZShzKSBhcmUgc2hvcnRlciBcclxuICAgIGNvbnN0IG5ld1F1ZXVlS2V5ID0gbmV3UXVldWVEYXRhLmEyY1RyYW5zYWN0aW9uUmVmZXJlbmNlSWQ7XHJcbiAgICBjb25zdCBuZXdSZW1haW5pbmcgPSBuZXdRdWV1ZURhdGEuc3RhcnRUaW1lICsgbmV3UXVldWVEYXRhLnF1ZXVlVGltZSAtIGN1cnJlbnRUaW1lO1xyXG4gICAgZXhpc3RpbmdRdWV1ZXNNYXBwZWQucHVzaChbbmV3UmVtYWluaW5nLCBuZXdRdWV1ZUtleSwgbmV3UXVldWVEYXRhXSk7XHJcbiAgICAvLyBTb3J0IGFuZCBjaGVjayB3aGV0aGVyIElEIG9mIGZpcnN0IGluZGV4IHN3aXRjaGVzIHRvIG5ld1xyXG4gICAgZXhpc3RpbmdRdWV1ZXNNYXBwZWQuc29ydCgocXVldWUxLCBxdWV1ZTIpID0+IHsgcmV0dXJuIHF1ZXVlMVswXSAtIHF1ZXVlMlswXTsgfSk7XHJcbiAgICBjb25zdCBbZGlmZk1pbnV0ZXMsIGRpZmZTZWNvbmRzLCBkaWZmTmVnYXRpdmVdID0gbWludXRlc1NlY29uZHMocHJldmlvdXNCZXN0UmVtYWluaW5nIC0gbmV3UmVtYWluaW5nLCB0cnVlKTtcclxuICAgIGNvbnN0IHNob3J0ZXIgPSBleGlzdGluZ1F1ZXVlc01hcHBlZFswXVsxXSA9PT0gbmV3UXVldWVEYXRhLmEyY1RyYW5zYWN0aW9uUmVmZXJlbmNlSWQ7XHJcbiAgICAvLyBUcmltIGV2ZXJ5dGhpbmcgYnV0IHRoZSBzaG9ydGVzdCBxdWV1ZVxyXG4gICAgZXhpc3RpbmdRdWV1ZXMgPSB7fTtcclxuICAgIGNvbnN0IHNob3J0ZXN0UXVldWUgPSBleGlzdGluZ1F1ZXVlc01hcHBlZFswXTtcclxuICAgIGV4aXN0aW5nUXVldWVzW3Nob3J0ZXN0UXVldWVbMV1dID0gc2hvcnRlc3RRdWV1ZVsyXTtcclxuICAgIHJldHVybiBbZXhpc3RpbmdRdWV1ZXMsIHNob3J0ZXIsIGRpZmZNaW51dGVzLCBkaWZmU2Vjb25kc107XHJcbn1cclxuLy8gTWVyZ2UgcHJvZHVjdCBxdWV1ZXMgcmV0cmlldmVkIGZyb20gcGFnZSB3aXRoIGN1cnJlbnRseSB0cmFja2VkIHF1ZXVlc1xyXG4vLyBFaXRoZXIgYXBwZW5kIG9yIG1lcmdlIHRvIGtlZXAgc2hvcnRlc3QgZGVwZW5kaW5nIG9uIHNldHRpbmdcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1lcmdlUHJvZHVjdFF1ZXVlcyhtZXJnZVF1ZXVlRGF0YSkge1xyXG4gICAgLy8gSXRlcmF0ZSBvdmVyIGJyb3dzZXIgcXVldWUgZm9yIGVhY2ggU0tVLCBtZXJnaW5nIHVuc2VlbiB3aXRoIGN1cnJlbnRseSB0cmFja2VkXHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOyAvLyBJbiBtaWxsaXNlY29uZHMgZnJvbSBlcG9jaFxyXG4gICAgZm9yIChjb25zdCBbc2t1LCBza3VRdWV1ZURhdGFdIG9mIE9iamVjdC5lbnRyaWVzKG1lcmdlUXVldWVEYXRhKSkge1xyXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgcXVldWUgd2l0aCBnaXZlbiBJRCBpcyBiZWluZyB0cmFja2VkXHJcbiAgICAgICAgbGV0IGV4aXN0aW5nUXVldWVzID0gZ2V0KGJlc3RCdXlRdWV1ZXMuc3RvcmUpW3NrdV0gfHwge307XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nUXVldWVzW3NrdVF1ZXVlRGF0YVsxXV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBEZWNvZGUgcXVldWUgYW5kIHJlbWFpbmluZyB0aW1lIGZyb20gZGF0YVxyXG4gICAgICAgICAgICBjb25zdCBbc3RhcnRUaW1lLCBhMmNUcmFuc2FjdGlvblJlZmVyZW5jZUlkLCBhMmNUcmFuc2FjdGlvbkNvZGVdID0gc2t1UXVldWVEYXRhO1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZVRpbWUgPSBiZXN0QnV5RGVjb2RlUXVldWUoc2t1UXVldWVEYXRhWzFdKTtcclxuICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nVGltZSA9IHN0YXJ0VGltZSArIHF1ZXVlVGltZSAtIGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBbcmVtYWluaW5nTWludXRlcywgcmVtYWluaW5nU2Vjb25kcywgbmVnYXRpdmVdID0gbWludXRlc1NlY29uZHMocmVtYWluaW5nVGltZSk7XHJcbiAgICAgICAgICAgIC8vIERvbid0IGJvdGhlciBhZGRpbmcgaWYgcXVldWUgYWxyZWFkeSBleHBpcmVkXHJcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdUaW1lID4gLTUgKiA2MCAqIDEwMDApIHtcclxuICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdCBhbmQgc3RvcmUgcXVldWUgZGF0YSBmb3IgZ2l2ZW4gU0tVLCB0aGVuIGFwcGVuZCBvciByZXBsYWNlIGV4aXN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBleGlzdGluZ1F1ZXVlcyB1cGRhdGVkIHdpdGhpbiB1cGRhdGVSZXBsYWNlUXVldWVzIHdoZW4gcmFuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBxdWV1ZURhdGEgPSB7IHN0YXJ0VGltZSwgYTJjVHJhbnNhY3Rpb25SZWZlcmVuY2VJZCwgYTJjVHJhbnNhY3Rpb25Db2RlLCBxdWV1ZVRpbWUgfTtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIEJlc3QgQnV5IHNldHRpbmcgdG8gc2VlIHdoZXRoZXIgcmVwbGFjZW1lbnQgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0KHNldHRpbmdzLnN0b3JlKVtcImJlc3RidXlcIl1bXCJyZXBsYWNlUXVldWVcIl0gPT09IHRydWUgJiYgT2JqZWN0LmtleXMoZXhpc3RpbmdRdWV1ZXMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIHVwZGF0ZSBhbmQgcmVwbGFjZW1lbnQgd2l0aCBpbXBvcnQgcXVldWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc2hvcnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGlmZk1pbnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpZmZTZWNvbmRzO1xyXG4gICAgICAgICAgICAgICAgICAgIChbZXhpc3RpbmdRdWV1ZXMsIHNob3J0ZXIsIGRpZmZNaW51dGVzLCBkaWZmU2Vjb25kc10gPSB1cGRhdGVSZXBsYWNlUXVldWVzKGV4aXN0aW5nUXVldWVzLCBxdWV1ZURhdGEsIHN0YXJ0VGltZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG9ydGVyID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEltcG9ydGVkIHF1ZXVlIGltcHJvdmVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYEltcG9ydGluZyBxdWV1ZSBmb3IgU0tVICR7c2t1fSBoYXMgJHtkaWZmTWludXRlc31tICR7ZGlmZlNlY29uZHN9cyBpbXByb3ZlbWVudCwgcmVwbGFjaW5nYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JzZSBpbXBvcnRlZCBxdWV1ZSwgZG9uJ3QgcmVwbGFjZSBhbmQgaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYEltcG9ydGluZyBxdWV1ZSBmb3IgU0tVICR7c2t1fSB3b3JzZSBieSAke2RpZmZNaW51dGVzfW0gJHtkaWZmU2Vjb25kc31zIGltcHJvdmVtZW50LCBub3QgcmVwbGFjaW5nYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSByZWd1bGFyIGFwcGVuZGluZyB0byBleGlzdGluZyBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ2F0aXZlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBRdWV1ZSBoYXNuJ3QgcG9wcGVkIHlldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBJbXBvcnRpbmcgcXVldWUgZm9yIFNLVSAke3NrdX0gd2l0aCAke3JlbWFpbmluZ01pbnV0ZXN9bSAke3JlbWFpbmluZ1NlY29uZHN9cyByZW1haW5pbmdgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1ZXVlIGFscmVhZHkgcG9wcGVkIGJ1dCBoYXNuJ3QgZXhwaXJlZCB5ZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgSW1wb3J0aW5nIHF1ZXVlIGZvciBTS1UgJHtza3V9IGFscmVhZHkgcG9wcGVkIGZvciAke3JlbWFpbmluZ01pbnV0ZXN9bSAke3JlbWFpbmluZ1NlY29uZHN9c2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJlc3RCdXlRdWV1ZXMuc2V0KHNrdSwgZXhpc3RpbmdRdWV1ZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIFdyYXBwZXIgZm9yIHByb2Nlc3NpbmcgYWRkLXRvLWNhcnQgYnkgYnJvYWRjYXN0aW5nIHRvIHN0cmVhbWxpbmUgaGFuZGxlclxyXG4vLyBEZXBlbmRpbmcgb24gc2V0dGluZ3MgYW5kIHJlc3VsdCBzdGF0dXMsIHBsYXlzIHNvdW5kIGFuZCBzaG93cyBub3RpZmljYXRpb25zXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzQWRkVG9DYXJ0KHNrdSwgYTJjVHJhbnNhY3Rpb25SZWZlcmVuY2VJZCwgYTJjVHJhbnNhY3Rpb25Db2RlKSB7XHJcbiAgICAvLyBDb25zdHJ1Y3QgcmVxdWVzdCBmb3IgYnJvYWRjYXN0aW5nIHRvIHN0cmVhbWxpbmVkXHJcbiAgICBjb25zdCBzeW5jUmVxdWVzdCA9IHtcclxuICAgICAgICBoYW5kbGVyOiBcImNvbnRlbnQtYWRkX3RvX2NhcnRcIixcclxuICAgICAgICBhcmdzOiBbc2t1LCBhMmNUcmFuc2FjdGlvblJlZmVyZW5jZUlkLCBhMmNUcmFuc2FjdGlvbkNvZGVdLFxyXG4gICAgfTtcclxuICAgIC8vIEtlZXAgYnJvYWRjYXN0aW5nIHJlcXVlc3QgdW50aWwgcmVzcG9uc2UgZ290dGVuXHJcbiAgICBsZXQgcHJvY2Vzc0FkZFN0YXR1cztcclxuICAgIGRvIHtcclxuICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIFwiQnJvYWRjYXN0aW5nIHNvb24tcXVldWVkIHN5bmNocm9ub3VzIGFkZC10by1jYXJ0IHJlcXVlc3RcIik7XHJcbiAgICAgICAgbGV0IHByb2Nlc3NBZGRSZXNwb25zZSA9IGF3YWl0IGFkZFN5bmNSZXF1ZXN0KHN5bmNSZXF1ZXN0LCBcImJlc3RidXlcIik7XHJcbiAgICAgICAgaWYgKHByb2Nlc3NBZGRSZXNwb25zZS5yZXN1bHQgPT09IFwiZXJyb3JcIikge1xyXG4gICAgICAgICAgICAvLyBFcnJvciBwZXJmb3JtaW5nIHJlcXVlc3QgdG8gYmFja2dyb3VuZCwgc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBFcnJvciBwZXJmb3JtaW5nIHN0cmVhbWxpbmVkIGFkZC10by1jYXJ0IHJlcXVlc3Q6ICR7cHJvY2Vzc0FkZFJlc3BvbnNlLnBheWxvYWR9YCk7XHJcbiAgICAgICAgICAgIHJldHVybjsgLy8gQWRkIG90aGVyIGhhbmRsZXIgZXZlbnR1YWxseVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm9jZXNzQWRkUmVzcG9uc2UucmVzdWx0ID09PSBcIm5vdC1mb3VuZFwiKSB7IC8vIEZhaWxlZCB0byBjb21tdW5pY2F0ZSB3aXRoIGJhY2tncm91bmRcclxuICAgICAgICAgICAgLy8gQ2hlY2sgcmVsZXZhbnQgZ2xvYmFsIHNldHRpbmcgZm9yIGFjdGlvblxyXG4gICAgICAgICAgICBpZiAoZ2V0KHNldHRpbmdzLnN0b3JlKVtcImdsb2JhbFwiXVtcImF1dG9PcGVuVGFiXCJdID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBNYXRjaGluZyB0YWIgbm90IGZvdW5kLCBjcmVhdGluZyBuZXcgdGFiIHdpdGggdXJsICR7YmVzdEJ1eVRhYlVSTH1gKTtcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBtYXRjaGluZyB0YWIgYW5kIGlkbGUgdW50aWwgcmVhZHlcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNyZWF0ZVRhYlJlYWR5KGJlc3RCdXlUYWJVUkwpO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgVGFiIGNyZWF0aW9uIGZpbmlzaGVkLCByZS1icm9hZGNhc3RpbmcgaW5pdGlhbCByZXF1ZXN0YCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYE1hdGNoaW5nIHRhYiBub3QgZm91bmQsIHNob3dpbmcgbm90aWZpY2F0aW9uIGFuZCBleGl0aW5nYCk7XHJcbiAgICAgICAgICAgICAgICAvLyBQbGF5IHNvdW5kIG5vdGlmaWNhdGlvbiB3aXRoIGdpdmVuIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25JZCA9IGF3YWl0IHNvdW5kTm90aWZpY2F0aW9uKFwiZXJyb3JcIiwgXCJCZXN0IEJ1eSAtIFRhYiBOb3QgRm91bmRcIiwgXCJNYXRjaGluZyB0YWIgbm90IGZvdW5kIG9yIGNvbnRlbnQgc2NyaXB0IG5vdCByZXNwb25kaW5nLiBPcGVuIGEgbWF0Y2hpbmcgdGFiIG9yIHRyeSByZWxvYWRpbmcgdGhlIHBhZ2UuXCIsIFtcImdsb2JhbFwiLCBcIm5vdGlmaWNhdGlvbk5vdEZvdW5kXCJdKTtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaCBvbmNsaWNrIGhhbmRsZXIgdG8gb3BlbiBtYXRjaGluZyB0YWIgd2hlbiBub3RpZmljYXRpb24gYnV0dG9uIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgIC8vIEFyZSB0aGVyZSBpc3N1ZXMgd2l0aCBtZW1vcnkgbGVha3Mgd2hlbiBsaXN0ZW5lcnMgYXJlIGFkZGVkP1xyXG4gICAgICAgICAgICAgICAgYnJvd3Nlci5ub3RpZmljYXRpb25zLm9uQnV0dG9uQ2xpY2tlZC5hZGRMaXN0ZW5lcihhc3luYyBmdW5jdGlvbiAoY2xpY2tlZElkLCBidXR0b25JbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDAgaW5kZXggbWVhbnMgb3BlbiBjYXJ0IHBhZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tlZElkID09PSBub3RpZmljYXRpb25JZCAmJiBidXR0b25JbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGFiIGJ1dCBkb24ndCB3YXN0ZSB3YWl0aW5nIHRvIGxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY3JlYXRlVGFiUmVhZHkoYmVzdEJ1eVRhYlVSTCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE9ubHkgcmVtYWluaW5nIHJlc3VsdCBwb3NzaWJpbGl0eSBpcyBva1xyXG4gICAgICAgIHByb2Nlc3NBZGRTdGF0dXMgPSBwcm9jZXNzQWRkUmVzcG9uc2UucGF5bG9hZC52YWx1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgIH0gd2hpbGUgKHRydWUpOyAvLyBLZWVwIGxvb3BpbmcsIHVzdWFsbHkgb25seSByZXF1aXJlcyBzaW5nbGUgaXRlcmF0aW9uXHJcbiAgICAvLyBTaG93IG5vdGlmaWNhdGlvbiBhbmQgcGxheSBzb3VuZCBkZXBlbmRpbmcgb24gc3RhdHVzIGFuZCBzZXR0aW5ncyAgICAgICAgICAgIFxyXG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXMgaW4gYWR2YW5jZSB0byBwcmV2ZW50IGhhcmQtY29kaW5nP1xyXG4gICAgLy8gVE9ETyBzdHJlYW1saW5lIGNhbGxiYWNrcyBhbmQgc2VuZGluZyB1bmRlciBpZi9lbHNlIHN0YXRlbWVudHNcclxuICAgIGNvbnN0IHByb2R1Y3ROYW1lID0gYmVzdEJ1eURpc3BsYXlzW3NrdV07XHJcbiAgICAvLyBIYW5kbGVyIHJhbiBva2F5LCBwZWZvcm0gZGVmYXVsdCBhY3Rpb25zXHJcbiAgICBpZiAocHJvY2Vzc0FkZFN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgLy8gU3VjY2Vzc2Z1bGx5IGNhcnRlZCAobWlnaHQgbm90IHNob3cgaW4gY2FydCB0aG91Z2gpXHJcbiAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgU3VjY2Vzc2Z1bGx5IGFkZGVkICR7cHJvZHVjdE5hbWV9IHRvIGNhcnRgKTtcclxuICAgICAgICAvLyBQbGF5IHNvdW5kIG5vdGlmaWNhdGlvbiB3aXRoIGdpdmVuIGluZm9ybWF0aW9uXHJcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uSWQgPSBhd2FpdCBzb3VuZE5vdGlmaWNhdGlvbihcInN1Y2Nlc3NcIiwgXCJCZXN0IEJ1eSAtIFN1Y2Nlc3NmdWwgQ2FydFwiLCBwcm9kdWN0TmFtZSwgW1wiYmVzdGJ1eVwiLCBcIm5vdGlmaWNhdGlvblN1Y2Nlc3NcIl0sIFtcIkdvIHRvIENhcnQgUGFnZVwiXSk7XHJcbiAgICAgICAgLy8gQXR0YWNoIG9uY2xpY2sgaGFuZGxlciB0byBvcGVuIGNhcnQgdGFiIHdoZW4gbm90aWZpY2F0aW9uIGJ1dHRvbiBjbGlja2VkXHJcbiAgICAgICAgLy8gQXJlIHRoZXJlIGlzc3VlcyB3aXRoIG1lbW9yeSBsZWFrcyB3aGVuIGxpc3RlbmVycyBhcmUgYWRkZWQ/XHJcbiAgICAgICAgYnJvd3Nlci5ub3RpZmljYXRpb25zLm9uQnV0dG9uQ2xpY2tlZC5hZGRMaXN0ZW5lcihhc3luYyBmdW5jdGlvbiAoY2xpY2tlZElkLCBidXR0b25JbmRleCkge1xyXG4gICAgICAgICAgICAvLyAwIGluZGV4IG1lYW5zIG9wZW4gY2FydCBwYWdlXHJcbiAgICAgICAgICAgIGlmIChjbGlja2VkSWQgPT09IG5vdGlmaWNhdGlvbklkICYmIGJ1dHRvbkluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGFiIGJ1dCBkb24ndCB3YXN0ZSB3YWl0aW5nIHRvIGxvYWRcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNyZWF0ZVRhYlJlYWR5KGJlc3RCdXlDYXJ0VVJMLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByb2Nlc3NBZGRTdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgIC8vIEZhaWxlZCB0byBjYXJ0IChlaXRoZXIgaW52YWxpZCBxdWV1ZSBvciBub3QgYXZpYWxhYmxlKVxyXG4gICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYEZhaWxlZCB0byBjYXJ0ICR7cHJvZHVjdE5hbWV9LCBlaXRoZXIgaW52YWlsZCBxdWV1ZSBvciB1bmF2YWlsYWJsZWApO1xyXG4gICAgICAgIC8vIFBsYXkgc291bmQgbm90aWZpY2F0aW9uIHdpdGggZ2l2ZW4gaW5mb3JtYXRpb25cclxuICAgICAgICBhd2FpdCBzb3VuZE5vdGlmaWNhdGlvbihcImZhaWx1cmVcIiwgXCJCZXN0IEJ1eSAtIEZhaWxlZCB0byBDYXJ0XCIsIHByb2R1Y3ROYW1lLCBbXCJiZXN0YnV5XCIsIFwibm90aWZpY2F0aW9uRmFpbHVyZVwiXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBTZXJ2ZXIgZXJyb3IgKDUwMCByYXRlIGxpbWl0LCA0MDMgcmF0ZSBsaW1pdCBvciB1bmNhcnRhYmxlKVxyXG4gICAgICAgIC8vIENhbid0IHJlbG9hZCB0YWIgZnJvbSBub3RpZmljYXRpb24gYnV0dG9uIGJlY2F1c2UgdGFiIElEIG5vdCByZXR1cm5lZCwgVE9ETz9cclxuICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBFcnJvciBjYXJ0aW5nICR7cHJvZHVjdE5hbWV9IHdpdGggc3RhdHVzICR7c3RhdHVzfWApO1xyXG4gICAgICAgIC8vIENvbnN0cnVjdCBjdXN0b20gbWVzc2FnZSBmb3IgZXJyb3JcclxuICAgICAgICBsZXQgbWVzc2FnZTtcclxuICAgICAgICBpZiAoZ2V0KHNldHRpbmdzLnN0b3JlKVtcImJlc3RidXlcIl1bXCJhdXRvUmVsb2FkXCJdID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgY2FydGluZyAke3Byb2R1Y3ROYW1lfSAtIHBvc3NpYmxlIHJhdGUgbGltaXRpbmcsIGF1dG9tYXRpY2FsbHkgcmVsb2FkaW5nIHRhYiBhbmQgcmV0cnlpbmcgcmVxdWVzdGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIGNhcnRpbmcgJHtwcm9kdWN0TmFtZX0gLSBwb3NzaWJsZSByYXRlIGxpbWl0aW5nLCBub3QgYXV0b21hdGljYWxseSByZWxvYWRpbmcgdGFiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUGxheSBzb3VuZCBub3RpZmljYXRpb24gd2l0aCBnaXZlbiBpbmZvcm1hdGlvblxyXG4gICAgICAgIGF3YWl0IHNvdW5kTm90aWZpY2F0aW9uKFwiZXJyb3JcIiwgYEJlc3QgQnV5IC0gRXJyb3IgJHtzdGF0dXN9YCwgbWVzc2FnZSwgW1wiYmVzdGJ1eVwiLCBcIm5vdGlmaWNhdGlvbkVycm9yXCJdKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBnZXQgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XHJcbmltcG9ydCB7IHNldHRpbmdzRGlzcGxheXMgfSBmcm9tIFwiLi4vc2hhcmVkL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBkb21haW5NYXRjaGVzLCBwaW5nUmVxdWVzdCB9IGZyb20gXCIuLi9zaGFyZWQvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSBcIi4uL3NoYXJlZC9pbml0aWFsaXphdGlvbnNcIjtcclxuaW1wb3J0IHsgZXh0ZW5zaW9uTG9nLCBwaW5nVGFiUmVhZHksIHNlbmRSZXF1ZXN0Q29udGVudCwgc2xlZXAgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxpdGllc1wiO1xyXG5jb25zdCBsb2dnaW5nU2VsZiA9IFwiYmFja2dyb3VuZF9tYWluXCI7XHJcbmxldCBub3RpZmljYXRpb25zID0ge1xyXG4gICAgXCJzdWNjZXNzXCI6IFwiLi4vcmVzb3VyY2VzL25vdGlmaWNhdGlvbl9zdWNjZXNzLm1wM1wiLFxyXG4gICAgXCJmYWlsdXJlXCI6IFwiLi4vcmVzb3VyY2VzL25vdGlmaWNhdGlvbl9xdWV1ZS5tcDNcIixcclxuICAgIFwiZXJyb3JcIjogXCIuLi9yZXNvdXJjZXMvbm90aWZpY2F0aW9uX3JhdGVsaW1pdC5tcDNcIixcclxuICAgIC8vIEJlc3QgQnV5XHJcbiAgICBcInF1ZXVlXCI6IFwiLi4vcmVzb3VyY2VzL25vdGlmaWNhdGlvbl9xdWV1ZS5tcDNcIixcclxufTsgLy8gTm90aWZpY2F0aW9uIHNvdW5kIGZpbGUgcGF0aHNcclxubGV0IHF1ZXVlZFJlcXVlc3RzID0gW107XHJcbmxldCBleGVjdXRpbmcgPSBmYWxzZTsgLy8gV2hldGhlciBleGVjdXRpb24gaXMgY3VycmVudGx5IGhhcHBlbmluZ1xyXG4vLyBNZXJnZSBjdXJyZW50bHkgc3RvcmVkIHNldHRpbmdzIHdpdGggcG9zc2libHkgbmV3IG9yIGNoYW5nZWQgZXh0ZW5zaW9uIHZhbHVlcyBcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1lcmdlU2V0dGluZ3MoKSB7XHJcbiAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIFwiTWVyZ2luZyBzdG9yZWQgc2V0dGluZ3Mgd2l0aCBleHRlbnNpb24gZGlzcGxheSB2YWx1ZXNcIik7XHJcbiAgICAvLyBTb3VyY2Ugb2YgdHJ1dGg6IG1lcmdlIHNldHRpbmdzIHdpdGggZGVmYXVsdHMgYW5kIHBvc3NpYmx5IG5ld2x5IGFkZGVkXHJcbiAgICAvLyBEb2Vzbid0IGN1cnJlbnRseSBkZWxldGUgb2Jzb2xldGUgc2V0dGluZ3MgYnV0IHdoYXRldmVyIGhvbmVzdGx5XHJcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeUtleSwgY2F0ZWdvcnlEYXRhXSBvZiBPYmplY3QuZW50cmllcyhzZXR0aW5nc0Rpc3BsYXlzKSkge1xyXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHNldHRpbmdzIGNhdGVnb3J5IGV4aXN0c1xyXG4gICAgICAgIGNvbnN0IHN0b3JlZENhdGVnb3J5U2V0dGluZ3MgPSBnZXQoc2V0dGluZ3Muc3RvcmUpW2NhdGVnb3J5S2V5XTtcclxuICAgICAgICBpZiAoc3RvcmVkQ2F0ZWdvcnlTZXR0aW5ncyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIENhdGVnb3J5IGV4aXN0cywgaXRlcmF0ZSBvdmVyIGFuZCBtZXJnZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICBsZXQgY2F0ZWdvcnlNb2RpZmllZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtzZXR0aW5nS2V5LCBzZXR0aW5nRGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoY2F0ZWdvcnlEYXRhLnNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB3aXRoIGRlZmF1bHQgaWYgc2V0dGluZyBkb2Vzbid0IGV4aXN0IG9yIGlzIHdyb25nIHR5cGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlZFNldHRpbmdWYWx1ZSA9IHN0b3JlZENhdGVnb3J5U2V0dGluZ3Nbc2V0dGluZ0tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmVkU2V0dGluZ1ZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHN0b3JlZFNldHRpbmdWYWx1ZSAhPT0gdHlwZW9mIHNldHRpbmdEYXRhLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBOb24tbWF0Y2hpbmcgc2V0dGluZ3MgWyR7Y2F0ZWdvcnlLZXl9XVske3NldHRpbmdLZXl9XSwgbWVyZ2luZ2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlZENhdGVnb3J5U2V0dGluZ3Nbc2V0dGluZ0tleV0gPSBzZXR0aW5nRGF0YS5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5TW9kaWZpZWQgPSB0cnVlOyAvLyBGbGFnIGZvciBzZXR0ZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJbnZva2Ugc2V0dGVyIGlmIGNhdGVnb3J5IHNldHRpbmdzIGhhdmUgYmVlbiBtb2RpZmllZFxyXG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnlNb2RpZmllZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3Muc2V0KGNhdGVnb3J5S2V5LCBzdG9yZWRDYXRlZ29yeVNldHRpbmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgU3RvcmVkIHNldHRpbmdzIGNhdGVnb3J5IFske2NhdGVnb3J5S2V5fV0gbm90IGZvdW5kLCBpbml0aWFsaXppbmdgKTtcclxuICAgICAgICAgICAgLy8gQ2F0ZWdvcnkgZG9lc24ndCBleGlzdCwgcG9wdWxhdGUgd2l0aCBkZWZhdWx0IHNldHRpbmdzXHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRDYXRlZ29yeVNldHRpbmdzID0gT2JqZWN0LmVudHJpZXMoY2F0ZWdvcnlEYXRhLnNldHRpbmdzKS5yZWR1Y2UoKG9iaiwgW3NldHRpbmdLZXksIHNldHRpbmdEYXRhXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb2JqW3NldHRpbmdLZXldID0gc2V0dGluZ0RhdGEuZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgc2V0dGluZ3Muc2V0KGNhdGVnb3J5S2V5LCBkZWZhdWx0Q2F0ZWdvcnlTZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIEV4ZWN1dGUgcXVldWVkIHJlcXVlc3RzIHN5bmMgb24gc3RpbXVsdXMgZnJvbSBtZXNzYWdlIGhhbmRsZXJcclxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybVN5bmNSZXF1ZXN0cygpIHtcclxuICAgIC8vIE9ubHkgd2FudCBvbmUgaW5zdGFuY2UgcnVubmluZyBhdCBhIHRpbWUsIHVzZSBwc2V1ZG8tbG9ja1xyXG4gICAgaWYgKGV4ZWN1dGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGV4ZWN1dGluZyA9IHRydWU7IC8vIExvY2sgcnVubmluZyBpbnN0YW5jZVxyXG4gICAgLy8gSW4gY2FzZSBvZiBjcml0aWNhbCBlcnJvciwgc3RpbGwgYmUgYWJsZSB0byBjYW5jZWwgZXhlY3V0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIFBlcmZvcm0gcXVldWVkIHJlcXVlc3RzIHN5bmMgd2hpbGUgdGhleSBleGlzdCwgYW5kIHJlc29sdmUgZWFjaFxyXG4gICAgICAgIHdoaWxlIChxdWV1ZWRSZXF1ZXN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcXVldWVkIHJlcXVlc3QgYW5kIGRlZmF1bHQgcmVzcG9uc2UgZm9yIGdpdmVuIHJlcXVlc3RcclxuICAgICAgICAgICAgY29uc3QgcXVldWVkUmVxdWVzdCA9IHF1ZXVlZFJlcXVlc3RzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlZFJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBcIm5vdC1mb3VuZFwiLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZTogW10sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkUmVxdWVzdCA9IEpTT04uc3RyaW5naWZ5KHF1ZXVlZFJlcXVlc3QpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBFeGVjdXRpbmcgcXVldWVkIHNlcXVlbnRpYWwgcmVxdWVzdCB3aXRoIGJvZHkgJHtzZXJpYWxpemVkUmVxdWVzdH1gKTtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0YWJzIG1hdGNoaW5nIGdpdmVuIFVSTCBtYXRjaCBleGlzdFxyXG4gICAgICAgICAgICBjb25zdCB1cmxHbG9iID0gZG9tYWluTWF0Y2hlc1txdWV1ZWRSZXF1ZXN0ID09PSBudWxsIHx8IHF1ZXVlZFJlcXVlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHF1ZXVlZFJlcXVlc3QudXJsTWF0Y2hdO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ1RhYnMgPSBhd2FpdCBicm93c2VyLnRhYnMucXVlcnkoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBkb21haW5NYXRjaGVzW3F1ZXVlZFJlcXVlc3QgPT09IG51bGwgfHwgcXVldWVkUmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcXVldWVkUmVxdWVzdC51cmxNYXRjaF0sXHJcbiAgICAgICAgICAgICAgICBkaXNjYXJkZWQ6IGZhbHNlLCAvLyBDYW4ndCBjb21tdW5pY2F0ZSB3aXRoIHVubG9hZGVkIHRhYlxyXG4gICAgICAgICAgICAgICAgLy8gc3RhdHVzOiBcImxvYWRpbmdcIiAvLyBDYW4ndCBjb21tdW5pY2F0ZSB3aXRoIGxvYWRpbmcgdGFiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdUYWJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgQ291bGRuJ3QgZmluZCBtYXRjaGluZyBicm93c2VyIHRhYnMgd2l0aCBVUkwgZ2xvYiAke3VybEdsb2J9LCByZXNvbHZpbmcgd2l0aCBub3QtZm91bmQgcmVzcG9uc2VgKTtcclxuICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gZXhlY3V0aW9uIGRlcGVuZGluZyBvbiBzZXR0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCByZXNvbHZlIHdpdGggdW5kZWZpbmVkIGJ1dCBtYXliZSBvcGVuIHRhYj9cclxuICAgICAgICAgICAgICAgIHF1ZXVlZFJlcXVlc3QucmVzb2x2ZShxdWV1ZWRSZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRhYnMgYW5kIGF0dGVtcHQgY29tbXVuaWNhdGlvblxyXG4gICAgICAgICAgICBsZXQgcmV0cnlSZXF1ZXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGFiIG9mIG1hdGNoaW5nVGFicykge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgQXR0ZW1wdGluZyB0byBwaW5nIHRhYiB3aXRoIElEICR7dGFiLmlkfSBhbmQgVVJMICR7dGFiLnVybH1gKTtcclxuICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gcGluZyBhbmQgY2hlY2sgd2hldGhlciB0YWIgcmVzcG9uZHNcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpbmdSZXNwb25zZSA9IGF3YWl0IHNlbmRSZXF1ZXN0Q29udGVudCh0YWIuaWQsIHBpbmdSZXF1ZXN0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwaW5nUmVzcG9uc2UucmVzdWx0ID09PSBcImVycm9yXCIpIHsgLy8gRmFpbGVkIHRvIGNvbW11bmljYXRlIHdpdGggdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgRXJyb3IgcGluZ2luZyBjb250ZW50IHNjcmlwdDogJHtwaW5nUmVzcG9uc2UucGF5bG9hZC52YWx1ZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhsb2dnaW5nU2VsZiwgYFJlY2VpdmVkIHN1Y2Nlc3NmdWwgcGluZyByZXNwb25zZSwgYnJvYWRjYXN0aW5nIHJlcXVlc3RgKTtcclxuICAgICAgICAgICAgICAgIC8vIFRhYiBwcm9wZXJseSByZXNwb25kZWQgdG8gcGluZywgc2VuZCBhY3R1YWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBxdWV1ZWRSZXF1ZXN0LmhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJnczogcXVldWVkUmVxdWVzdC5hcmdzLFxyXG4gICAgICAgICAgICAgICAgfTsgLy8gTWlycm9yIHJlcXVlc3QgZnJvbSBxdWV1ZWQgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZW5kUmVxdWVzdENvbnRlbnQodGFiLmlkLCByZXF1ZXN0KTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgPT09IFwiZXJyb3JcIikgeyAvLyBGYWlsZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0YWJcclxuICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuIHNpbmNlIHBpbmcgd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGVycm9yIHBlcmZvcm1pbmcgaGFuZGxlcjogJHtyZXNwb25zZX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHF1ZXVlZFJlc3BvbnNlLnJlc3VsdCA9IFwib2tcIjtcclxuICAgICAgICAgICAgICAgIHF1ZXVlZFJlc3BvbnNlLnBheWxvYWQgPSByZXNwb25zZS5wYXlsb2FkO1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0YWIgcmVzcG9uZGVkIHdpdGggcmVxdWVzdCBmb3IgZXhlY3V0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucGF5bG9hZC5leGVjdXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBSZXNwb25zZSByZWNlaXZlZCwgcGVyZm9ybWluZyBleGVjdXRpb24gaGFuZGxlcnMgJHtyZXNwb25zZS5wYXlsb2FkLmV4ZWN1dGV9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnBheWxvYWQuZXhlY3V0ZS5pbmNsdWRlcyhcInJlbG9hZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25Mb2cobG9nZ2luZ1NlbGYsIGBFeGVjdXRpbmcgcmVsb2FkIGZvciB0YWIgd2l0aCBJRCAke3RhYi5pZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsb2FkIGN1cnJlbnQgdGFiLCBpZGxlIHVudGlsIHJlbG9hZGluZyBjb21wbGV0ZSAocGluZyBzdWNjZXNzZnVsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyLnRhYnMucmVsb2FkKHRhYi5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDI1MDApOyAvLyBHaXZlIGEgZmV3IHNlY29uZHMgZm9yIHRoZSByZWxvYWQgdG8gaW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBwaW5nVGFiUmVhZHkodGFiLmlkLCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucGF5bG9hZC5leGVjdXRlLmluY2x1ZGVzKFwicmV0cnlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgRXhlY3V0aW5nIHJldHJ5LCByZS1wdXNoaW5nIHJlcXVlc3QgdG8gYmFjayBvZiBxdWV1ZWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQdXNoIHF1ZXVlZCByZXF1ZXN0IHRvIGJhY2sgZm9yIHJldHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlZFJlcXVlc3RzLnB1c2gocXVldWVkUmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5UmVxdWVzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgUmVzcG9uc2UgcmVjZWl2ZWQsIG5vIGV4ZWN1dGlvbiBoYW5kbGVyIG5lY2Vzc2FyeWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIFN0b3Agc2VuZGluZyByZXF1ZXN0cyBhZnRlciBzdWNjZXNzZnVsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gTW92ZWQgcmV0cnkgaGFuZGxlciBkb3duIHNpbmNlIEpTL1RTIGRvZXNuJ3QgaGF2ZSBnb3RvXHJcbiAgICAgICAgICAgIGlmIChyZXRyeVJlcXVlc3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRSZXNwb25zZSA9IEpTT04uc3RyaW5naWZ5KHF1ZXVlZFJlc3BvbnNlKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgRmluaXNoZWQgcHJvY2Vzc2luZyBxdWV1ZWQgcmVxdWVzdCwgcmVzcG9uZGluZyB3aXRoIGJvZHkgJHtzZXJpYWxpemVkUmVzcG9uc2V9YCk7XHJcbiAgICAgICAgICAgIC8vIFJlc29sdmUgd2l0aCBlaXRoZXIgcGF5bG9hZCBvciBub3QgZm91bmRcclxuICAgICAgICAgICAgcXVldWVkUmVxdWVzdC5yZXNvbHZlKHF1ZXVlZFJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgLy8gRG9lcyB0aGUgYmVsb3cgc3RpbGwgcnVuPyBpZGtcclxuICAgICAgICBleGVjdXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgICBleGVjdXRpbmcgPSBmYWxzZTsgLy8gVW5sb2NrIHJ1bm5pbmcgaW5zdGFuY2VcclxufVxyXG4vLyBBZGQgYSBzeW5jIHJlcXVlc3QgdG8gcXVldWVkIGFuZCBpZGxlIHVudGlsIHJlc3BvbnNlXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRTeW5jUmVxdWVzdChyZXF1ZXN0LCB1cmxNYXRjaCkge1xyXG4gICAgZXh0ZW5zaW9uTG9nKGxvZ2dpbmdTZWxmLCBgUHVzaGluZyByZXF1ZXN0IHRvIGJhY2sgb2YgcXVldWUgZm9yIHN5bmMgZXhlY3V0aW9uYCk7XHJcbiAgICAvLyBQdXNoIG5ldyByZXF1ZXN0IHRvIGV4aXN0aW5nIHF1ZXVlIGFuZCB3YWl0IGZvciBjb21wbGV0aW9uXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAvLyBDb25zdHJ1Y3QgYW5kIGFkZCBxdWV1ZWQgcmVxdWVzdFxyXG4gICAgICAgIGNvbnN0IHF1ZXVlZFJlcXVlc3QgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QpLCB7IHVybE1hdGNoLCByZXNvbHZlIH0pOyAvLyBXaWxsIGJsb2NrIHVudGlsIHJlc29sdXRpb25cclxuICAgICAgICBxdWV1ZWRSZXF1ZXN0cy5wdXNoKHF1ZXVlZFJlcXVlc3QpO1xyXG4gICAgICAgIHBlcmZvcm1TeW5jUmVxdWVzdHMoKTsgLy8gUnVucyBhc3luY2hyb25vdXNseSwgd2FpdCBmb3IgcmVzb2x2ZVxyXG4gICAgfSk7XHJcbn1cclxuLy8gQ3JlYXRlcyBuZXcgdGFiIHdpdGggc3BlY2lmaWVkIFVSTCBhbmQgYmxvY2sgdW50aWwgcmVhZHlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRhYlJlYWR5KHVybCwgd2FpdCA9IHRydWUpIHtcclxuICAgIC8vIEluaXRpYWxpemUgYW5kIHBlcmlvZGljYWxseSBwaW5nIHVudGlsIHJlc3BvbnNlXHJcbiAgICBjb25zdCB0YWIgPSBhd2FpdCBicm93c2VyLnRhYnMuY3JlYXRlKHtcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIHVybCxcclxuICAgIH0pO1xyXG4gICAgLy8gT25seSB3YWl0IGZvciBsb2FkIGNvbXBsZXRlIGlmIGRlc2lyZWRcclxuICAgIGlmICh3YWl0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgYXdhaXQgcGluZ1RhYlJlYWR5KHRhYi5pZCwgMTAwKTtcclxuICAgIH1cclxufVxyXG4vLyBQbGF5IGNvcnJlc3BvbmRpbmcgbm90aWZpY2F0aW9uIHNvdW5kIGFuZCBzaG93IG5vdGlmaWNhdGlvblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc291bmROb3RpZmljYXRpb24oc291bmRLZXksIHRpdGxlLCBtZXNzYWdlLCBzZXR0aW5nS2V5cywgYnV0dG9ucykge1xyXG4gICAgLy8gU2hvdyBkZXNrdG9wIG5vdGlmaWNhdGlvbiB0aHJvdWdoIEFQSSBpZiBkZXNpcmVkXHJcbiAgICBsZXQgbm90aWZpY2F0aW9uSWQ7XHJcbiAgICBpZiAoZ2V0KHNldHRpbmdzLnN0b3JlKVtzZXR0aW5nS2V5c1swXV1bc2V0dGluZ0tleXNbMV1dID09PSB0cnVlKSB7XHJcbiAgICAgICAgLy8gQ2FuJ3QgdXNlIHdlYmV4dGVuc2lvbi1wb2x5ZmlsbCBiZWNhdXNlIG9mIGxhY2sgb2YgcHJvbWlzZSBzdXBwb3J0XHJcbiAgICAgICAgbm90aWZpY2F0aW9uSWQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBPZiBjb3Vyc2UgQ2hyb21lIGRvZXNuJ3Qgc3VwcG9ydCBhc3luYy9hd2FpdCBcclxuICAgICAgICAgICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYmFzaWNcIixcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICBpY29uVXJsOiBcIi4uL3Jlc291cmNlcy9pY29uXzUxMl9kYXJrLnBuZ1wiLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uczogYnV0dG9ucyA9PT0gbnVsbCB8fCBidXR0b25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidXR0b25zLm1hcCh0aXRsZSA9PiAoeyB0aXRsZTogdGl0bGUgfSkpLFxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoaWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IGNsZWFyIGFmdGVyIHNldHRpbmdzIGR1cmF0aW9uXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNsZWFyKG5vdGlmaWNhdGlvbklkKTtcclxuICAgICAgICB9LCBnZXQoc2V0dGluZ3Muc3RvcmUpW1wiZ2xvYmFsXCJdW1wiZHVyYXRpb25Ob3RpZmljYXRpb25cIl0pO1xyXG4gICAgfVxyXG4gICAgLy8gQWx3YXlzIHBsYXkgbm90aWZpY2F0aW9uIHNvdW5kIHdpdGggZ2l2ZW4ga2V5IGlmIGRlc2lyZWRcclxuICAgIC8vIFJlLWluaXRpYWxpemUgZnJvbSBmaWxlIHZzLiB1c2luZyBleGlzdGluZyBBdWRpbyBmb3Igc2ltdWx0YW5lb3VzIHBsYXlpbmdcclxuICAgIGlmIChnZXQoc2V0dGluZ3Muc3RvcmUpW1wiZ2xvYmFsXCJdW1wicGxheU5vdGlmaWNhdGlvbnNcIl0gPT09IHRydWUpIHtcclxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Tb3VuZCA9IG5ldyBBdWRpbyhub3RpZmljYXRpb25zW3NvdW5kS2V5XSk7XHJcbiAgICAgICAgbm90aWZpY2F0aW9uU291bmQucGxheSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vdGlmaWNhdGlvbklkO1xyXG59XHJcbiIsImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUvc3RvcmVcIjtcclxuaW1wb3J0IHsgcmVkdWNlRGlzcGxheXMgfSBmcm9tIFwiLi91dGlsaXRpZXNcIjtcclxuLy8gRGVjbGFyZSBzaGFyZWQgc3RvcmVzLCBOT1RFIHRoYXQgdGhleSBjYW4gb25seSBiZSBzaGFyZWQgd2l0aGluIHRoZSBzYW1lIGNvbnRleHQhXHJcbmV4cG9ydCBjb25zdCB0YWJVUkxzID0gd3JpdGFibGUoW10pOyAvLyB0YWIgVVJMcyBzaGFyZWQgYmV0d2VlbiBjb21wb25lbnRzXHJcbi8vIEFnZ3JlZ2F0ZSBzZWxmLWlkZW50aWZpY2F0aW9uIGtleXNcclxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRTZWxmID0gXCJiYWNrZ3JvdW5kXCI7XHJcbmV4cG9ydCBjb25zdCBjb250ZW50U2VsZiA9IFwiY29udGVudFwiO1xyXG5leHBvcnQgY29uc3QgZXh0ZW5zaW9uU2VsZiA9IFwiZXh0ZW5zaW9uXCI7XHJcbmV4cG9ydCBjb25zdCBkb21haW5NYXRjaGVzID0ge1xyXG4gICAgXCJiZXN0YnV5XCI6IFwiaHR0cHM6Ly8qLmJlc3RidXkuY29tLypcIixcclxufTsgLy8gRG9tYWluIG1hdGNoZXMgZm9yIHNlbmRpbmcgbWVzc2FnZXMgZnJvbSBiYWNrZ3JvdW5kIG9yIGV4dGVuc2lvblxyXG5leHBvcnQgY29uc3QgcGluZ1JlcXVlc3QgPSB7XHJcbiAgICBoYW5kbGVyOiBcInBpbmdcIixcclxuICAgIGFyZ3M6IFtdLFxyXG59OyAvLyBQaW5nIHJlcXVlc3QgdG8gY2hlY2sgdGFiIHJlYWN0aXZpdHlcclxuLy8gQ2hhbmdlbG9nIGZvciBkaXNwbGF5IHB1cnBvc2VzLCBtb3N0IHJlY2VudCB0byBvbGRlc3RcclxuZXhwb3J0IGNvbnN0IGNoYW5nZWxvZ3MgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgZGlzcGxheTogXCJWZXJzaW9uIDEuMy4wXCIsXHJcbiAgICAgICAgYnVsbGV0czogW1xyXG4gICAgICAgICAgICBcIkFub3RoZXIgY29tcGxldGUgY29kZSByZWZhY3RvciAtIG1vdmVkIFN2ZWx0ZSBmaWxlcyBpbnRvIGluZGl2aWR1YWwgVFMgZmlsZXNcIlxyXG4gICAgICAgICAgICAgICAgKyBcImxpbmtlZCB0aHJvdWdoIGEgU3ZlbHRlIGZpbGUgZm9yIHVzaW5nIHdyaXRhYmxlcyBhbmQgc3R1ZmZcIixcclxuICAgICAgICAgICAgXCJGaXhlZCBxdWV1ZXMgbm90IGFjdHVhbGx5IHJlcGxhY2luZyB3aGVuIGVpdGhlciBtb3ZpbmcgZnJvbSBtdWx0aXBsZSB0byBzaW5nbGUgcXVldWUsIFwiXHJcbiAgICAgICAgICAgICAgICArIFwib3IgbmV3IHF1ZXVlIGJlaW5nIGJldHRlciBhbmQgdGh1cyBzaG91bGQgb3ZlcndyaXRlIG9sZCBxdWV1ZVwiLFxyXG4gICAgICAgICAgICBcIkZpeGVkIGV4Y2Vzc2l2ZSBwaW5ncyB0byBicm93c2VyIGJlY2F1c2Ugb2YgdW5kZWZpbmVkIHNldHRpbmcgKHNldCB0byAxMDBtcyBpbnN0ZWFkKVwiLFxyXG4gICAgICAgICAgICBcIkFkZGVkIGV4Y2VwdGlvbiBoYW5kbGluZyBqdXN0IGluIGNhc2UgZXh0ZW5zaW9uIGhhbmdzIGlmIHN5bmNocm9ub3VzIHJlcXVlc3RzIGVycm9yIG91dFwiLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgZGlzcGxheTogXCJWZXJzaW9uIDEuMi4wXCIsXHJcbiAgICAgICAgYnVsbGV0czogW1xyXG4gICAgICAgICAgICBcIlJlLWZhY3RvciBvZiBiYWNrZ3JvdW5kIHNjcmlwdCwgY29udGVudCBzY3JpcHRzLCBhbmQgZXh0ZW5zaW9uIGZyb250LWVuZCB0byBcIlxyXG4gICAgICAgICAgICAgICAgKyBcImltcGxlbWVudCBzZXF1ZW50aWFsIGhhbmRsZXIgZXhlY3V0aW9uIGFuZCBvdGhlciBmZWF0dXJlc1wiLFxyXG4gICAgICAgICAgICBcIkltcGxlbWVudGVkIGF1dG8tcmVsb2FkIHdpdGggc2V0dGluZyB3aGVuZXZlciA0MDMvNTAwIHJlc3BvbnNlIHJlY2VpdmVkXCIsXHJcbiAgICAgICAgICAgIFwiSW1wbGVtZW50ZWQgaXRlcmF0aW5nIG92ZXIgbXVsdGlwbGUgdGFicyBmb3Igc2VuZGluZyByZXF1ZXN0cyAtIFwiXHJcbiAgICAgICAgICAgICAgICArIFwid2hpbGUgZXhlY3V0ZWQgb25jZSwgZWFjaCB0YWIgaXMgcGluZ2VkIGJlZm9yZWhhbmQgdG8gZW5zdXJlIGV4ZWN1dGlvblwiLFxyXG4gICAgICAgICAgICBcIkFkZGVkIG5ldyBub3RpZmljYXRpb24gc291bmRzIGFuZCBleHBhbmRlZCBub3RpZmljYXRpb25zIGZvciBkaWZmZXJlbnQgZXZlbnRzXCIsXHJcbiAgICAgICAgICAgIFwiQWRkZWQgYXV0b21hdGljYWxseSBvcGVuaW5nIHRhYiB3aXRoIHNldHRpbmcgb24gZXhlY3V0aW9uIHdoZW4gc2NyaXB0IG5vdCBkZXRlY3RlZFwiLFxyXG4gICAgICAgICAgICBcIkFkZGVkIG9wdGlvbiB0byBkaXNhYmxlIG5vdGlmaWNhdGlvbiBzb3VuZHMgZm9yIGFsbCBldmVudHMgKHNlcGFyYXRlIGZyb20gcG9wdXBzKVwiLFxyXG4gICAgICAgICAgICBcIkNoYW5nZWQgdGhlIHdheSBub3RpZmljYXRpb24gc291bmRzIGFyZSBwbGF5ZWQgc28gdGhhdCB0aGV5IGNhbiBvdmVybGFwIFwiLFxyXG4gICAgICAgICAgICBcIkZpeGVkIHNldHRpbmdzIHRhYiBlaXRoZXIgbm90IHdvcmtpbmcgb3IgYmVoYXZpbmcgc3RyYW5nZWx5IChidXR0b25zIG5vdCB3b3JraW5nLCBcIlxyXG4gICAgICAgICAgICAgICAgKyBcImNlcnRhaW4gc2V0dGluZ3Mgbm90IHNhdmluZywgZXRjLilcIixcclxuICAgICAgICAgICAgXCJBZ2dyZWdhdGVkIGJhY2tncm91bmQgc2NyaXB0cyBpbnRvIGEgc2luZ2xlIHNjcmlwdCBiZWNhdXNlIEkgdGhvdWdodCB0aGV5IFwiXHJcbiAgICAgICAgICAgICAgICArIFwiY291bGRuJ3QgY29tbXVuaWNhdGUgdG8gZWFjaCBvdGhlciB0aHJvdWdoIHRoZSBydW50aW1lLnNlbmRNZXNzYWdlIEFQSSwgXCJcclxuICAgICAgICAgICAgICAgICsgXCJidXQgYXBwYXJlbnRseSB0aGUgaXNzdWUgd2FzIHNvbWV0aGluZyBlbHNlLiBEb2luZyBzb21lIHRlc3RpbmcgdG8gY2hlY2sgXCJcclxuICAgICAgICAgICAgICAgICsgXCJ3aGV0aGVyIEknbSBnb29kIHRvIHNlcGFyYXRlIHRoZW0gYWdhaW4gaW4gZnV0dXJlIHZlcnNpb25zIGZvciBjb2RlIGNsYXJpdHlcIixcclxuICAgICAgICAgICAgXCJTb21ld2hhdCBjbGVhbmVkIHVwIGNvZGUgYW5kIGFnZ3JlZ2F0ZWQgdXRpbGl0aWVzIGJlY2F1c2Ugb2YgdHJlZSBzaGFraW5nXCIsXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBkaXNwbGF5OiBcIlZlcnNpb24gMS4xLjFcIixcclxuICAgICAgICBidWxsZXRzOiBbXHJcbiAgICAgICAgICAgIFwiRml4ZWQgY2hhbmdlbG9nIHNwYWNpbmcsIG5vb25lIHByb2JhYmx5IGV2ZW4gbm90aWNlZCB0aGUgaXNzdWUgdGhvdWdoXCIsXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBkaXNwbGF5OiBcIlZlcnNpb24gMS4xLjBcIixcclxuICAgICAgICBidWxsZXRzOiBbXHJcbiAgICAgICAgICAgIFwiRml4ZWQgZGVmYXVsdCBzZXR0aW5ncyBub3QgcHJvcGVybHkgYXBwbHlpbmcgYW5kIGluc3RlYWQgc2hvd2luZyAwL2ZhbHNlL1xcXCJcXFwiL2V0Yy5cIixcclxuICAgICAgICAgICAgXCJSZXdvcmtlZCBuYW1lcyBhbmQgZGVzY3JpcHRpb25zIGZvciBzb21lIHNldHRpbmdzLCBwbGVhc2UgZG91YmxlLWNoZWNrIHRvIGVuc3VyZSB0aGV5IGxvb2sgZ29vZFwiLFxyXG4gICAgICAgICAgICBcIkJlc3QgQnV5OiBSZW1vdmVkIGF1dG9tYXRpY2FsbHkgcmV0cnlpbmcgZmFpbGVkIGF1dG9tYXRpYyByZXF1ZXN0cywgc2hvdWxkIG1hbnVhbGx5IHBlcmZvcm0gaW5zdGVhZFwiLFxyXG4gICAgICAgICAgICBcIkJlc3QgQnV5OiBBZGRlZCBtYW55IENocm9tZSBub3RpZmljYXRpb25zIGFuZCBzb3VuZCBlZmZlY3RzIGZvciBldmVudHMgbGlrZSBmYWlsZWQgY2FydGluZywgcXVldWUgaW50ZXJjZXB0aW9uLCBhbmQgcmF0ZSBsaW1pdC4gTm90aWZpY2F0aW9uIHNvdW5kcyBzdWNrIHRob3VnaCwgcGxlYXNlIHNlbmQgbWUgcmVjb21tZW5kYXRpb25zIVwiLFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgZGlzcGxheTogXCJWZXJzaW9uIDEuMC4wIChJbml0aWFsIHJlLXJlbGVhc2UpXCIsXHJcbiAgICAgICAgYnVsbGV0czogW1xyXG4gICAgICAgICAgICBcIkNvbXBsZXRlbHkgcmUtZGV2ZWxvcGVkIHRoZSBleHRlbnNpb24gZnJvbSBzY3JhdGNoIHVzaW5nIFN2ZWx0ZVwiLFxyXG4gICAgICAgICAgICBcIk1hbmZpZXN0IHZlcnNpb24gZG93bmdyYWRlZCBmcm9tIFYzIHRvIFYyIGZvciBwZXJzaXN0ZW50IGJhY2tncm91bmQgcGFnZXNcIixcclxuICAgICAgICAgICAgXCJCZXN0IEJ1eTogQmFja2dyb3VuZCBzY3JpcHQgYXV0b21hdGljYWxseSBpbnRlcmNlcHRzIGFuZCB0cmFja3MgcXVldWVzXCIsXHJcbiAgICAgICAgICAgIFwiQmVzdCBCdXk6IEltcGxlbWVudGVkIG1hbnVhbCBhZGQtdG8tY2FydCBhbmQgYXV0b21hdGljL21hbnVhbCBxdWV1ZSBjYXJ0aW5nXCIsXHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuXTtcclxuLy8gU2V0dGluZ3MgaW5jbHVkaW5nIGRlZmF1bHQgZm9yIGluaXRpYWxpemF0aW9uIGFuZCBsYWJlbHNcclxuZXhwb3J0IGNvbnN0IHNldHRpbmdzRGlzcGxheXMgPSB7XHJcbiAgICBcImdsb2JhbFwiOiB7XHJcbiAgICAgICAgZGlzcGxheTogXCJHbG9iYWwgU2V0dGluZ3NcIixcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJOb3RlIHRoYXQgcG9wLXVwIG5vdGlmaWNhdGlvbnMgY2FuIG9ic2N1cmUgdGhlIHNjcmVlbiBhbmQgZm9yY2VmdWxseSBjaGFuZ2Ugd2luZG93IGZvY3VzIHdoZW4gY2xpY2tlZCAtIGRvbid0IGVuYWJsZSBub3RpZmljYXRpb25zIGlmIHlvdSdyZSBwbGF5aW5nIGdhbWVzIVwiLFxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIFwiYXV0b09wZW5UYWJcIjoge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJBdXRvbWF0aWNhbGx5IG9wZW4gdGFiIHdoZW4gc2NyaXB0IG5vdCBkZXRlY3RlZFwiLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJwbGF5Tm90aWZpY2F0aW9uc1wiOiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIlBsYXkgbm90aWZpY2F0aW9uIHNvdW5kcyBvbiBldmVudHNcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwibm90aWZpY2F0aW9uRXJyb3JcIjoge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJTaG93IGRlc2t0b3Agbm90aWZpY2F0aW9uIG9uIGV4dGVuc2lvbiBlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJkdXJhdGlvbk5vdGlmaWNhdGlvblwiOiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIk5vdGlmaWNhdGlvbiBwb3B1cCBkdXJhdGlvbiBiZWZvcmUgY2xlYXJpbmdcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICBhcmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdWZmaXhcIjogXCJtc1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcImJlc3RidXlcIjoge1xyXG4gICAgICAgIGRpc3BsYXk6IFwiQmVzdCBCdXkgU2V0dGluZ3NcIixcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJOb3RlIHRoYXQgcG9wLXVwIG5vdGlmaWNhdGlvbnMgY2FuIG9ic2N1cmUgdGhlIHNjcmVlbiBhbmQgZm9yY2VmdWxseSBjaGFuZ2Ugd2luZG93IGZvY3VzIHdoZW4gY2xpY2tlZCAtIGRvbid0IGVuYWJsZSBub3RpZmljYXRpb25zIGlmIHlvdSdyZSBwbGF5aW5nIGdhbWVzIVwiLFxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIFwiYXV0b0FkZFF1ZXVlXCI6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiQXV0b21hdGljYWxseSBleGVjdXRlIHF1ZXVlIGFkZC10by1jYXJ0IHdoZW4gZmluaXNoZWRcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiYXV0b1JlbG9hZFwiOiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIkF1dG9tYXRpY2FsbHkgcmVsb2FkIHRhYiBvbiBwb3RlbnRpYWwgcmF0ZS1saW1pdCAoNDAzLzUwMClcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwicmVwbGFjZVF1ZXVlXCI6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiTWFpbnRhaW4gc2hvcnRlc3QgcXVldWUgcGVyIFNLVSBpbnN0ZWFkIG9mIG11bHRpcGxlXCIsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInJlcXVldWVTdWNjZXNzXCI6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiUmUtcXVldWUgd2l0aCByZXNwb25zZSBxdWV1ZSBvbiBzdWNjZXNzZnVsIGFkZC10by1jYXJ0XCIsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvblN1Y2Nlc3NcIjoge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJTaG93IGRlc2t0b3Agbm90aWZpY2F0aW9uIG9uIHN1Y2Nlc3NmdWwgYWRkLXRvLWNhcnRcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwibm90aWZpY2F0aW9uRmFpbHVyZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIlNob3cgZGVza3RvcCBub3RpZmljYXRpb24gb24gZmFpbGVkIGFkZC10by1jYXJ0XCIsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvblF1ZXVlXCI6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiU2hvdyBkZXNrdG9wIG5vdGlmaWNhdGlvbiBvbiBuZXcgcXVldWUgaW50ZXJjZXB0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvblJhdGVMaW1pdFwiOiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIlNob3cgZGVza3RvcCBub3RpZmljYXRpb24gb24gcG90ZW50aWFsIHJhdGUtbGltaXQgKDQwMy81MDApXCIsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn07XHJcbi8vIEJlc3QgQnV5IGRhdGEgZm9yIG1hbnVhbCBhZGQtdG8tY2FydCBhbmQgZGlzcGxheVxyXG5leHBvcnQgY29uc3QgcmF3QmVzdEJ1eUl0ZW1zID0ge1xyXG4gICAgXCJndHgtMTZcIjoge1xyXG4gICAgICAgIGRpc3BsYXk6IFwiW0dyYXBoaWNzXSBHZUZvcmNlIEdUWCAxNi1TZXJpZXNcIixcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIEdUWCAxNjYwIFNVUEVSIFRVRiBHQU1JTkcgT0NcIiwgXCJkYXRhXCI6IFwiNjQwNTA2M1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJFVkdBIEdlRm9yY2UgR1RYIDE2NTAgU1VQRVIgU0MgVUxUUkEgR0FNSU5HXCIsIFwiZGF0YVwiOiBcIjY0MTI5MzlcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiRVZHQSBHZUZvcmNlIEdUWCAxNjYwVGkgU0MgVUxUUkEgR0FNSU5HXCIsIFwiZGF0YVwiOiBcIjYzNzM1MDBcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgR1RYIDE2NTAgU1VQRVIgR0FNSU5HIFhcIiwgXCJkYXRhXCI6IFwiNjM5Nzc5OFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBHVFggMTY2MCBTVVBFUiBHQU1JTkcgWFwiLCBcImRhdGFcIjogXCI2Mzg5MzMzXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIEdUWCAxNjYwVGkgR0FNSU5HIFhcIiwgXCJkYXRhXCI6IFwiNjMzMDQ2MVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJQTlkgR2VGb3JjZSBHVFggMTY1MCBTVVBFUiBYTFI4IEdBTUlORyBPQ1wiLCBcImRhdGFcIjogXCI2NDA3MzA1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIlBOWSBHZUZvcmNlIEdUWCAxNjYwIFNVUEVSIFhMUjggR0FNSU5HIE9DXCIsIFwiZGF0YVwiOiBcIjY0MDczMDlcIiB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAgXCJydHgtMzA2MFwiOiB7XHJcbiAgICAgICAgZGlzcGxheTogXCJbR3JhcGhpY3NdIEdlRm9yY2UgUlRYIDMwNjBcIixcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDYwIFNUUklYXCIsIFwiZGF0YVwiOiBcIjY0NjA2NjVcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDYwIFNUUklYIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0NzUyMjRcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDYwIFRVRiBHQU1JTkdcIiwgXCJkYXRhXCI6IFwiNjQ2MDY2NlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJBU1VTIEdlRm9yY2UgUlRYIDMwNjAgVFVGIEdBTUlORyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDc1MjIzXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA2MCBYQyBHQU1JTkcgKEtCKVwiLCBcImRhdGFcIjogXCI2NDU0MzI5XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA2MCBYQyBHQU1JTkcgKEtSKVwiLCBcImRhdGFcIjogXCI2NDU0MzI4XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjAgQU9SVVMgRUxJVEVcIiwgXCJkYXRhXCI6IFwiNjQ2ODkxMFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDYwIEVBR0xFIE9DXCIsIFwiZGF0YVwiOiBcIjY0NTQ2ODlcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA2MCBFQUdMRSBPQyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDY4OTI4XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjAgR0FNSU5HIE9DXCIsIFwiZGF0YVwiOiBcIjY0NTQ2ODhcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA2MCBHQU1JTkcgT0MgKExIUilcIiwgXCJkYXRhXCI6IFwiNjQ2ODkzMVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDYwIFZJU0lPTiBPQ1wiLCBcImRhdGFcIjogXCI2NDY4OTI1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDYwIEdBTUlORyBYIE9DXCIsIFwiZGF0YVwiOiBcIjY0NzYyMjlcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwNjAgVkVOVFVTIDJYIE9DXCIsIFwiZGF0YVwiOiBcIjY0NjIxNzNcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwNjAgVkVOVFVTIDNYIE9DXCIsIFwiZGF0YVwiOiBcIjY0NTI5NDBcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiUE5ZIEdlRm9yY2UgUlRYIDMwNjAgWExSOCBHQU1JTkcgUkVWRUwgRVBJQy1YXCIsIFwiZGF0YVwiOiBcIjY0NTQzMThcIiB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAgXCJydHgtMzA2MHRpXCI6IHtcclxuICAgICAgICBkaXNwbGF5OiBcIltHcmFwaGljc10gR2VGb3JjZSBSVFggMzA2MFRpXCIsXHJcbiAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkFTVVMgR2VGb3JjZSBSVFggMzA2MFRpIFRVRiBHQU1JTkdcIiwgXCJkYXRhXCI6IFwiNjQ3NTIzN1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJBU1VTIEdlRm9yY2UgUlRYIDMwNjBUaSBUVUYgR0FNSU5HXCIsIFwiZGF0YVwiOiBcIjY0NTI1NzNcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiRVZHQSBHZUZvcmNlIFJUWCAzMDYwVGkgRlRXMyBHQU1JTkcgKEtCKVwiLCBcImRhdGFcIjogXCI2NDQ0NDQ0XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA2MFRpIEZUVzMgR0FNSU5HIChLSCwgTEhSKVwiLCBcImRhdGFcIjogXCI2NDc5NTI0XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjBUaSBBT1JVUyBFQUdMRSAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDc5Njg2XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjBUaSBFQUdMRSBPQ1wiLCBcImRhdGFcIjogXCI2NDQyNDg1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjBUaSBFQUdMRSBPQyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDcxOTUxXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNjBUaSBHQU1JTkcgT0NcIiwgXCJkYXRhXCI6IFwiNjQ3MTk1MlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDYwVGkgR0FNSU5HIE9DIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0Nzk2ODhcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA2MFRpIEdBTUlORyBPQyAoTEhSIFYyKVwiLCBcImRhdGFcIjogXCI2NDQyNDg0XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDYwVGkgR0FNSU5HIFhcIiwgXCJkYXRhXCI6IFwiNjQ4MDI5MVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA2MFRpIEdBTUlORyBaXCIsIFwiZGF0YVwiOiBcIjY0NzYyMzBcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwNjBUaSBWRU5UVVMgMlggT0NcIiwgXCJkYXRhXCI6IFwiNjQ0MTE3MlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA2MFRpIFZFTlRVUyAyWCBPQyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDcxMjg2XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDYwVGkgVkVOVFVTIDNYIE9DXCIsIFwiZGF0YVwiOiBcIjY0ODAzMDdcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTlZJRElBIEdlRm9yY2UgUlRYIDMwNjBUaSBGT1VOREVSU1wiLCBcImRhdGFcIjogXCI2NDM5NDAyXCIgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIFwicnR4LTMwNzBcIjoge1xyXG4gICAgICAgIGRpc3BsYXk6IFwiW0dyYXBoaWNzXSBHZUZvcmNlIFJUWCAzMDcwXCIsXHJcbiAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkFTVVMgR2VGb3JjZSBSVFggMzA3MCBTVFJJWFwiLCBcImRhdGFcIjogXCI2NDM5MTI3XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkFTVVMgR2VGb3JjZSBSVFggMzA3MCBTVFJJWCAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDc1MjI4XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkFTVVMgR2VGb3JjZSBSVFggMzA3MCBUVUYgR0FNSU5HXCIsIFwiZGF0YVwiOiBcIjY0MzkxMjhcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDcwIFRVRiBHQU1JTkcgKExIUilcIiwgXCJkYXRhXCI6IFwiNjQ3NTIyNlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJFVkdBIEdlRm9yY2UgUlRYIDMwNzAgWEMzIFVMVFJBIEdBTUlORyAoS0wsIExIUilcIiwgXCJkYXRhXCI6IFwiNjQ3OTUyOFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJFVkdBIEdlRm9yY2UgUlRYIDMwNzAgWEMzIFVMVFJBIEdBTUlORyAoS0gsIExIUilcIiwgXCJkYXRhXCI6IFwiNjQ3NzA3N1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJFVkdBIEdlRm9yY2UgUlRYIDMwNzAgWEMzIFVMVFJBIEdBTUlORyAoS0IpXCIsIFwiZGF0YVwiOiBcIjY0MzkyOTlcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA3MCBBT1JVUyBNQVNURVJcIiwgXCJkYXRhXCI6IFwiNjQzOTM4NFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwIEFPUlVTIE1BU1RFUiAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDc5Njg1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNzAgRUFHTEVcIiwgXCJkYXRhXCI6IFwiNjQzNzkxMlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwIEVBR0xFIE9DIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0NzE5NThcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA3MCBHQU1JTkcgT0NcIiwgXCJkYXRhXCI6IFwiNjQzNzkwOVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwIFZJU0lPTiBPQ1wiLCBcImRhdGFcIjogXCI2NDM5Mzg1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDcwIEdBTUlORyBaIFRSSU9cIiwgXCJkYXRhXCI6IFwiNjQ3MTI4NVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA3MCBWRU5UVVMgMlggT0NcIiwgXCJkYXRhXCI6IFwiNjQ2MjI2NlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA3MCBWRU5UVVMgMlggT0MgKExIUilcIiwgXCJkYXRhXCI6IFwiNjQ4MDMwOFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA3MCBWRU5UVVMgM1ggT0NcIiwgXCJkYXRhXCI6IFwiNjQzODI3OFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA3MCBHQU1JTkcgWCBUUklPXCIsIFwiZGF0YVwiOiBcIjY0MzgyNzlcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTlZJRElBIEdlRm9yY2UgUlRYIDMwNzAgRk9VTkRFUlNcIiwgXCJkYXRhXCI6IFwiNjQyOTQ0MlwiIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICBcInJ0eC0zMDcwdGlcIjoge1xyXG4gICAgICAgIGRpc3BsYXk6IFwiW0dyYXBoaWNzXSBHZUZvcmNlIFJUWCAzMDcwVGlcIixcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDcwVGkgU1RSSVhcIiwgXCJkYXRhXCI6IFwiNjQ2NzgzOFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJBU1VTIEdlRm9yY2UgUlRYIDMwNzBUaSBUVUYgR0FNSU5HXCIsIFwiZGF0YVwiOiBcIjY0Njc4NDBcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA3MFRpIEFPUlVTIE1BU1RFUlwiLCBcImRhdGFcIjogXCI2NDY3Nzg4XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwNzBUaSBHQU1JTkcgT0NcIiwgXCJkYXRhXCI6IFwiNjQ2Nzc3OVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwVGkgRUFHTEVcIiwgXCJkYXRhXCI6IFwiNjQ2Nzc4MlwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwVGkgRUFHTEUgT0NcIiwgXCJkYXRhXCI6IFwiNjQ2Nzc4MVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDcwVGkgVklTSU9OIE9DXCIsIFwiZGF0YVwiOiBcIjY0Njc3ODVcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwNzBUaSBHQU1JTkcgWCBUUklPXCIsIFwiZGF0YVwiOiBcIjY0Njc0OTdcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwNzBUaSBWRU5UVVMgM1ggT0NcIiwgXCJkYXRhXCI6IFwiNjQ2NzUwMFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJOVklESUEgR2VGb3JjZSBSVFggMzA3MFRpIEZPVU5ERVJTXCIsIFwiZGF0YVwiOiBcIjY0NjU3ODlcIiB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAgXCJydHgtMzA4MFwiOiB7XHJcbiAgICAgICAgZGlzcGxheTogXCJbR3JhcGhpY3NdIEdlRm9yY2UgUlRYIDMwODBcIixcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDgwIFNUUklYXCIsIFwiZGF0YVwiOiBcIjY0MzI0NDVcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDgwIFNUUklYIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0NzUyMzhcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiRVZHQSBHZUZvcmNlIFJUWCAzMDgwIFhDMyBVTFRSQSBHQU1JTkcgKEtCKVwiLCBcImRhdGFcIjogXCI2NDMyNDAwXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA4MCBYQzMgVUxUUkEgR0FNSU5HIChLSCwgTEhSKVwiLCBcImRhdGFcIjogXCI2NDcxNjE1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwODAgQU9SVVMgTUFTVEVSIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0NjIxOThcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA4MCBBT1JVUyBYVFJFTUVcIiwgXCJkYXRhXCI6IFwiNjQzNjIyM1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDgwIEFPUlVTIFhUUkVNRSAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDcxOTU0XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwODAgRUFHTEUgT0NcIiwgXCJkYXRhXCI6IFwiNjQzMDYyMVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDgwIEdBTUlORyBPQ1wiLCBcImRhdGFcIjogXCI2NDMwNjIwXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwODAgR0FNSU5HIE9DIChMSFIpXCIsIFwiZGF0YVwiOiBcIjY0NzE5NjBcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA4MCBWSVNJT04gT0NcIiwgXCJkYXRhXCI6IFwiNjQzNjIxOVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDgwIFZJU0lPTiBPQyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDcxOTU3XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDgwIEdBTUlORyBaIFRSSU9cIiwgXCJkYXRhXCI6IFwiNjQ4MDI4OVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA4MCBWRU5UVVMgM1ggKExIUilcIiwgXCJkYXRhXCI6IFwiNjQ3MTI4N1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA4MCBWRU5UVVMgM1ggT0NcIiwgXCJkYXRhXCI6IFwiNjQzMDE3NVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJNU0kgR2VGb3JjZSBSVFggMzA4MCBWRU5UVVMgM1ggUExVUyAoTEhSKVwiLCBcImRhdGFcIjogXCI2NDgwMzA2XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk5WSURJQSBHZUZvcmNlIFJUWCAzMDgwIEZPVU5ERVJTXCIsIFwiZGF0YVwiOiBcIjY0Mjk0NDBcIiB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAgXCJydHgtMzA4MHRpXCI6IHtcclxuICAgICAgICBkaXNwbGF5OiBcIltHcmFwaGljc10gR2VGb3JjZSBSVFggMzA4MFRpXCIsXHJcbiAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkFTVVMgR2VGb3JjZSBSVFggMzA4MFRpIFNUUklYXCIsIFwiZGF0YVwiOiBcIjY0NjY5MzFcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiQVNVUyBHZUZvcmNlIFJUWCAzMDgwVGkgVFVGIEdBTUlOR1wiLCBcImRhdGFcIjogXCI2NDY2OTMyXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA4MFRpIEZUVzMgVUxUUkEgR0FNSU5HIChLQilcIiwgXCJkYXRhXCI6IFwiNjQ2NzgwOFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDgwVGkgQU9SVVMgTUFTVEVSXCIsIFwiZGF0YVwiOiBcIjY0Njg5MzJcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiR0lHQUJZVEUgR2VGb3JjZSBSVFggMzA4MFRpIEFPUlVTIFhUUkVNRVwiLCBcImRhdGFcIjogXCI2NDY4OTMzXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwODBUaSBHQU1JTkcgT0NcIiwgXCJkYXRhXCI6IFwiNjQ2NjU2MVwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDgwVGkgVklTSU9OIE9DXCIsIFwiZGF0YVwiOiBcIjY0NjY1NjRcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwODBUaSBHQU1JTkcgWCBUUklPXCIsIFwiZGF0YVwiOiBcIjY0NjU4MDNcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwODBUaSBWRU5UVVMgM1ggT0NcIiwgXCJkYXRhXCI6IFwiNjQ3MjYzN1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJOVklESUEgR2VGb3JjZSBSVFggMzA4MFRpIEZPVU5ERVJTXCIsIFwiZGF0YVwiOiBcIjY0NjI5NTZcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiUE5ZIEdlRm9yY2UgUlRYIDMwODBUaSBYTFI4IEdBTUlORyBSRVZFTCBFUElDLVhcIiwgXCJkYXRhXCI6IFwiNjQ2NzI4OVwiIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICBcInJ0eC0zMDkwXCI6IHtcclxuICAgICAgICBkaXNwbGF5OiBcIltHcmFwaGljc10gR2VGb3JjZSBSVFggMzA5MFwiLFxyXG4gICAgICAgIGl0ZW1zOiBbXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJBU1VTIEdlRm9yY2UgUlRYIDMwOTAgU1RSSVhcIiwgXCJkYXRhXCI6IFwiNjQzMjQ0N1wiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJBU1VTIEdlRm9yY2UgUlRYIDMwOTAgVFVGIEdBTUlOR1wiLCBcImRhdGFcIjogXCI2NDMyNDQ2XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkVWR0EgR2VGb3JjZSBSVFggMzA5MCBYQzMgVUxUUkEgR0FNSU5HIChLQilcIiwgXCJkYXRhXCI6IFwiNjQzNDE5OFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDkwIEFPUlVTIE1BU1RFUlwiLCBcImRhdGFcIjogXCI2NDM3OTEwXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwOTAgRUFHTEUgT0NcIiwgXCJkYXRhXCI6IFwiNjQzMDYyNFwiIH0sXHJcbiAgICAgICAgICAgIHsgZGlzcGxheTogXCJHSUdBQllURSBHZUZvcmNlIFJUWCAzMDkwIEdBTUlORyBPQ1wiLCBcImRhdGFcIjogXCI2NDMwNjIzXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIkdJR0FCWVRFIEdlRm9yY2UgUlRYIDMwOTAgVklTSU9OIE9DXCIsIFwiZGF0YVwiOiBcIjY0NDUxMDhcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwOTAgR0FNSU5HIFggVFJJT1wiLCBcImRhdGFcIjogXCI2NDY4ODYzXCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk1TSSBHZUZvcmNlIFJUWCAzMDkwIFZFTlRVUyAzWCBPQ1wiLCBcImRhdGFcIjogXCJTS1U6IDY0NzI2NDZcIiB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXk6IFwiTVNJIEdlRm9yY2UgUlRYIDMwOTAgVkVOVFVTIDNYIE9DICg/KVwiLCBcImRhdGFcIjogXCI2NDMwMjE1XCIgfSxcclxuICAgICAgICAgICAgeyBkaXNwbGF5OiBcIk5WSURJQSBHZUZvcmNlIFJUWCAzMDkwIEZPVU5ERVJTXCIsIFwiZGF0YVwiOiBcIjY0Mjk0MzRcIiB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG59O1xyXG5leHBvcnQgY29uc3QgYmVzdEJ1eURpc3BsYXlzID0gcmVkdWNlRGlzcGxheXMocmF3QmVzdEJ1eUl0ZW1zKTtcclxuIiwiaW1wb3J0IHsgaW5pdGlhbGl6ZVN0b3JlIH0gZnJvbSBcIi4vdXRpbGl0aWVzXCI7XHJcbi8vIEFueSBpbXBvcnRzIHRoYXQgYXJlIENBTExFRCBvbiBpbml0aWFsaXphdGlvbiBtdXN0IGJlIGRlY2xhcmVkIHdpdGhpbiBhIHNlcGFyYXRlIGZpbGVcclxuZXhwb3J0IGNvbnN0IHNldHRpbmdzID0gYXdhaXQgaW5pdGlhbGl6ZVN0b3JlKFwic2V0dGluZ3NcIiwge30pO1xyXG5leHBvcnQgY29uc3QgYmVzdEJ1eVF1ZXVlcyA9IGF3YWl0IGluaXRpYWxpemVTdG9yZShcImJlc3RidXktcXVldWVzXCIsIHt9KTtcclxuIiwiaW1wb3J0IHsgZ2V0LCB3cml0YWJsZSB9IGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL3N0b3JlXCI7XHJcbmltcG9ydCB7IHBpbmdSZXF1ZXN0IH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XHJcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk1MTAyMS93aGF0LWlzLXRoZS1qYXZhc2NyaXB0LXZlcnNpb24tb2Ytc2xlZXBcclxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XHJcbn1cclxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQ1NTg0NDIvaXMtdGhlcmUtc29tZXRoaW5nLWxpa2UtZ2xvYi1idXQtZm9yLXVybHMtaW4tamF2YXNjcmlwdFxyXG5leHBvcnQgZnVuY3Rpb24gdXJsR2xvYihwYXR0ZXJuLCBpbnB1dCkge1xyXG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoLyhbLj8rXiRbXFxdXFxcXCgpe318XFwvLV0pL2csIFwiXFxcXCQxXCIpLnJlcGxhY2UoL1xcKi9nLCAnLionKSk7XHJcbiAgICByZXR1cm4gcmUudGVzdChpbnB1dCk7XHJcbn1cclxuLy8gUmVkdWNlcyByYXcgYWNjb3JkaW9uIGRhdGEgdG8gdGhlaXIgcmVzcGVjdGl2ZSBkaXNwbGF5c1xyXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlRGlzcGxheXMoaW5wdXQpIHtcclxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhpbnB1dCkucmVkdWNlKChvYmosIFtfLCByYXdDYXRlZ29yeURhdGFdKSA9PiB7XHJcbiAgICAgICAgb2JqID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvYmopLCBPYmplY3QuZW50cmllcyhyYXdDYXRlZ29yeURhdGEuaXRlbXMpLnJlZHVjZSgoc3ViT2JqLCBbXywgcmF3SXRlbURhdGFdKSA9PiB7XHJcbiAgICAgICAgICAgIHN1Yk9ialtyYXdJdGVtRGF0YS5kYXRhXSA9IHJhd0l0ZW1EYXRhLmRpc3BsYXk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJPYmo7XHJcbiAgICAgICAgfSwge30pKTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSwge30pO1xyXG59XHJcbi8vIFNvbWV3aGF0IGZhbmN5IGxvZ2dpbmcgZnJvbSBleHRlbnNpb24gYmFja2dyb3VuZFxyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5zaW9uTG9nKHNlbmRlciwgbWVzc2FnZSwgbGV2ZWwgPSBcImluZm9cIikge1xyXG4gICAgLy8gR2VuZXJhdGUgdGltZXN0bWFwIGZvciBsb2dnaW5nIGluIDI0LWhvdXIgSEg6TU06U1MgZm9ybWF0XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSAobmV3IERhdGUoKSkudG9Mb2NhbGVUaW1lU3RyaW5nKCdlbi1HQicsIHtcclxuICAgICAgICBob3VyOiBcIjItZGlnaXRcIixcclxuICAgICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxyXG4gICAgICAgIHNlY29uZDogXCIyLWRpZ2l0XCIsXHJcbiAgICB9KS5zdWJzdHJpbmcoMCwgOCk7XHJcbiAgICAvLyBMb2cgb3IgZXJyb3IgdG8gY29uc29sZSAoY3VycmVudGx5IHdpdGhvdXQgZm9ybWF0dGluZylcclxuICAgIGNvbnN0IG91dHB1dCA9IGBbJHt0aW1lc3RhbXB9XVxcdFxcdCgke3NlbmRlcn0pXFx0XFx0JHttZXNzYWdlfWA7XHJcbiAgICBpZiAobGV2ZWwgPT09IFwiaW5mb1wiKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2cob3V0cHV0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxldmVsID09PSBcImRlYnVnXCIpIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKG91dHB1dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuXCIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4ob3V0cHV0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxldmVsID09PSBcImVycm9yXCIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKG91dHB1dCk7XHJcbiAgICB9XHJcbn1cclxuLy8gRGVmYXVsdCBwaW5nIHJlc3BvbnNlIGZvciBjb250ZW50IHNjcmlwdFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udGVudFBpbmcoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3VsdDogXCJva1wiLFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgdmFsdWU6IFwicGluZyFcIixcclxuICAgICAgICAgICAgZXhlY3V0ZTogW10sXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBJbml0aWFsaXplcyBtZXNzYWdlIHJlY2VpdmluZyBmb3IgZ2l2ZW4gY29udGVudCBzY3JpcHQgd2l0aCBrZXkgYW5kIGhhbmRsZXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXNzYWdlUHJvY2Vzc0hhbmRsZXJzKGNvbnRlbnRLZXksIGhhbmRsZXJzKSB7XHJcbiAgICAvLyBTZXR1cCBsaXN0ZW5lciBmb3Igc25vb3BpbmcgbWVzc2FnZXMgYW5kIGV4ZWN1dGluZyBtYXRjaGluZyBoYW5kbGVyc1xyXG4gICAgYnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihhc3luYyAobWVzc2FnZSwgc2VuZGVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICByZXN1bHQ6IFwib2tcIixcclxuICAgICAgICAgICAgcGF5bG9hZDoge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGV4ZWN1dGU6IFtdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07IC8vIFBsYWNlaG9sZGVyIHJlc3BvbnNlIGJlZm9yZSBjb25zdHJ1Y3Rpb25cclxuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGhhbmRsZXIgZXhpc3RzLCBtZXNzYWdlcyBhcmUgdGFyZ2V0ZWRcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbcmVxdWVzdC5oYW5kbGVyXTtcclxuICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkxvZyhjb250ZW50S2V5LCBgUHJvY2Vzc2luZyBoYW5kbGVyICR7cmVxdWVzdC5oYW5kbGVyfSB3aXRoIGFyZ3VtZW50cyAke0pTT04uc3RyaW5naWZ5KHJlcXVlc3QuYXJncyl9YCk7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZXIgZXhpc3RzLCBhdHRlbXB0IHRvIGV4ZWN1dGVcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBoYW5kbGVyKC4uLnJlcXVlc3QuYXJncyB8fCBbXSk7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXN1bHQgPSBcIm9rXCI7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wYXlsb2FkID0gcGF5bG9hZDsgLy8gTm9uLXNlcmlhbGl6ZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXN1bHQgPSBcImVycm9yXCI7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlcnJvck1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZTogW10sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uTG9nKGNvbnRlbnRLZXksIGBFcnJvciBwcm9jZXNzaW5nIGhhbmRsZXIgJHtyZXF1ZXN0LmhhbmRsZXJ9OiAke2Vycm9yTWVzc2FnZX1gLCBcImVycm9yXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0pO1xyXG59XHJcbi8vIFJlc29sdmUvcmVqZWN0IHdyYXBwZXIgZm9yIHNlbmRpbmcgcmVxdWVzdHMgdG8gYmFja2dyb3VuZFxyXG4vLyBDdXJyZW50bHkgZG9lc24ndCBpbXBsZW1lbnQgdGltZW91dCBidXQgbWF5YmUgbGF0ZXI/XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kUmVxdWVzdEJhY2tncm91bmQocmVxdWVzdCkge1xyXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHJlcXVlc3QpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc29sdmUocmVzcG9uc2UpKSAvLyBTdWNjZXNzZnVsXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiByZXNvbHZlKHtcclxuICAgICAgICAgICAgcmVzdWx0OiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgZXhlY3V0ZTogW10sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSkpOyAvLyBGYWlsZWQsIHByb2JhYmx5IG5vIG1lc3NhZ2UgbGlua1xyXG4gICAgfSk7XHJcbn1cclxuLy8gUmVzb2x2ZS9yZWplY3Qgd3JhcHBlciBmb3Igc2VuZGluZyByZXF1ZXN0cyB0byB0YWJcclxuLy8gQ3VycmVudGx5IGRvZXNuJ3QgaW1wbGVtZW50IHRpbWVvdXQgYnV0IG1heWJlIGxhdGVyP1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZFJlcXVlc3RDb250ZW50KHRhYklkLCByZXF1ZXN0KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBicm93c2VyLnRhYnMuc2VuZE1lc3NhZ2UodGFiSWQsIHJlcXVlc3QpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc29sdmUocmVzcG9uc2UpKSAvLyBTdWNjZXNzZnVsXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiByZXNvbHZlKHtcclxuICAgICAgICAgICAgcmVzdWx0OiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBlcnJvci5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgZXhlY3V0ZTogW10sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSkpOyAvLyBGYWlsZWQsIHByb2JhYmx5IG5vIG1lc3NhZ2UgbGlua1xyXG4gICAgfSk7XHJcbn1cclxuLy8gUmV0cmlldmUgdmFsdWUgd2l0aCBnaXZlbiBrZXkgZnJvbSBTdG9yYWdlIEFQSSBvciByZXR1cm4gZGVmYXVsdFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcmFnZUdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgLy8gUmV0cmlldmUgZnJvbSBzdG9yYWdlIGFuZCBcIm92ZXJ3cml0ZVwiIHdpdGggZGVmYXVsdCBpZiBub3QgZm91bmRcclxuICAgIGNvbnN0IHN0b3JhZ2VDb250ZW50ID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChrZXkpO1xyXG4gICAgaWYgKHN0b3JhZ2VDb250ZW50W2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0b3JhZ2VDb250ZW50W2tleV0gPSBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RvcmFnZUNvbnRlbnRba2V5XTtcclxufVxyXG4vLyBTdG9yZSB3aXRoIHRoZSBnaXZlbiBrZXkgdGhlIHZhbHVlIHRocm91Z2ggdGhlIFN0b3JhZ2UgQVBJXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdG9yYWdlU2V0KGtleSwgdmFsdWUpIHtcclxuICAgIC8vIFN0b3JlIHVzaW5nIHRoZSBnaXZlbiBrZXkgYW5kIHZhbHVlXHJcbiAgICBhd2FpdCBicm93c2VyLnN0b3JhZ2UubG9jYWwuc2V0KHsgW2tleV06IHZhbHVlIH0pO1xyXG59XHJcbi8vIEluaXRpYWxpemUgd3JpdGFibGUgc3RvcmUgZnJvbSBTdG9yYWdlIEFQSSBhbmQgbWFpbnRhaW4gdmFsdWUgdXNpbmcgc3Vic2NyaXB0aW9uc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0b3JlKGtleSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAvLyBJbml0aWFsaXplIHdyaXRhYmxlIHN0b3JlIGZyb20gc3RvcmFnZSB2YWx1ZVxyXG4gICAgY29uc3Qgc3RvcmFnZVZhbHVlID0gYXdhaXQgc3RvcmFnZUdldChrZXksIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICBjb25zdCBzdG9yZSA9IHdyaXRhYmxlKHN0b3JhZ2VWYWx1ZSk7XHJcbiAgICAvLyBJbnN0YW50aWF0ZSBzZXR0ZXIgYW5kIGdldHRlciBmb3IgYnJvYWRjYXN0aW5nIHVwZGF0ZXNcclxuICAgIC8vIEFzc3VtZSB0aGF0IGJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgaW5kZXhhYmxlIGJ5IHN0cmluZ1xyXG4gICAgY29uc3Qgc2V0ID0gKHNldEtleSwgc2V0VmFsdWUpID0+IHtcclxuICAgICAgICAvLyBVcGRhdGUgd3JpdGFibGUgc3RvcmUgYW5kIFN0b3JhZ2UgQVBJXHJcbiAgICAgICAgc3RvcmUudXBkYXRlKHZhbHVlID0+IHsgdmFsdWVbc2V0S2V5XSA9IHNldFZhbHVlOyByZXR1cm4gdmFsdWU7IH0pO1xyXG4gICAgICAgIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogZ2V0KHN0b3JlKSB9KTtcclxuICAgICAgICAvLyBUaHJvdyBhbmQgZm9yZ2V0IHVwZGF0ZSBicm9hZGNhc3RcclxuICAgICAgICBjb25zdCB1cGRhdGVSZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICBoYW5kbGVyOiBcInVwZGF0ZS1zZXRcIixcclxuICAgICAgICAgICAgYXJnczogW2tleSwgc2V0S2V5LCBzZXRWYWx1ZV0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZW5kUmVxdWVzdEJhY2tncm91bmQodXBkYXRlUmVxdWVzdCk7XHJcbiAgICB9OyAvLyBTZXR0ZXIgdG8gYnJvYWRjYXN0IGtleSBzZXQgdXBkYXRlXHJcbiAgICBjb25zdCBkZWwgPSAoZGVsS2V5KSA9PiB7XHJcbiAgICAgICAgLy8gVXBkYXRlIHdyaXRhYmxlIHN0b3JlIGFuZCBTdG9yYWdlIEFQSVxyXG4gICAgICAgIHN0b3JlLnVwZGF0ZSh2YWx1ZSA9PiB7IGRlbGV0ZSB2YWx1ZVtkZWxLZXldOyByZXR1cm4gdmFsdWU7IH0pO1xyXG4gICAgICAgIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogZ2V0KHN0b3JlKSB9KTtcclxuICAgICAgICAvLyBUaHJvdyBhbmQgZm9yZ2V0IHVwZGF0ZSBicm9hZGNhc3RcclxuICAgICAgICBjb25zdCB1cGRhdGVSZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICBoYW5kbGVyOiBcInVwZGF0ZS1kZWxcIixcclxuICAgICAgICAgICAgYXJnczogW2tleSwgZGVsS2V5XSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbmRSZXF1ZXN0QmFja2dyb3VuZCh1cGRhdGVSZXF1ZXN0KTtcclxuICAgIH07IC8vIERlbGV0ZXIgdG8gYnJvYWRjYXN0IGtleSBkZWxldGUgdXBkYXRlXHJcbiAgICAvLyBBdHRhY2ggYWRkaXRpb25hbCBtZXNzYWdlIGxpc3RlbmVyIHRvIGxpc3RlbiBmb3IgdXBkYXRlc1xyXG4gICAgYnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihhc3luYyAobWVzc2FnZSwgc2VuZGVyKSA9PiB7XHJcbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciBrZXkgbWF0Y2hlcyBhbmQgcGVyZm9ybSB1cGRhdGUgb3IgZGVsZXRpb25cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbWVzc2FnZTtcclxuICAgICAgICBpZiAocmVxdWVzdC5oYW5kbGVyID09PSBcInVwZGF0ZS1zZXRcIikge1xyXG4gICAgICAgICAgICAvLyBEZWNvbnN0cnVjdCBhcmd1bWVudHMgYW5kIHNldC9yZXBsYWNlIGtleSBpbiBzdG9yZVxyXG4gICAgICAgICAgICBjb25zdCBbc3RvcmVLZXksIHNldEtleSwgc2V0VmFsdWVdID0gcmVxdWVzdC5hcmdzO1xyXG4gICAgICAgICAgICBpZiAoc3RvcmVLZXkgPT09IGtleSkgeyAvLyBFbnN1cmUga2V5IG1hdGNoZXMgYmVmb3JlIHNldHRpbmdcclxuICAgICAgICAgICAgICAgIC8vIERPIE5PVCB1c2Ugc2V0dGVyLCBvdGhlcndpc2UgdXBkYXRlIGJyb2FkY2FzdHMgaW4gbG9vcFxyXG4gICAgICAgICAgICAgICAgc3RvcmUudXBkYXRlKHZhbHVlID0+IHsgdmFsdWVbc2V0S2V5XSA9IHNldFZhbHVlOyByZXR1cm4gdmFsdWU7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlcXVlc3QuaGFuZGxlciA9PT0gXCJ1cGRhdGUtZGVsZXRlXCIpIHtcclxuICAgICAgICAgICAgLy8gRGVjb25zdHJ1Y3QgYXJndW1lbnRzIGFuZCBkZWxldGUga2V5IGZyb20gc3RvcmVcclxuICAgICAgICAgICAgY29uc3QgW3N0b3JlS2V5LCBkZWxLZXldID0gcmVxdWVzdC5hcmdzO1xyXG4gICAgICAgICAgICBpZiAoc3RvcmVLZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRE8gTk9UIHVzZSBkZWxldGVyLCBvdGhlcndpc2UgdXBkYXRlIGJyb2FkY2FzdHMgaW4gbG9vcFxyXG4gICAgICAgICAgICAgICAgc3RvcmUudXBkYXRlKHZhbHVlID0+IHsgZGVsZXRlIHZhbHVlW2RlbEtleV07IHJldHVybiB2YWx1ZTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7IHN0b3JlLCBzZXQsIGRlbCB9O1xyXG59XHJcbi8vIFBlcmlvZGljYWxseSBwaW5nIHRhYiB1bnRpbCByZXNwb25zZSAocmVhZHkpXHJcbi8vIE5vdGUgdGhhdCB1bnJlc3BvbnNpdmUgdGFicyB3aWxsIGdldCBwaW5nZWQgZm9yZXZlclxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGluZ1RhYlJlYWR5KHRhYklkLCBwb2xsaW5nSW50ZXJ2YWwsIHJlYWR5ID0gdHJ1ZSkge1xyXG4gICAgLy8gS2VlcCBwaW5naW5nIHVudGlsIHRhYiByZXNwb25kc1xyXG4gICAgd2hpbGUgKHJlYWR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgcGluZ1Jlc3BvbnNlID0gYXdhaXQgc2VuZFJlcXVlc3RDb250ZW50KHRhYklkLCBwaW5nUmVxdWVzdCk7XHJcbiAgICAgICAgaWYgKHBpbmdSZXNwb25zZS5yZXN1bHQgPT09IFwib2tcIikgeyAvLyBTdWNjZXNzZnVsbHkgY29tbXVuaWNhdGVkIHdpdGggdGFiXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBzbGVlcChwb2xsaW5nSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG59XHJcbi8vIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBtaW51dGVzIGFuZCBzZWNvbmRzIGZyb20gbWlsbGlzZWNvbmRzXHJcbmV4cG9ydCBmdW5jdGlvbiBtaW51dGVzU2Vjb25kcyh0b3RhbE1pbGxpU2Vjb25kcywgdHJ1bmNhdGUgPSBmYWxzZSkge1xyXG4gICAgLy8gQnlwYXNzIGZ1bmN0aW9uYWxpdHkgZm9yIG5lZ2F0aXZlIHRpbWVzXHJcbiAgICBsZXQgbmVnYXRpdmUgPSBmYWxzZTtcclxuICAgIGlmICh0b3RhbE1pbGxpU2Vjb25kcyA8IDApIHtcclxuICAgICAgICB0b3RhbE1pbGxpU2Vjb25kcyA9IHRvdGFsTWlsbGlTZWNvbmRzICogLTE7XHJcbiAgICAgICAgbmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdG90YWxTZWNvbmRzID0gdG90YWxNaWxsaVNlY29uZHMgLyAxMDAwO1xyXG4gICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDYwKTtcclxuICAgIGxldCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XHJcbiAgICAvLyBUcnVuY2F0ZSBudW1iZXJzIGlmIGRlc2lyZWRcclxuICAgIGlmICh0cnVuY2F0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKG1pbnV0ZXMpO1xyXG4gICAgICAgIHNlY29uZHMgPSBNYXRoLmZsb29yKHNlY29uZHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFttaW51dGVzLCBzZWNvbmRzLCBuZWdhdGl2ZV07XHJcbn1cclxuLy8gRGVjb2RlcyB0aGUgcXVldWUgY29kZSB0byB0aGUgcXVldWUgdGltZSBpbiBtaWxsaXNlY29uZHNcclxuZXhwb3J0IGZ1bmN0aW9uIGJlc3RCdXlEZWNvZGVRdWV1ZShxdWV1ZUNvZGUpIHtcclxuICAgIGNvbnN0IHNwbGl0Q29kZSA9IHF1ZXVlQ29kZS5zcGxpdChcIi1cIik7XHJcbiAgICBjb25zdCBwYXJzZWRDb2RlID0gc3BsaXRDb2RlLm1hcChjaHVuayA9PiBwYXJzZUludChjaHVuaywgMTYpKTtcclxuICAgIC8vIGlmKHBhcnNlZENvZGVbMV0gKiBwYXJzZWRDb2RlWzJdICogcGFyc2VkQ29kZVszXSA9PT0gcGFyc2VkQ29kZVs0XSlcclxuICAgIGNvbnN0IHdhaXREdXJhdGlvbiA9IDEwMCAqIDEwICogcGFyc2VJbnQoc3BsaXRDb2RlWzJdICsgc3BsaXRDb2RlWzNdLCAxNikgLyBwYXJzZWRDb2RlWzFdO1xyXG4gICAgcmV0dXJuIHdhaXREdXJhdGlvbjtcclxufVxyXG4vLyBPcGVuIGEgcGFnZSB3aXRoIHRoZSBnaXZlbiBVUkwgYW5kIHdoZXRoZXIgdG8gbWFrZSBhY3RpdmVcclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5QYWdlKHVybCwgYWN0aXZlID0gZmFsc2UpIHtcclxuICAgIGJyb3dzZXIudGFicy5jcmVhdGUoe1xyXG4gICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgIGFjdGl2ZTogYWN0aXZlLFxyXG4gICAgfSk7XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5qID0gOTc5OyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ5Nzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gKGNodW5rSWQpID0+IChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApO1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkc1tpXV0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtha2l0b3NfYXV0b21hdGVkX3V0aWxpdGllc1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtha2l0b3NfYXV0b21hdGVkX3V0aWxpdGllc1wiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzE1NF0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MCkpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJ3ZWJwYWNrVGhlbiIsIndlYnBhY2tFeHBvcnRzIiwiY29tcGxldGVRdWV1ZSIsImNvbXBsZXRlRnVuY3Rpb24iLCJxdWV1ZUZ1bmN0aW9uIiwiZGVmZXJyZWQiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImJvZHkiLCJwcm9wcyIsImxvZ2dpbmdTZWxmIiwiYmVzdEJ1eVRhYlVSTCIsInNldHVwQmVzdEJ1eVJlcXVlc3RIYW5kbGVycyIsInJlcXVlc3RCb2R5Q2FjaGUiLCJjaHJvbWUiLCJ3ZWJSZXF1ZXN0Iiwib25CZWZvcmVSZXF1ZXN0IiwiYWRkTGlzdGVuZXIiLCJkZXRhaWxzIiwidW5kZWZpbmVkIiwicmVxdWVzdEJvZHkiLCJkZWNvZGVkQm9keSIsImRlY29kZVVSSUNvbXBvbmVudCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiVWludDhBcnJheSIsInJhdyIsImJ5dGVzIiwicGFyc2VkQm9keSIsIkpTT04iLCJwYXJzZSIsInJlcXVlc3RJZCIsInNrdXMiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJza3VJZCIsInNlcmlhbGl6ZWRTS1VzIiwic3RyaW5naWZ5IiwidXJscyIsIm9uQmVmb3JlU2VuZEhlYWRlcnMiLCJvbkhlYWRlcnNSZWNlaXZlZCIsIl9hIiwiYTJjVHJhbnNhY3Rpb25SZWZlcmVuY2VJZCIsImEyY1RyYW5zYWN0aW9uQ29kZSIsImhlYWRlciIsInJlc3BvbnNlSGVhZGVycyIsIm5hbWUiLCJ2YWx1ZSIsInN0YXR1c0NvZGUiLCJjYWNoZWRCb2R5Iiwic2t1Iiwic3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJxdWV1ZVRpbWUiLCJtaW51dGVzIiwic2Vjb25kcyIsInF1ZXVlRGF0YSIsIm1lc3NhZ2UiLCJwcm9kdWN0TmFtZSIsImV4aXN0aW5nUXVldWVzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInNob3J0ZXIiLCJkaWZmTWludXRlcyIsImRpZmZTZWNvbmRzIiwidXBkYXRlUmVwbGFjZVF1ZXVlcyIsInRpdGxlIiwibmV3UXVldWVEYXRhIiwiY3VycmVudFRpbWUiLCJleGlzdGluZ1F1ZXVlc01hcHBlZCIsImVudHJpZXMiLCJxdWV1ZUtleSIsInNvcnQiLCJxdWV1ZTEiLCJxdWV1ZTIiLCJwcmV2aW91c0Jlc3RSZW1haW5pbmciLCJuZXdRdWV1ZUtleSIsIm5ld1JlbWFpbmluZyIsInB1c2giLCJkaWZmTmVnYXRpdmUiLCJzaG9ydGVzdFF1ZXVlIiwiYXN5bmMiLCJtZXJnZVByb2R1Y3RRdWV1ZXMiLCJtZXJnZVF1ZXVlRGF0YSIsInNrdVF1ZXVlRGF0YSIsInJlbWFpbmluZ1RpbWUiLCJyZW1haW5pbmdNaW51dGVzIiwicmVtYWluaW5nU2Vjb25kcyIsIm5lZ2F0aXZlIiwicHJvY2Vzc0FkZFRvQ2FydCIsInN5bmNSZXF1ZXN0IiwiaGFuZGxlciIsImFyZ3MiLCJwcm9jZXNzQWRkU3RhdHVzIiwicHJvY2Vzc0FkZFJlc3BvbnNlIiwicmVzdWx0IiwicGF5bG9hZCIsIm5vdGlmaWNhdGlvbklkIiwiYnJvd3NlciIsIm5vdGlmaWNhdGlvbnMiLCJvbkJ1dHRvbkNsaWNrZWQiLCJjbGlja2VkSWQiLCJidXR0b25JbmRleCIsInN0YXR1cyIsInF1ZXVlZFJlcXVlc3RzIiwiZXhlY3V0aW5nIiwibWVyZ2VTZXR0aW5ncyIsImNhdGVnb3J5S2V5IiwiY2F0ZWdvcnlEYXRhIiwic3RvcmVkQ2F0ZWdvcnlTZXR0aW5ncyIsImNhdGVnb3J5TW9kaWZpZWQiLCJzZXR0aW5nS2V5Iiwic2V0dGluZ0RhdGEiLCJzZXR0aW5ncyIsInN0b3JlZFNldHRpbmdWYWx1ZSIsImRlZmF1bHQiLCJzZXQiLCJkZWZhdWx0Q2F0ZWdvcnlTZXR0aW5ncyIsInJlZHVjZSIsIm9iaiIsImFkZFN5bmNSZXF1ZXN0IiwicmVxdWVzdCIsInVybE1hdGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJxdWV1ZWRSZXF1ZXN0IiwiYXNzaWduIiwic2hpZnQiLCJxdWV1ZWRSZXNwb25zZSIsImV4ZWN1dGUiLCJzZXJpYWxpemVkUmVxdWVzdCIsInVybEdsb2IiLCJtYXRjaGluZ1RhYnMiLCJ0YWJzIiwicXVlcnkiLCJ1cmwiLCJkaXNjYXJkZWQiLCJyZXRyeVJlcXVlc3QiLCJ0YWIiLCJpZCIsInBpbmdSZXNwb25zZSIsInJlc3BvbnNlIiwiRXJyb3IiLCJpbmNsdWRlcyIsInJlbG9hZCIsInNlcmlhbGl6ZWRSZXNwb25zZSIsImVyciIsInBlcmZvcm1TeW5jUmVxdWVzdHMiLCJjcmVhdGVUYWJSZWFkeSIsIndhaXQiLCJjcmVhdGUiLCJhY3RpdmUiLCJzb3VuZE5vdGlmaWNhdGlvbiIsInNvdW5kS2V5Iiwic2V0dGluZ0tleXMiLCJidXR0b25zIiwidHlwZSIsImljb25VcmwiLCJzZXRUaW1lb3V0IiwiY2xlYXIiLCJBdWRpbyIsInBsYXkiLCJkb21haW5NYXRjaGVzIiwicGluZ1JlcXVlc3QiLCJzZXR0aW5nc0Rpc3BsYXlzIiwiZGlzcGxheSIsImRlc2NyaXB0aW9uIiwiYmVzdEJ1eURpc3BsYXlzIiwiYmVzdEJ1eVF1ZXVlcyIsInNsZWVwIiwibXMiLCJyZWR1Y2VEaXNwbGF5cyIsImlucHV0IiwiXyIsInJhd0NhdGVnb3J5RGF0YSIsInN1Yk9iaiIsInJhd0l0ZW1EYXRhIiwiZGF0YSIsImV4dGVuc2lvbkxvZyIsInNlbmRlciIsImxldmVsIiwib3V0cHV0IiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsInN1YnN0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1ZyIsIndhcm4iLCJlcnJvciIsIm1lc3NhZ2VQcm9jZXNzSGFuZGxlcnMiLCJjb250ZW50S2V5IiwiaGFuZGxlcnMiLCJydW50aW1lIiwib25NZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwic2VuZFJlcXVlc3RCYWNrZ3JvdW5kIiwic2VuZE1lc3NhZ2UiLCJ0aGVuIiwiY2F0Y2giLCJzZW5kUmVxdWVzdENvbnRlbnQiLCJ0YWJJZCIsImluaXRpYWxpemVTdG9yZSIsImtleSIsImRlZmF1bHRWYWx1ZSIsInN0b3JhZ2VWYWx1ZSIsInN0b3JhZ2VDb250ZW50Iiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0Iiwic3RvcmFnZUdldCIsInN0b3JlIiwic3RvcmVLZXkiLCJzZXRLZXkiLCJzZXRWYWx1ZSIsInVwZGF0ZSIsImRlbEtleSIsImRlbCIsInBpbmdUYWJSZWFkeSIsInBvbGxpbmdJbnRlcnZhbCIsInJlYWR5IiwibWludXRlc1NlY29uZHMiLCJ0b3RhbE1pbGxpU2Vjb25kcyIsInRydW5jYXRlIiwidG90YWxTZWNvbmRzIiwiTWF0aCIsImZsb29yIiwiYmVzdEJ1eURlY29kZVF1ZXVlIiwicXVldWVDb2RlIiwic3BsaXRDb2RlIiwic3BsaXQiLCJwYXJzZWRDb2RlIiwiY2h1bmsiLCJwYXJzZUludCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIlN5bWJvbCIsInF1ZXVlIiwiZm9yRWFjaCIsImZuIiwiciIsImEiLCJoYXNBd2FpdCIsImN1cnJlbnREZXBzIiwib3V0ZXJSZXNvbHZlIiwicmVqZWN0IiwiaXNFdmFsdWF0aW5nIiwibmVzdGVkIiwid2hlbkFsbCIsImRlcHMiLCJvblJlc29sdmUiLCJvblJlamVjdCIsImRlcCIsImkiLCJwcm9taXNlIiwicmVqIiwicmVqZWN0Rm4iLCJyZXQiLCJ3cmFwRGVwcyIsImQiLCJPIiwiY2h1bmtJZHMiLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiaiIsImV2ZXJ5Iiwic3BsaWNlIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJobWQiLCJjaGlsZHJlbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJiaW5kIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=