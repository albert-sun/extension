(()=>{"use strict";var e,t,r,o,n,a,s={270:(e,t,r)=>{r.a(e,(async o=>{r.d(t,{Z:()=>g});var n=r(234),a=r(655),s=r(568),i=r(54),c=r(169),u=r(357);r(434),r(374),e=r.hmd(e);var d=o([u,c]);function l(e){const t={c:n.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:n.ZTd,p:n.ZTd,i:n.ZTd,o:n.ZTd,d:n.ZTd};return(0,n.YyZ)("SvelteRegisterBlock",{block:t,id:l.name,type:"component",source:"",ctx:e}),t}[u,c]=d.then?await d:d;const f="background";function b(e,t,r){let{$$slots:o={},$$scope:d}=t;(0,n.KXV)("Background",o,[]),(0,s.H3)((function(){return(0,a.mG)(this,void 0,void 0,(function*(){yield(0,u.Oc)(),(0,c.Rl)(),(0,c.dO)();const e={"add-sync-request":u.ii,"create-tab-ready":u.uS,"sound-notification":u.Fy,"merge-product_queues":c.gD,"background-add_to_cart":c.IK};(0,i.Z0)(f,e)}))}));const l=[];return Object.keys(t).forEach((e=>{~l.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Background> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:a.mG,onMount:s.H3,messageProcessHandlers:i.Z0,mergeProductQueues:c.gD,processAddToCart:c.IK,setupBestBuyInterval:c.dO,setupBestBuyRequestHandlers:c.Rl,addSyncRequest:u.ii,createTabReady:u.uS,mergeSettings:u.Oc,soundNotification:u.Fy,loggingSelf:f}),[]}class p extends n.Mjb{constructor(e){super(e),(0,n.S1n)(this,e,b,l,n.N8,{}),(0,n.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Background",options:e,id:l.name})}}e&&e.hot;const g=p}))},650:(e,t,r)=>{r.a(e,(async e=>{var t=r(270),o=e([t]);new(t=(o.then?await o:o)[0]).Z({target:document.body,props:{}})}))},169:(e,t,r)=>{r.a(e,(async e=>{r.d(t,{Rl:()=>d,dO:()=>l,gD:()=>b,IK:()=>p});var o=r(261),n=r(309),a=r(54),s=r(357),i=e([s,n]);[s,n]=i.then?await i:i;const c="background_bestbuy",u="https://www.bestbuy.com/";function d(){(0,a.Vf)(c,"Setting-up webRequest interception for addToCart requests");const e={};chrome.webRequest.onBeforeRequest.addListener((function(t){if(void 0!==t.requestBody){const r=decodeURIComponent(String.fromCharCode.apply(null,new Uint8Array(t.requestBody.raw[0].bytes))),o=JSON.parse(r);e[t.requestId]=o;const n=o.items.map((e=>e.skuId)),s=JSON.stringify(n);(0,a.Vf)(c,`[webRequest.onBeforeRequest] Finished caching POST body for request ${t.requestId} with SKU(s) ${s}`,"debug")}}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestBody","blocking"]),chrome.webRequest.onBeforeSendHeaders.addListener((function(t){void 0!==e[t.requestId]||(0,a.Vf)(c,`[webRequest.onBeforeSendHeaders] Couldn't find cached POST body for request ${t.requestId}`,"error")}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestHeaders","blocking"]),chrome.webRequest.onHeadersReceived.addListener((function(t){var r;let i="",u="";for(const e of t.responseHeaders||[])"a2ctransactionreferenceid"===e.name?i=e.value:"a2ctransactioncode"===e.name&&(u=e.value);if((200!==t.statusCode||!0===(0,o.U2)(n.Xd.store).bestbuy.requeueSuccess)&&""!==i&&""!==u){const d=e[t.requestId];if(void 0===d)return void(0,a.Vf)(c,`[webRequest.onHeadersReceived] Couldn't find cached POST body for request ${t.requestId}`,"error");const l=null===(r=d.items[0])||void 0===r?void 0:r.skuId,b=(new Date).getTime(),p=(0,a.ul)(u),[g,y]=(0,a.OJ)(p),h={startTime:b,a2cTransactionReferenceId:i,a2cTransactionCode:u,queueTime:p};(0,a.Vf)(c,`[webRequest.onHeadersReceived] Queue response headers detected for request ${t.requestId} with time ${g}m ${y}s`);let m="";const w=n.D7[l];let v=(0,o.U2)(n.Ag.store)[l]||{};if(!0===(0,o.U2)(n.Xd.store).bestbuy.replaceQueue&&Object.keys(v).length>0){let e,t,r;[v,e,t,r]=f(v,h,b),m=!0===e?`[${w}] Queue replacement enabled, replacing with ${t}m ${r}s improvement`:`[${w}] Queue replacement enabled, not replacing because ${t}m ${r}s worse`}else m=`[${w}] Intercepted new queue with timer ${g}m ${y}s`,v[i]=h;n.Ag.set(l,v);const $="Best Buy - Queue Intercepted";(0,s.Fy)("queue",$,m,["bestbuy","notificationQueue"])}delete e[t.requestId]}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["responseHeaders","blocking"])}function l(){const e=new Set;setInterval((async function(){const t=(new Date).getTime();for(const[r,s]of Object.entries((0,o.U2)(n.Ag.store)))for(const[i,c]of Object.entries(s)){const u=c.startTime+c.queueTime-t;u<=0&&(u>-3e5?!0===(0,o.U2)(n.Xd.store).bestbuy.autoAddQueue&&!1===e.has(c.a2cTransactionReferenceId)?((0,a.Vf)("background-bestbuy",`Queue popped for SKU ${r}, broadcasting add-to-cart request`),e.add(c.a2cTransactionReferenceId),await p(r,c.a2cTransactionReferenceId,c.a2cTransactionCode)):(0,a.Vf)("background-bestbuy",`Queue popped for SKU ${r}, waiting for manual because of setting`):((0,a.Vf)("background-bestbuy",`Queue popped but expired for ${r}, silently deleting`),e.delete(c.a2cTransactionReferenceId),delete s[i],n.Ag.set(r,s)))}}),100)}function f(e,t,r){const o=Object.entries(e).map((([e,t])=>[t.startTime+t.queueTime-r,e,t]));o.sort(((e,t)=>e[0]-t[0]));const n=o[0][0],s=t.a2cTransactionReferenceId,i=t.startTime+t.queueTime-r;o.push([i,s,t]),o.sort(((e,t)=>e[0]-t[0]));const[c,u,d]=(0,a.OJ)(n-i,!0),l=o[0][1]===t.a2cTransactionReferenceId;e={};const f=o[0];return e[f[1]]=f[2],[e,l,c,u]}async function b(e){const t=(new Date).getTime();for(const[r,s]of Object.entries(e)){let e=(0,o.U2)(n.Ag.store)[r]||{};if(void 0===e[s[1]]){const[i,u,d]=s,l=(0,a.ul)(s[1]),b=i+l-t,[p,g,y]=(0,a.OJ)(b);if(b>-3e5){const t={startTime:i,a2cTransactionReferenceId:u,a2cTransactionCode:d,queueTime:l};if(!0===(0,o.U2)(n.Xd.store).bestbuy.replaceQueue&&Object.keys(e).length>0){let o,n,s;[e,o,n,s]=f(e,t,i),!0===o?(0,a.Vf)(c,`Importing queue for SKU ${r} has ${n}m ${s}s improvement, replacing`):(0,a.Vf)(c,`Importing queue for SKU ${r} worse by ${n}m ${s}s improvement, not replacing`)}else!1===y?(0,a.Vf)(c,`Importing queue for SKU ${r} with ${p}m ${g}s remaining`):(0,a.Vf)(c,`Importing queue for SKU ${r} already popped for ${p}m ${g}s`);n.Ag.set(r,e)}}}}async function p(e,t,r){const i={handler:"content-add_to_cart",args:[e,t,r]};let d;for(;;){(0,a.Vf)(c,"Broadcasting soon-queued synchronous add-to-cart request");let e=await(0,s.ii)(i,"bestbuy");if("error"===e.result)return void(0,a.Vf)(c,`Error performing streamlined add-to-cart request: ${e.payload}`);if("not-found"===e.result){if(!0===(0,o.U2)(n.Xd.store).global.autoOpenTab){(0,a.Vf)(c,`Matching tab not found, creating new tab with url ${u}`),await(0,s.uS)(u),(0,a.Vf)(c,"Tab creation finished, re-broadcasting initial request");continue}{(0,a.Vf)(c,"Matching tab not found, showing notification and exiting");const e=await(0,s.Fy)("error","Best Buy - Tab Not Found","Matching tab not found or content script not responding. Open a matching tab or try reloading the page.",["global","notificationNotFound"]);return void browser.notifications.onButtonClicked.addListener((async function(t,r){t===e&&0===r&&await(0,s.uS)(u,!1)}))}}d=e.payload.value;break}const l=n.D7[e];if(200===d){(0,a.Vf)(c,`Successfully added ${l} to cart`);const e=await(0,s.Fy)("success","Best Buy - Successful Cart",l,["bestbuy","notificationSuccess"],["Go to Cart Page"]);browser.notifications.onButtonClicked.addListener((async function(t,r){t===e&&0===r&&await(0,s.uS)("https://www.bestbuy.com/cart",!1)}))}else if(400===d)(0,a.Vf)(c,`Failed to cart ${l}, either invaild queue or unavailable`),await(0,s.Fy)("failure","Best Buy - Failed to Cart",l,["bestbuy","notificationFailure"]);else{let e;(0,a.Vf)(c,`Error carting ${l} with status ${status}`),e=!0===(0,o.U2)(n.Xd.store).bestbuy.autoReload?`Error carting ${l} - possible rate limiting, automatically reloading tab and retrying request`:`Error carting ${l} - possible rate limiting, not automatically reloading tab`,await(0,s.Fy)("error",`Best Buy - Error ${status}`,e,["bestbuy","notificationError"])}}}))},357:(e,t,r)=>{r.a(e,(async e=>{r.d(t,{Oc:()=>f,ii:()=>b,uS:()=>p,Fy:()=>g});var o=r(261),n=r(313),a=r(309),s=r(54),i=e([a]);a=(i.then?await i:i)[0];const c="background_main";let u={success:"../resources/notification_success.mp3",failure:"../resources/notification_queue.mp3",error:"../resources/notification_ratelimit.mp3",queue:"../resources/notification_queue.mp3"},d=[],l=!1;async function f(){(0,s.Vf)(c,"Merging stored settings with extension display values");for(const[e,t]of Object.entries(a.kA)){const r=(0,o.U2)(a.Xd.store)[e];if(void 0!==r){let o=!1;for(const[n,a]of Object.entries(t.settings)){const t=r[n];void 0!==t&&typeof t==typeof a.default||((0,s.Vf)(c,`Non-matching settings [${e}][${n}], merging`),r[n]=a.default,o=!0)}!0===o&&a.Xd.set(e,r)}else{(0,s.Vf)(c,`Stored settings category [${e}] not found, initializing`);const r=Object.entries(t.settings).reduce(((e,[t,r])=>(e[t]=r.default,e)),{});a.Xd.set(e,r)}}}async function b(e,t){return(0,s.Vf)(c,"Pushing request to back of queue for sync execution"),new Promise((r=>{const o=Object.assign(Object.assign({},e),{urlMatch:t,resolve:r});d.push(o),async function(){if(!0!==l){l=!0;try{for(;d.length>0;){const e=d.shift(),t={result:"not-found",payload:{value:void 0,execute:[]}},r=JSON.stringify(e);(0,s.Vf)(c,`Executing queued sequential request with body ${r}`);const o=n.$R[null==e?void 0:e.urlMatch],a=await browser.tabs.query({url:n.$R[null==e?void 0:e.urlMatch],discarded:!1});0===a.length&&((0,s.Vf)(c,`Couldn't find matching browser tabs with URL glob ${o}, resolving with not-found response`),e.resolve(t));let i=!1;for(const r of a){(0,s.Vf)(c,`Attempting to ping tab with ID ${r.id} and URL ${r.url}`);const o=await(0,s.No)(r.id,n.Au);if("error"===o.result){(0,s.Vf)(c,`Error pinging content script: ${o.payload.value}`);continue}(0,s.Vf)(c,"Received successful ping response, broadcasting request");const a={handler:e.handler,args:e.args},u=await(0,s.No)(r.id,a);if("error"===u.result)throw new Error(`error performing handler: ${u}`);t.result="ok",t.payload=u.payload,void 0!==u.payload.execute?((0,s.Vf)(c,`Response received, performing execution handlers ${u.payload.execute}`),u.payload.execute.includes("reload")&&((0,s.Vf)(c,`Executing reload for tab with ID ${r.id}`),await browser.tabs.reload(r.id),await(0,s._v)(2500),await(0,s.YG)(r.id,100)),u.payload.execute.includes("retry")&&((0,s.Vf)(c,"Executing retry, re-pushing request to back of queue"),d.push(e),i=!0)):(0,s.Vf)(c,"Response received, no execution handler necessary");break}if(!0===i)continue;const u=JSON.stringify(t);(0,s.Vf)(c,`Finished processing queued request, responding with body ${u}`),e.resolve(t)}}catch(e){throw l=!1,e}l=!1}}()}))}async function p(e,t=!0){const r=await browser.tabs.create({active:!1,url:e});!0===t&&await(0,s.YG)(r.id,100)}async function g(e,t,r,n,s){let i;return!0===(0,o.U2)(a.Xd.store)[n[0]][n[1]]&&(i=await new Promise((e=>{chrome.notifications.create({type:"basic",title:t,message:r,iconUrl:"../resources/icon_512_dark.png",buttons:null==s?void 0:s.map((e=>({title:e})))},(function(t){e(t)}))})),setTimeout((()=>{chrome.notifications.clear(i)}),(0,o.U2)(a.Xd.store).global.durationNotification)),!0===(0,o.U2)(a.Xd.store).global.playNotifications&&new Audio(u[e]).play(),i}}))},313:(e,t,r)=>{r.d(t,{$R:()=>o,Au:()=>n});const o={bestbuy:"https://*.bestbuy.com/*"},n={handler:"ping",args:[]}},309:(e,t,r)=>{r.a(e,(async e=>{r.d(t,{Xd:()=>a,Ag:()=>s,kA:()=>i,D7:()=>u});var o=r(261),n=r(54);(0,o.fZ)([]);const a=await(0,n.MO)("settings",{}),s=await(0,n.MO)("bestbuy-queues",{}),i=(await $.ajax("../resources/changelog.json",{data:"json"}),await $.ajax("../resources/settings.json",{data:"json"})),c=await $.ajax("../resources/items_bestbuy.json",{data:"json"}),u=(0,n.ep)(c);e()}),1)},54:(e,t,r)=>{r.d(t,{_v:()=>a,ep:()=>s,Vf:()=>i,Z0:()=>c,No:()=>d,MO:()=>l,YG:()=>f,OJ:()=>b,ul:()=>p});var o=r(261),n=r(313);function a(e){return new Promise((t=>setTimeout(t,e)))}function s(e){return Object.entries(e).reduce(((e,[t,r])=>Object.assign(Object.assign({},e),Object.entries(r.items).reduce(((e,[t,r])=>(e[r.data]=r.display,e)),{}))),{})}function i(e,t,r="info"){const o=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===r?console.log(o):"debug"===r?console.debug(o):"warn"===r?console.warn(o):"error"===r&&console.error(o)}function c(e,t){browser.runtime.onMessage.addListener((async(r,o)=>{const n=r;let a={result:"ok",payload:{value:void 0,execute:[]}};const s=t[n.handler];if(void 0!==s){i(e,`Processing handler ${n.handler} with arguments ${JSON.stringify(n.args)}`);try{const e=await s(...n.args||[]);a.result="ok",a.payload=e}catch(t){const r=t.message;a.result="error",a.payload={value:r,execute:[]},i(e,`Error processing handler ${n.handler}: ${r}`,"error")}}return a}))}async function u(e){return await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:{value:e.message,execute:[]}})))}))}async function d(e,t){return await new Promise((r=>{browser.tabs.sendMessage(e,t).then((e=>r(e))).catch((e=>r({result:"error",payload:{value:e.message,execute:[]}})))}))}async function l(e,t){const r=await async function(e,t){const r=await browser.storage.local.get(e);return void 0===r[e]&&(r[e]=t),r[e]}(e,t),n=(0,o.fZ)(r);return browser.runtime.onMessage.addListener((async(t,r)=>{const o=t;if("update-set"===o.handler){const[t,r,a]=o.args;t===e&&n.update((e=>(e[r]=a,e)))}else if("update-delete"===o.handler){const[t,r]=o.args;t===e&&n.update((e=>(delete e[r],e)))}})),{store:n,set:(t,r)=>{n.update((e=>(e[t]=r,e))),browser.storage.local.set({[e]:(0,o.U2)(n)}),u({handler:"update-set",args:[e,t,r]})},del:t=>{n.update((e=>(delete e[t],e))),browser.storage.local.set({[e]:(0,o.U2)(n)}),u({handler:"update-del",args:[e,t]})}}}async function f(e,t,r=!0){for(;!0===r&&"ok"!==(await d(e,n.Au)).result;)await a(t)}function b(e,t=!1){let r=!1;e<0&&(e*=-1,r=!0);const o=e/1e3;let n=Math.floor(o/60),a=o%60;return!0===t&&(n=Math.floor(n),a=Math.floor(a)),[n,a,r]}function p(e){const t=e.split("-"),r=t.map((e=>parseInt(e,16)));return 1e3*parseInt(t[2]+t[3],16)/r[1]}}},i={};function c(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={id:e,loaded:!1,exports:{}};return s[e](r,r.exports,c),r.loaded=!0,r.exports}c.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),n=(e,t)=>e?e.push(t):o(t),c.a=(a,s,i)=>{var c,u,d,l=i&&[],f=a.exports,b=!0,p=!1,g=(t,r,o)=>{p||(p=!0,r.r+=t.length,t.map(((t,n)=>t[e](r,o))),p=!1)},y=new Promise(((e,t)=>{d=t,u=()=>(e(f),r(l),l=0)}));y[t]=f,y[e]=(e,t)=>{if(b)return o(e);c&&g(c,e,t),n(l,e),y.catch(t)},a.exports=y,s((a=>{if(!a)return u();var s,i;c=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var s=[];a.then((e=>{i[t]=e,r(s),s=0}));var i={};return i[e]=(e,t)=>(n(s,e),a.catch(t)),i}}var c={};return c[e]=e=>o(e),c[t]=a,c})))(a);var d=new Promise(((e,r)=>{(s=()=>e(i=c.map((e=>e[t])))).r=0,g(c,s,r)}));return s.r?d:i})).then(u,d),b=!1},a=[],c.O=(e,t,r,o)=>{if(!t){var n=1/0;for(d=0;d<a.length;d++){for(var[t,r,o]=a[d],s=!0,i=0;i<t.length;i++)(!1&o||n>=o)&&Object.keys(c.O).every((e=>c.O[e](t[i])))?t.splice(i--,1):(s=!1,o<n&&(n=o));if(s){a.splice(d--,1);var u=r();void 0!==u&&(e=u)}}return e}o=o||0;for(var d=a.length;d>0&&a[d-1][2]>o;d--)a[d]=a[d-1];a[d]=[t,r,o]},c.d=(e,t)=>{for(var r in t)c.o(t,r)&&!c.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),c.j=979,(()=>{var e={979:0};c.O.j=t=>0===e[t];var t=(t,r)=>{var o,n,[a,s,i]=r,u=0;if(a.some((t=>0!==e[t]))){for(o in s)c.o(s,o)&&(c.m[o]=s[o]);if(i)var d=i(c)}for(t&&t(r);u<a.length;u++)n=a[u],c.o(e,n)&&e[n]&&e[n][0](),e[a[u]]=0;return c.O(d)},r=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var u=c.O(void 0,[154],(()=>c(650)));u=c.O(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,