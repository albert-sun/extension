(()=>{"use strict";var e,t,a,o,r,i,s={270:(e,t,a)=>{a.a(e,(async o=>{a.d(t,{Z:()=>y});var r=a(234),i=a(655),s=a(568),n=a(659),d=a(169),c=a(357);a(434),a(374),e=a.hmd(e);var l=o([c,d]);function u(e){const t={c:r.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:r.ZTd,p:r.ZTd,i:r.ZTd,o:r.ZTd,d:r.ZTd};return(0,r.YyZ)("SvelteRegisterBlock",{block:t,id:u.name,type:"component",source:"",ctx:e}),t}[c,d]=l.then?await l:l;const G="background";function p(e,t,a){let{$$slots:o={},$$scope:l}=t;(0,r.KXV)("Background",o,[]),(0,s.H3)((function(){return(0,i.mG)(this,void 0,void 0,(function*(){yield(0,c.Oc)(),(0,d.Rl)();const e={"add-sync-request":c.ii,"create-tab-ready":c.uS,"sound-notification":c.Fy,"merge-product_queues":d.gD,"background-add_to_cart":d.IK};(0,n.Z0)(G,e)}))}));const u=[];return Object.keys(t).forEach((e=>{~u.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Background> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:i.mG,onMount:s.H3,messageProcessHandlers:n.Z0,mergeProductQueues:d.gD,processAddToCart:d.IK,setupBestBuyRequestHandlers:d.Rl,addSyncRequest:c.ii,createTabReady:c.uS,mergeSettings:c.Oc,soundNotification:c.Fy,loggingSelf:G}),[]}class T extends r.Mjb{constructor(e){super(e),(0,r.S1n)(this,e,p,u,r.N8,{}),(0,r.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Background",options:e,id:u.name})}}e&&e.hot;const y=T}))},650:(e,t,a)=>{a.a(e,(async e=>{var t=a(270),o=e([t]);new(t=(o.then?await o:o)[0]).Z({target:document.body,props:{}})}))},169:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Rl:()=>u,gD:()=>p,IK:()=>T});var o=a(261),r=a(313),i=a(178),s=a(659),n=a(357),d=e([n,i]);[n,i]=d.then?await d:d;const c="background_bestbuy",l="https://www.bestbuy.com/";function u(){(0,s.Vf)(c,"Setting-up webRequest interception for addToCart requests");const e={};chrome.webRequest.onBeforeRequest.addListener((function(t){if(void 0!==t.requestBody){const a=decodeURIComponent(String.fromCharCode.apply(null,new Uint8Array(t.requestBody.raw[0].bytes))),o=JSON.parse(a);e[t.requestId]=o;const r=o.items.map((e=>e.skuId)),i=JSON.stringify(r);(0,s.Vf)(c,`[webRequest.onBeforeRequest] Finished caching POST body for request ${t.requestId} with SKU(s) ${i}`,"debug")}}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestBody","blocking"]),chrome.webRequest.onBeforeSendHeaders.addListener((function(t){void 0!==e[t.requestId]||(0,s.Vf)(c,`[webRequest.onBeforeSendHeaders] Couldn't find cached POST body for request ${t.requestId}`,"error")}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["requestHeaders","blocking"]),chrome.webRequest.onHeadersReceived.addListener((function(t){var a;let d="",l="";for(const e of t.responseHeaders||[])"a2ctransactionreferenceid"===e.name?d=e.value:"a2ctransactioncode"===e.name&&(l=e.value);if((200!==t.statusCode||!0===(0,o.U2)(i.Xd.store).bestbuy.requeueSuccess)&&""!==d&&""!==l){const u=e[t.requestId];if(void 0===u)return void(0,s.Vf)(c,`[webRequest.onHeadersReceived] Couldn't find cached POST body for request ${t.requestId}`,"error");const p=null===(a=u.items[0])||void 0===a?void 0:a.skuId,T=(new Date).getTime(),y=(0,s.ul)(l),[f,R]=(0,s.OJ)(y),I={startTime:T,a2cTransactionReferenceId:d,a2cTransactionCode:l,queueTime:y};(0,s.Vf)(c,`[webRequest.onHeadersReceived] Queue response headers detected for request ${t.requestId} with time ${f}m ${R}s`);let A="";const S=r.D7[p];let g=(0,o.U2)(i.Ag.store)[p]||{};if(!0===(0,o.U2)(i.Xd.store).bestbuy.replaceQueue&&Object.keys(g).length>0){let e,t,a;[g,e,t,a]=G(g,I,T),A=!0===e?`[${S}] Queue replacement enabled, replacing with ${t}m ${a}s improvement`:`[${S}] Queue replacement enabled, not replacing because ${t}m ${a}s worse`,console.debug(e),console.debug(JSON.stringify(g))}else A=`[${S}] Intercepted new queue with timer ${f}m ${R}s`,g[d]=I;i.Ag.set(p,g);const X="Best Buy - Queue Intercepted";(0,n.Fy)("queue",X,A,["bestbuy","notificationQueue"])}delete e[t.requestId]}),{urls:["*://*.bestbuy.com/cart/api/v1/addToCart"]},["responseHeaders","blocking"])}function G(e,t,a){const o=Object.entries(e).map((([e,t])=>[t.startTime+t.queueTime-a,e,t]));o.sort(((e,t)=>e[0]-t[0]));const r=o[0][0],i=t.a2cTransactionReferenceId,n=t.startTime+t.queueTime-a;o.push([n,i,t]),o.sort(((e,t)=>e[0]-t[0]));const[d,c,l]=(0,s.OJ)(r-n,!0),u=o[0][1]===t.a2cTransactionReferenceId;e={};const G=o[0];return e[G[1]]=G[2],[e,u,d,c]}async function p(e){const t=(new Date).getTime();for(const[a,r]of Object.entries(e)){let e=(0,o.U2)(i.Ag.store)[a]||{};if(void 0===e[r[1]]){const[n,d,l]=r,u=(0,s.ul)(r[1]),p=n+u-t,[T,y,f]=(0,s.OJ)(p);if(p>-3e5){const t={startTime:n,a2cTransactionReferenceId:d,a2cTransactionCode:l,queueTime:u};if(!0===(0,o.U2)(i.Xd.store).bestbuy.replaceQueue&&Object.keys(e).length>0){let o,r,i;[e,o,r,i]=G(e,t,n),!0===o?(0,s.Vf)(c,`Importing queue for SKU ${a} has ${r}m ${i}s improvement, replacing`):(0,s.Vf)(c,`Importing queue for SKU ${a} worse by ${r}m ${i}s improvement, not replacing`)}else!1===f?(0,s.Vf)(c,`Importing queue for SKU ${a} with ${T}m ${y}s remaining`):(0,s.Vf)(c,`Importing queue for SKU ${a} already popped for ${T}m ${y}s`);i.Ag.set(a,e)}}}}async function T(e,t,a){const d={handler:"content-add_to_cart",args:[e,t,a]};let u;for(;;){(0,s.Vf)(c,"Broadcasting soon-queued synchronous add-to-cart request");let e=await(0,n.ii)(d,"bestbuy");if("error"===e.result)return void(0,s.Vf)(c,`Error performing streamlined add-to-cart request: ${e.payload}`);if("not-found"===e.result){if(!0===(0,o.U2)(i.Xd.store).global.autoOpenTab){(0,s.Vf)(c,`Matching tab not found, creating new tab with url ${l}`),await(0,n.uS)(l),(0,s.Vf)(c,"Tab creation finished, re-broadcasting initial request");continue}{(0,s.Vf)(c,"Matching tab not found, showing notification and exiting");const e=await(0,n.Fy)("error","Best Buy - Tab Not Found","Matching tab not found or content script not responding. Open a matching tab or try reloading the page.",["global","notificationNotFound"]);return void browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,n.uS)(l,!1)}))}}u=e.payload.value;break}const G=r.D7[e];if(200===u){(0,s.Vf)(c,`Successfully added ${G} to cart`);const e=await(0,n.Fy)("success","Best Buy - Successful Cart",G,["bestbuy","notificationSuccess"]);browser.notifications.onButtonClicked.addListener((async function(t,a){t===e&&0===a&&await(0,n.uS)("https://www.bestbuy.com/cart",!1)}))}else if(400===u)(0,s.Vf)(c,`Failed to cart ${G}, either invaild queue or unavailable`),await(0,n.Fy)("failure","Best Buy - Failed to Cart",G,["bestbuy","notificationFailure"]);else{let e;(0,s.Vf)(c,`Error carting ${G} with status ${status}`),e=!0===(0,o.U2)(i.Xd.store).bestbuy.autoReload?`Error carting ${G} - possible rate limiting, automatically reloading tab and retrying request`:`Error carting ${G} - possible rate limiting, not automatically reloading tab`,await(0,n.Fy)("error",`Best Buy - Error ${status}`,e,["bestbuy","notificationError"])}}}))},357:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{Oc:()=>p,ii:()=>T,uS:()=>y,Fy:()=>f});var o=a(261),r=a(313),i=a(178),s=a(256),n=a(659),d=e([i]);i=(d.then?await d:d)[0];const c="background_main";let l={success:"../resources/notification_success.mp3",failure:"../resources/notification_queue.mp3",error:"../resources/notification_ratelimit.mp3",queue:"../resources/notification_queue.mp3"},u=[],G=!1;async function p(){(0,n.Vf)(c,"Merging stored settings with extension display values");for(const[e,t]of Object.entries(r.kA)){const a=(0,o.U2)(i.Xd.store)[e];if(void 0!==a){let o=!1;for(const[r,i]of Object.entries(t.settings)){const t=a[r];void 0!==t&&typeof t==typeof i.default||((0,n.Vf)(c,`Non-matching settings [${e}][${r}], merging`),a[r]=i.default,o=!0)}!0===o&&i.Xd.set(e,a)}else{(0,n.Vf)(c,`Stored settings category [${e}] not found, initializing`);const a=Object.entries(t.settings).reduce(((e,[t,a])=>(e[t]=a.default,e)),{});i.Xd.set(e,a)}}}async function T(e,t){return(0,n.Vf)(c,"Pushing request to back of queue for sync execution"),new Promise((a=>{const o=Object.assign(Object.assign({},e),{urlMatch:t,resolve:a});u.push(o),async function(){if(!0!==G){for(G=!0;u.length>0;){const e=u.shift(),t={result:"not-found",payload:{value:void 0,execute:[]}},a=JSON.stringify(e);(0,n.Vf)(c,`Executing queued sequential request with body ${a}`);const o=i.$R[null==e?void 0:e.urlMatch],r=await browser.tabs.query({url:i.$R[null==e?void 0:e.urlMatch],discarded:!1});0===r.length&&((0,n.Vf)(c,`Couldn't find matching browser tabs with URL glob ${o}, resolving with not-found response`),e.resolve(t));let d=!1;for(const a of r){(0,n.Vf)(c,`Attempting to ping tab with ID ${a.id} and URL ${a.url}`);const o=await(0,n.No)(a.id,s.A);if("error"===o.result){(0,n.Vf)(c,`Error pinging content script: ${o.payload.value}`);continue}(0,n.Vf)(c,"Received successful ping response, broadcasting request");const r={handler:e.handler,args:e.args},i=await(0,n.No)(a.id,r);if("error"===i.result)throw new Error(`error performing handler: ${i}`);t.result="ok",t.payload=i.payload,void 0!==i.payload.execute?((0,n.Vf)(c,`Response received, performing execution handlers ${i.payload.execute}`),i.payload.execute.includes("reload")&&((0,n.Vf)(c,`Executing reload for tab with ID ${a.id}`),await browser.tabs.reload(a.id),await(0,n._v)(2500),await(0,n.YG)(a.id,100)),i.payload.execute.includes("retry")&&((0,n.Vf)(c,"Executing retry, re-pushing request to back of queue"),u.push(e),d=!0)):(0,n.Vf)(c,"Response received, no execution handler necessary");break}if(!0===d)continue;const l=JSON.stringify(t);(0,n.Vf)(c,`Finished processing queued request, responding with body ${l}`),e.resolve(t)}G=!1}}()}))}async function y(e,t=!0){const a=await browser.tabs.create({active:!1,url:e});!0===t&&await(0,n.YG)(a.id,(0,o.U2)(i.Xd.store).global.pollingInerval)}async function f(e,t,a,r,s){let n;return!0===(0,o.U2)(i.Xd.store)[r[0]][r[1]]&&(n=await new Promise((e=>{chrome.notifications.create({type:"basic",title:t,message:a,iconUrl:"../resources/icon_512_dark.png",buttons:null==s?void 0:s.map((e=>({title:e})))},(function(t){e(t)}))})),setTimeout((()=>{chrome.notifications.clear(n)}),(0,o.U2)(i.Xd.store).global.durationNotification)),!0===(0,o.U2)(i.Xd.store).global.playNotifications&&new Audio(l[e]).play(),n}}))},313:(e,t,a)=>{a.d(t,{kA:()=>o,D7:()=>r}),(0,a(261).fZ)([]);const o={global:{display:"Global Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoOpenTab:{display:"Automatically open tab when script not detected",default:!0},playNotifications:{display:"Play notification sounds on events",default:!0},notificationError:{display:"Show desktop notification on extension error",default:!0},durationNotification:{display:"Notification popup duration before clearing",default:5e3,args:{suffix:"ms"}}}},bestbuy:{display:"Best Buy Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoAddQueue:{display:"Automatically execute queue add-to-cart when finished",default:!0},autoReload:{display:"Automatically reload tab on potential rate-limit (403/500)",default:!0},replaceQueue:{display:"Maintain shortest queue per SKU instead of multiple",default:!0},requeueSuccess:{display:"Re-queue with response queue on successful add-to-cart",default:!0},notificationSuccess:{display:"Show desktop notification on successful add-to-cart",default:!0},notificationFailure:{display:"Show desktop notification on failed add-to-cart",default:!0},notificationQueue:{display:"Show desktop notification on new queue interception",default:!0},notificationRateLimit:{display:"Show desktop notification on potential rate-limit (403/500)",default:!0}}}},r=(i={"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}},Object.entries(i).reduce(((e,[t,a])=>Object.assign(Object.assign({},e),Object.entries(a.items).reduce(((e,[t,a])=>(e[a.data]=a.display,e)),{}))),{}));var i},178:(e,t,a)=>{a.a(e,(async e=>{a.d(t,{$R:()=>r,Xd:()=>i,Ag:()=>s});var o=a(659);const r={bestbuy:"https://*.bestbuy.com/*"},i=await(0,o.MO)("settings",{}),s=await(0,o.MO)("bestbuy-queues",{});e()}),1)},256:(e,t,a)=>{a.d(t,{A:()=>o});const o={handler:"ping",args:[]}},659:(e,t,a)=>{a.d(t,{_v:()=>i,Vf:()=>s,Z0:()=>n,No:()=>c,MO:()=>l,YG:()=>u,OJ:()=>G,ul:()=>p});var o=a(261),r=a(256);function i(e){return new Promise((t=>setTimeout(t,e)))}function s(e,t,a="info"){const o=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===a?console.log(o):"debug"===a?console.debug(o):"warn"===a?console.warn(o):"error"===a&&console.error(o)}function n(e,t){browser.runtime.onMessage.addListener((async(a,o)=>{console.log("<= received"),console.log(a);const r=a;let i={result:"ok",payload:{value:void 0,execute:[]}};const n=t[r.handler];if(void 0!==n){s(e,`Processing handler ${r.handler} with arguments ${JSON.stringify(r.args)}`);try{const e=await n(...r.args||[]);i.result="ok",i.payload=e}catch(t){const a=t.message;i.result="error",i.payload={value:a,execute:[]},s(e,`Error processing handler ${r.handler}: ${a}`,"error")}}return i}))}async function d(e){return console.log("=> sent"),console.log(e),await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:{value:e.message,execute:[]}})))}))}async function c(e,t){return await new Promise((a=>{browser.tabs.sendMessage(e,t).then((e=>a(e))).catch((e=>a({result:"error",payload:{value:e.message,execute:[]}})))}))}async function l(e,t){const a=await async function(e,t){const a=await browser.storage.local.get(e);return void 0===a[e]&&(a[e]=t),a[e]}(e,t),r=(0,o.fZ)(a);return browser.runtime.onMessage.addListener((async(t,a)=>{const o=t;if("update-set"===o.handler){const[t,a,i]=o.args;t===e&&r.update((e=>(e[a]=i,e)))}else if("update-delete"===o.handler){const[t,a]=o.args;t===e&&r.update((e=>(delete e[a],e)))}})),{store:r,set:(t,a)=>{r.update((e=>(e[t]=a,e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),d({handler:"update-set",args:[e,t,a]})},del:t=>{r.update((e=>(delete e[t],e))),browser.storage.local.set({[e]:(0,o.U2)(r)}),d({handler:"update-del",args:[e,t]})}}}async function u(e,t,a=!0){for(;!0===a&&"ok"!==(await c(e,r.A)).result;)await i(t)}function G(e,t=!1){let a=!1;e<0&&(e*=-1,a=!0);const o=e/1e3;let r=Math.floor(o/60),i=o%60;return!0===t&&(r=Math.floor(r),i=Math.floor(i)),[r,i,a]}function p(e){const t=e.split("-"),a=t.map((e=>parseInt(e,16)));return 1e3*parseInt(t[2]+t[3],16)/a[1]}}},n={};function d(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={id:e,loaded:!1,exports:{}};return s[e](a,a.exports,d),a.loaded=!0,a.exports}d.m=s,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",a=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),r=(e,t)=>e?e.push(t):o(t),d.a=(i,s,n)=>{var d,c,l,u=n&&[],G=i.exports,p=!0,T=!1,y=(t,a,o)=>{T||(T=!0,a.r+=t.length,t.map(((t,r)=>t[e](a,o))),T=!1)},f=new Promise(((e,t)=>{l=t,c=()=>(e(G),a(u),u=0)}));f[t]=G,f[e]=(e,t)=>{if(p)return o(e);d&&y(d,e,t),r(u,e),f.catch(t)},i.exports=f,s((i=>{if(!i)return c();var s,n;d=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];i.then((e=>{n[t]=e,a(s),s=0}));var n={};return n[e]=(e,t)=>(r(s,e),i.catch(t)),n}}var d={};return d[e]=e=>o(e),d[t]=i,d})))(i);var l=new Promise(((e,a)=>{(s=()=>e(n=d.map((e=>e[t])))).r=0,y(d,s,a)}));return s.r?l:n})).then(c,l),p=!1},i=[],d.O=(e,t,a,o)=>{if(!t){var r=1/0;for(l=0;l<i.length;l++){for(var[t,a,o]=i[l],s=!0,n=0;n<t.length;n++)(!1&o||r>=o)&&Object.keys(d.O).every((e=>d.O[e](t[n])))?t.splice(n--,1):(s=!1,o<r&&(r=o));if(s){i.splice(l--,1);var c=a();void 0!==c&&(e=c)}}return e}o=o||0;for(var l=i.length;l>0&&i[l-1][2]>o;l--)i[l]=i[l-1];i[l]=[t,a,o]},d.d=(e,t)=>{for(var a in t)d.o(t,a)&&!d.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d.j=979,(()=>{var e={979:0};d.O.j=t=>0===e[t];var t=(t,a)=>{var o,r,[i,s,n]=a,c=0;if(i.some((t=>0!==e[t]))){for(o in s)d.o(s,o)&&(d.m[o]=s[o]);if(n)var l=n(d)}for(t&&t(a);c<i.length;c++)r=i[c],d.o(e,r)&&e[r]&&e[r][0](),e[i[c]]=0;return d.O(l)},a=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var c=d.O(void 0,[154],(()=>d(650)));c=d.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,