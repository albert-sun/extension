(()=>{"use strict";var e,a={770:(e,a,t)=>{t.d(a,{Z:()=>g});var o=t(234),r=t(655),s=t(568),i=t(261);(0,i.fZ)([]);const d=(n={"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}},Object.entries(n).reduce(((e,[a,t])=>Object.assign(Object.assign({},e),Object.entries(t.items).reduce(((e,[a,t])=>(e[t.data]=t.display,e)),{}))),{}));var n;function c(e,a,t="info"){const o=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${a}`;"info"===t?console.log(o):"debug"===t?console.debug(o):"warn"===t?console.warn(o):"error"===t&&console.error(o)}function G(e,a,t){browser.runtime.onMessage.addListener((async(o,r)=>{const s=o;console.log("receive"),console.log(s);const i=a[s.handler];if("sync"===s.type||void 0!==i){if(console.log("got"),c(e,`Processing ${s.type} handler ${s.handler} with arguments ${JSON.stringify(s.args)}`),"async"===s.type){const e={result:"ok",payload:void 0};try{const a=await i(...s.args||[]);e.payload=a}catch(a){e.result="error",e.payload=a.message}return e}if("sync"===s.type){console.log("sync");const e={result:"ok",payload:void 0,execute:[]};t=t;try{const[a,o]=await t(s);e.payload=a,e.execute=o}catch(a){e.result="error",e.payload=a.message}return e}}throw new Error(`couldn't find handler ${s.handler}`)}))}async function l(e){return console.log("async"),console.log(e),await new Promise((a=>{browser.runtime.sendMessage(e).then((e=>a(e))).catch((e=>a({result:"error",payload:e.message})))}))}async function T(e){return console.log("sync"),console.log(e),await new Promise((a=>{browser.runtime.sendMessage(e).then((e=>a(e))).catch((e=>a({result:"error",payload:e.message,execute:[]})))}))}async function y(e,a){const t=await async function(e,a){const t=await browser.storage.local.get(e);return void 0===t[e]&&(t[e]=a),t[e]}(e,a),o=(0,i.fZ)(t);return browser.runtime.onMessage.addListener((async(a,t)=>{const r=a;if("update-set"===r.handler){const[a,t,s]=r.args;a===e&&o.update((e=>(e[t]=s,e)))}else if("update-delete"===r.handler){const[a,t]=r.args;a===e&&o.update((e=>(delete e[t],e)))}})),{store:o,set:(a,t)=>{o.update((e=>(e[a]=t,e))),browser.storage.local.set({[e]:(0,i.U2)(o)}),l({type:"async",handler:"update-set",args:[e,a,t]})},del:a=>{o.update((e=>(delete e[a],e))),browser.storage.local.set({[e]:(0,i.U2)(o)}),l({type:"async",handler:"update-del",args:[e,a]})}}}function p(e,a=!1){let t=!1;e<0&&(e*=-1,t=!0);const o=e/1e3;let r=Math.floor(o/60),s=o%60;return!0===a&&(r=Math.floor(r),s=Math.floor(s)),[r,s,t]}function u(e){const a=e.split("-"),t=a.map((e=>parseInt(e,16)));return 1e3*parseInt(a[2]+a[3],16)/t[1]}t(434),t(374),e=t.hmd(e);const{Object:R}=o.lig;function I(e){const a={c:o.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:o.ZTd,p:o.ZTd,i:o.ZTd,o:o.ZTd,d:o.ZTd};return(0,o.YyZ)("SvelteRegisterBlock",{block:a,id:I.name,type:"component",source:"",ctx:e}),a}const X="background_bestbuy",A="https://www.bestbuy.com/cart",S="https://www.bestbuy.com/";function F(e,a,t){let i,n,I=o.ZTd,F=()=>(I(),I=(0,o.LdU)(b,(e=>t(4,i=e))),b),E=o.ZTd,g=()=>(E(),E=(0,o.LdU)(M,(e=>t(5,n=e))),M);e.$$.on_destroy.push((()=>I())),e.$$.on_destroy.push((()=>E()));let f,M,O,b,{$$slots:N={},$$scope:h}=a;function U(e,a,t){const o=Object.entries(e).map((([e,a])=>[a.startTime+a.queueTime-t,e,a]));o.sort(((e,a)=>e[0]-a[0]));const r=o[0][0],s=a.a2cTransactionReferenceId,i=a.startTime+a.queueTime-t;o.push([i,s,a]),o.sort(((e,a)=>e[0]-a[0]));const[d,n,c]=p(r-i,!0),G=o[0][1]===a.a2cTransactionReferenceId;return(e={})[a.a2cTransactionReferenceId]=a,[G,d,n]}function m(e){return(0,r.mG)(this,void 0,void 0,(function*(){const a=(new Date).getTime();for(const[t,o]of Object.entries(e))if(void 0===(n[t]||{})[o[1]]){const[e,r,s]=o,d=u(o[1]),G=e+d-a,[l,T,y]=p(G);if(G>-3e5){const o={startTime:e,a2cTransactionReferenceId:r,a2cTransactionCode:s,queueTime:d},G=n[t]||{};if(!0===i.bestbuy.replaceQueue&&Object.keys(G).length>0){const[e,r,s]=U(G,o,a);c(X,!0===e?`Importing queue for SKU ${t} has ${r}m ${s}s improvement, replacing`:`Importing queue for SKU ${t} worse by ${r}m ${s}s improvement, not replacing`)}else c(X,!1===y?`Importing queue for SKU ${t} with ${l}m ${T}s remaining`:`Importing queue for SKU ${t} already popped for ${l}m ${T}s`);f.set(t,G)}}}))}function B(e,a,t){return(0,r.mG)(this,void 0,void 0,(function*(){const o={type:"sync",urlMatch:"bestbuy",handler:"content-add_to_cart",args:[e,a,t]};let s;for(;;){c(X,"Broadcasting soon-queued synchronous add-to-cart request");let e=yield T(o);if("error"===e.result)return void c(X,`Error performing streamlined add-to-cart request: ${e.payload}`);if("not-found"===e.result){if(!0===i.global.autoOpenTab){c(X,`Matching tab not found, creating new tab with url ${S}`);const e={type:"async",handler:"create-tab-ready",args:[]};yield l(e),c(X,"Tab creation finished, re-broadcasting initial request");continue}{c(X,"Matching tab not found, showing notification and exiting");const e={type:"async",handler:"sound-notification",args:["error","Best Buy - Tab Not Found","Matching tab not found or content script not responding. Open a matching tab or try reloading the page.",["global","notificationNotFound"]]},a=(yield l(e)).payload;return void browser.notifications.onButtonClicked.addListener((function(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){if(e===a&&0===t){const e={type:"async",handler:"create-tab-ready",args:[S,!1]};yield l(e)}}))}))}}s=e.payload;break}const n={type:"async",handler:"sound-notification",args:[]},G=d[e];if(200===s){c(X,`Successfully added ${G} to cart`),n.args=["success","Best Buy - Successful Cart",G,["bestbuy","notificationSuccess"]];const e=(yield l(n)).payload;browser.notifications.onButtonClicked.addListener((function(a,t){return(0,r.mG)(this,void 0,void 0,(function*(){if(a===e&&0===t){const e={type:"async",handler:"create-tab-ready",args:[A,!1]};yield l(e)}}))}))}else if(400===s)c(X,`Failed to cart ${G}, either invaild queue or unavailable`),n.args=["failure","Best Buy - Failed to Cart",G,["bestbuy","notificationFailure"]],yield l(n);else{let e;c(X,`Error carting ${G} with status ${status}`),e=!0===i.bestbuy.autoReload?`Error carting ${G} - possible rate limiting, automatically reloading tab and retrying request`:`Error carting ${G} - possible rate limiting, not automatically reloading tab`,n.args=["error",`Best Buy - Error ${status}`,e,["bestbuy","notificationError"]],yield l(n)}}))}(0,o.KXV)("BestBuy",N,[]),(0,s.H3)((function(){return(0,r.mG)(this,void 0,void 0,(function*(){f=yield y("bestbuy-queues",{}),g(t(0,M=f.store)),O=yield y("settings",{}),F(t(1,b=O.store)),G(X,{"merge-product_queues":m,"background-add_to_cart":B})}))}));const C=[];return R.keys(a).forEach((e=>{~C.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<BestBuy> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:r.mG,onMount:s.H3,bestBuyDisplays:d,bestBuyDecodeQueue:u,extensionLog:c,initializeStore:y,messageProcessHandlers:G,minutesSeconds:p,sendRequestBackgroundAsync:l,sendRequestBackgroundSync:T,self:X,bestBuyCartURL:A,bestBuyTabURL:S,bestBuyQueues:f,bestBuyQueues_store:M,settings:O,settings_store:b,updateReplaceQueues:U,mergeProductQueues:m,processAddToCart:B,$settings_store:i,$bestBuyQueues_store:n}),e.$inject_state=e=>{"bestBuyQueues"in e&&(f=e.bestBuyQueues),"bestBuyQueues_store"in e&&g(t(0,M=e.bestBuyQueues_store)),"settings"in e&&(O=e.settings),"settings_store"in e&&F(t(1,b=e.settings_store))},a&&"$$inject"in a&&e.$inject_state(a.$$inject),[M,b]}class E extends o.Mjb{constructor(e){super(e),(0,o.S1n)(this,e,F,I,o.N8,{}),(0,o.YyZ)("SvelteRegisterComponent",{component:this,tagName:"BestBuy",options:e,id:I.name})}}e&&e.hot;const g=E},48:(e,a,t)=>{new(t(770).Z)({target:document.body,props:{}})}},t={};function o(e){var r=t[e];if(void 0!==r)return r.exports;var s=t[e]={id:e,loaded:!1,exports:{}};return a[e](s,s.exports,o),s.loaded=!0,s.exports}o.m=a,e=[],o.O=(a,t,r,s)=>{if(!t){var i=1/0;for(G=0;G<e.length;G++){for(var[t,r,s]=e[G],d=!0,n=0;n<t.length;n++)(!1&s||i>=s)&&Object.keys(o.O).every((e=>o.O[e](t[n])))?t.splice(n--,1):(d=!1,s<i&&(i=s));if(d){e.splice(G--,1);var c=r();void 0!==c&&(a=c)}}return a}s=s||0;for(var G=e.length;G>0&&e[G-1][2]>s;G--)e[G]=e[G-1];e[G]=[t,r,s]},o.d=(e,a)=>{for(var t in a)o.o(a,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:a[t]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),o.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),o.j=563,(()=>{var e={563:0};o.O.j=a=>0===e[a];var a=(a,t)=>{var r,s,[i,d,n]=t,c=0;if(i.some((a=>0!==e[a]))){for(r in d)o.o(d,r)&&(o.m[r]=d[r]);if(n)var G=n(o)}for(a&&a(t);c<i.length;c++)s=i[c],o.o(e,s)&&e[s]&&e[s][0](),e[i[c]]=0;return o.O(G)},t=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];t.forEach(a.bind(null,0)),t.push=a.bind(null,t.push.bind(t))})();var r=o.O(void 0,[154],(()=>o(48)));r=o.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,