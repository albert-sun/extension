(()=>{"use strict";var e,a={59:(e,a,t)=>{t.d(a,{Z:()=>A});var G=t(234),i=t(655),d=t(568),s=t(261);(0,s.fZ)([]);const o="background",r={bestbuy:{autoAddQueue:!0,replaceQueue:!1,requeueSuccess:!0},"bestbuy-notifications":{notificationSuccess:!0,notificationFailure:!0,notificationQueue:!0,notificationRateLimit:!0}};async function T(e,a,t){const G=await async function(e,a){const t=await browser.storage.local.get(e);return void 0===t[e]&&(t[e]=a),t[e]}(a,t),i=(0,s.fZ)(G);return browser.runtime.onMessage.addListener((async(e,t)=>{const G=e;if("update-set"===G.handler){const[e,t,d]=G.args;e===a&&i.update((e=>(e[t]=d,e)))}else if("update-delete"===G.handler){const[e,t]=G.args;e===a&&i.update((e=>(delete e[t],e)))}})),{store:i,set:(t,G)=>{i.update((e=>(e[t]=G,e))),browser.storage.local.set({[a]:(0,s.U2)(i)}),c(e,"update-set",[a,t,G])},del:t=>{i.update((e=>(delete e[t],e))),browser.storage.local.set({[a]:(0,s.U2)(i)}),c(e,"update-del",[a,t])}}}async function c(e,a,t=[]){const G={sender:e,handler:a,args:t};return await browser.runtime.sendMessage(G)}Object.entries({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}}).reduce(((e,[a,t])=>Object.assign(Object.assign({},e),Object.entries(t.items).reduce(((e,[a,t])=>(e[t.data]=t.display,e)),{}))),{}),t(434),t(374),e=t.hmd(e);const{Object:R}=G.lig;function l(e){const a={c:G.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:G.ZTd,p:G.ZTd,i:G.ZTd,o:G.ZTd,d:G.ZTd};return(0,G.YyZ)("SvelteRegisterBlock",{block:a,id:l.name,type:"component",source:"",ctx:e}),a}function p(e,a,t){let s,c=G.ZTd,l=()=>(c(),c=(0,G.LdU)(n,(e=>t(2,s=e))),n);e.$$.on_destroy.push((()=>c()));let{$$slots:p={},$$scope:X}=a;(0,G.KXV)("Main",p,[]);const A=o;let n,I;(0,d.H3)((function(){return(0,i.mG)(this,void 0,void 0,(function*(){l(t(0,({store:n,set:I}=yield T(A,"settings",r)),n));for(const[e,a]of Object.entries(r)){const t=s[e];if(void 0!==s[e]){let G=!1;for(const[e,i]of Object.entries(a)){const a=t[e];void 0!==a&&typeof a==typeof i||(t[e]=i,G=!0)}!0===G&&I(e,t)}else I(e,a)}}))}));const y=[];return R.keys(a).forEach((e=>{~y.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Main> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:i.mG,onMount:d.H3,backgroundSelf:o,defaultSettings:r,initializeStore:T,self:A,settings:n,setSettings:I,$settings:s}),e.$inject_state=e=>{"settings"in e&&l(t(0,n=e.settings)),"setSettings"in e&&(I=e.setSettings)},a&&"$$inject"in a&&e.$inject_state(a.$$inject),[n]}class X extends G.Mjb{constructor(e){super(e),(0,G.S1n)(this,e,p,l,G.N8,{}),(0,G.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Main",options:e,id:l.name})}}e&&e.hot;const A=X},258:(e,a,t)=>{new(t(59).Z)({target:document.body,props:{}})}},t={};function G(e){var i=t[e];if(void 0!==i)return i.exports;var d=t[e]={id:e,loaded:!1,exports:{}};return a[e](d,d.exports,G),d.loaded=!0,d.exports}G.m=a,e=[],G.O=(a,t,i,d)=>{if(!t){var s=1/0;for(c=0;c<e.length;c++){for(var[t,i,d]=e[c],o=!0,r=0;r<t.length;r++)(!1&d||s>=d)&&Object.keys(G.O).every((e=>G.O[e](t[r])))?t.splice(r--,1):(o=!1,d<s&&(s=d));if(o){e.splice(c--,1);var T=i();void 0!==T&&(a=T)}}return a}d=d||0;for(var c=e.length;c>0&&e[c-1][2]>d;c--)e[c]=e[c-1];e[c]=[t,i,d]},G.d=(e,a)=>{for(var t in a)G.o(a,t)&&!G.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:a[t]})},G.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),G.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),G.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),G.j=228,(()=>{var e={228:0};G.O.j=a=>0===e[a];var a=(a,t)=>{var i,d,[s,o,r]=t,T=0;if(s.some((a=>0!==e[a]))){for(i in o)G.o(o,i)&&(G.m[i]=o[i]);if(r)var c=r(G)}for(a&&a(t);T<s.length;T++)d=s[T],G.o(e,d)&&e[d]&&e[d][0](),e[s[T]]=0;return G.O(c)},t=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];t.forEach(a.bind(null,0)),t.push=a.bind(null,t.push.bind(t))})();var i=G.O(void 0,[154],(()=>G(258)));i=G.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,