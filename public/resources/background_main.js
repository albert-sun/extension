(()=>{"use strict";var e,t={198:(e,t,a)=>{a.d(t,{Z:()=>E});var i=a(234),o=a(655),s=a(568),r=a(261);(0,r.fZ)([]);const n={global:{display:"Global Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoOpenTab:{display:"Automatically open tab when script not detected",default:!0},playNotifications:{display:"Play notification sounds on events",default:!0},notificationError:{display:"Show desktop notification on extension error",default:!0},durationNotification:{display:"Notification popup duration before clearing",default:5e3,args:{suffix:"ms"}}}},bestbuy:{display:"Best Buy Settings",description:"Note that pop-up notifications can obscure the screen and forcefully change window focus when clicked - don't enable notifications if you're playing games!",settings:{autoAddQueue:{display:"Automatically execute queue add-to-cart when finished",default:!0},autoReload:{display:"Automatically reload tab on potential rate-limit (403/500)",default:!0},replaceQueue:{display:"Maintain shortest queue per SKU instead of multiple",default:!0},requeueSuccess:{display:"Re-queue with response queue on successful add-to-cart",default:!0},notificationSuccess:{display:"Show desktop notification on successful add-to-cart",default:!0},notificationFailure:{display:"Show desktop notification on failed add-to-cart",default:!0},notificationQueue:{display:"Show desktop notification on new queue interception",default:!0},notificationRateLimit:{display:"Show desktop notification on potential rate-limit (403/500)",default:!0}}}};var d;d={"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}},Object.entries(d).reduce(((e,[t,a])=>Object.assign(Object.assign({},e),Object.entries(a.items).reduce(((e,[t,a])=>(e[a.data]=a.display,e)),{}))),{});const c={type:"async",handler:"ping",args:[]};function l(e){return new Promise((t=>setTimeout(t,e)))}function G(e,t,a="info"){const i=`[${(new Date).toLocaleTimeString("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).substring(0,8)}]\t\t(${e})\t\t${t}`;"info"===a?console.log(i):"debug"===a?console.debug(i):"warn"===a?console.warn(i):"error"===a&&console.error(i)}function p(e,t,a){browser.runtime.onMessage.addListener((async(i,o)=>{const s=i;console.log("receive"),console.log(s);const r=t[s.handler];if("sync"===s.type||void 0!==r){if(console.log("got"),G(e,`Processing ${s.type} handler ${s.handler} with arguments ${JSON.stringify(s.args)}`),"async"===s.type){const e={result:"ok",payload:void 0};try{const t=await r(...s.args||[]);e.payload=t}catch(t){e.result="error",e.payload=t.message}return e}if("sync"===s.type){console.log("sync");const e={result:"ok",payload:void 0,execute:[]};a=a;try{const[t,i]=await a(s);e.payload=t,e.execute=i}catch(t){e.result="error",e.payload=t.message}return e}}throw new Error(`couldn't find handler ${s.handler}`)}))}async function T(e){return console.log("async"),console.log(e),await new Promise((t=>{browser.runtime.sendMessage(e).then((e=>t(e))).catch((e=>t({result:"error",payload:e.message})))}))}async function u(e,t){return console.log("tab"),console.log(t),await new Promise((a=>{browser.tabs.sendMessage(e,t).then((e=>a(e))).catch((e=>a({result:"error",payload:e.message})))}))}async function y(e,t){const a=await async function(e,t){const a=await browser.storage.local.get(e);return void 0===a[e]&&(a[e]=t),a[e]}(e,t),i=(0,r.fZ)(a);return browser.runtime.onMessage.addListener((async(t,a)=>{const o=t;if("update-set"===o.handler){const[t,a,s]=o.args;t===e&&i.update((e=>(e[a]=s,e)))}else if("update-delete"===o.handler){const[t,a]=o.args;t===e&&i.update((e=>(delete e[a],e)))}})),{store:i,set:(t,a)=>{i.update((e=>(e[t]=a,e))),browser.storage.local.set({[e]:(0,r.U2)(i)}),T({type:"async",handler:"update-set",args:[e,t,a]})},del:t=>{i.update((e=>(delete e[t],e))),browser.storage.local.set({[e]:(0,r.U2)(i)}),T({type:"async",handler:"update-del",args:[e,t]})}}}async function R(e,t,a=!0){for(;!0===a;){const a=await u(e,c);if(console.log(a),void 0!==a&&"string"!=typeof a)break;await l(t)}}const A={bestbuy:"https://*.bestbuy.com/*"};a(434),a(374),e=a.hmd(e);const{Error:X,Object:I}=i.lig;function f(e){const t={c:i.ZTd,l:function(e){throw new X("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:i.ZTd,p:i.ZTd,i:i.ZTd,o:i.ZTd,d:i.ZTd};return(0,i.YyZ)("SvelteRegisterBlock",{block:t,id:f.name,type:"component",source:"",ctx:e}),t}const S="background_main";function g(e,t,a){let r,d=i.ZTd,T=()=>(d(),d=(0,i.LdU)(F,(e=>a(4,r=e))),F);e.$$.on_destroy.push((()=>d()));let{$$slots:X={},$$scope:f}=t;(0,i.KXV)("Main",X,[]);let g,F,E={},h=[],M=!1;function N(){return(0,o.mG)(this,void 0,void 0,(function*(){if(!0!==M){for(M=!0;h.length>0;){const e=h.shift(),t={result:"not-found",payload:void 0,execute:[]},a=JSON.stringify(e);G(S,`Executing queued sequential request with body ${a}`);const i=A[null==e?void 0:e.urlMatch],o=yield browser.tabs.query({url:A[null==e?void 0:e.urlMatch],discarded:!1});0===o.length&&(G(S,`Couldn't find matching browser tabs with URL glob ${i}, resolving with not-found response`),e.resolve(t));let s=!1;for(const a of o){G(S,`Attempting to ping tab with ID ${a.id} and URL ${a.url}`);const i=yield u(a.id,c);if(void 0===i||"string"==typeof i){G(S,`Error pinging content script: ${i}`);continue}G(S,"Received successful ping response, broadcasting request");const o={type:"async",handler:e.handler,args:e.args},n=yield u(a.id,o);if(void 0===n||"string"==typeof n)throw new Error(`error communicating after ping: ${n}`);t.result="ok",t.payload=n,void 0!==n.payload.execute?(G(S,`Response received, performing execution handlers ${n.payload.execute}`),n.payload.execute.includes("reload")&&(G(S,`Executing reload for tab with ID ${a.id}`),yield browser.tabs.reload(a.id),yield l(2500),yield R(a.id,r.global.pollingInerval)),n.payload.execute.includes("retry")&&(G(S,"Executing retry, re-pushing request to back of queue"),h.push(e),s=!0)):G(S,"Response received, no execution handler necessary");break}if(!0===s)continue;const n=JSON.stringify(t);G(S,`Finished processing queued request, responding with body ${n}`),e.resolve(t)}M=!1}}))}function O(e){return(0,o.mG)(this,void 0,void 0,(function*(){return G(S,"Pushing request to back of queue for sync execution"),new Promise((t=>{const a=Object.assign(Object.assign({},e),{resolve:t});h.push(a),N()}))}))}function b(e,t=!0){return(0,o.mG)(this,void 0,void 0,(function*(){const a=yield browser.tabs.create({active:!1,url:e});!0===t&&(yield R(a.id,r.global.pollingInerval))}))}function U(e,t,a,i,s){return(0,o.mG)(this,void 0,void 0,(function*(){let o;return!0===r[i[0]][i[1]]&&(o=yield new Promise((e=>{chrome.notifications.create({type:"basic",title:t,message:a,iconUrl:"../resources/icon_512_dark.png",buttons:null==s?void 0:s.map((e=>({title:e})))},(function(t){e(t)}))})),setTimeout((()=>{chrome.notifications.clear(o)}),r.global.durationNotification)),!0===r.global.playNotifications&&new Audio(E[e]).play(),o}))}(0,s.H3)((function(){return(0,o.mG)(this,void 0,void 0,(function*(){g=yield y("settings",{}),T(a(0,F=g.store)),E={success:"../resources/notification_success.mp3",failure:"../resources/notification_queue.mp3",error:"../resources/notification_ratelimit.mp3",queue:"../resources/notification_queue.mp3"},G(S,"Merging stored settings with extension display values");for(const[e,t]of Object.entries(n)){const a=r[e];if(void 0!==a){let i=!1;for(const[o,s]of Object.entries(t.settings)){const t=a[o];void 0!==t&&typeof t==typeof s.default||(G(S,`Non-matching settings [${e}][${o}], merging`),a[o]=s.default,i=!0)}!0===i&&g.set(e,a)}else{G(S,`Stored settings category [${e}] not found, initializing`);const a=Object.entries(t.settings).reduce(((e,[t,a])=>(e[t]=a.default,e)),{});g.set(e,a)}}p(S,{"add-sync-request":O,"create-tab-ready":b,"sound-notification":U})}))}));const m=[];return I.keys(t).forEach((e=>{~m.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Main> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:o.mG,onMount:s.H3,settingsDisplays:n,pingRequest:c,extensionLog:G,initializeStore:y,messageProcessHandlers:p,pingTabReady:R,sendRequestContentAsync:u,sleep:l,domainMatches:A,self:S,notifications:E,queuedRequests:h,executing:M,settings:g,settings_store:F,performSyncRequests:N,addSyncRequest:O,createTabReady:b,soundNotification:U,$settings_store:r}),e.$inject_state=e=>{"notifications"in e&&(E=e.notifications),"queuedRequests"in e&&(h=e.queuedRequests),"executing"in e&&(M=e.executing),"settings"in e&&(g=e.settings),"settings_store"in e&&T(a(0,F=e.settings_store))},t&&"$$inject"in t&&e.$inject_state(t.$$inject),[F]}class F extends i.Mjb{constructor(e){super(e),(0,i.S1n)(this,e,g,f,i.N8,{}),(0,i.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Main",options:e,id:f.name})}}e&&e.hot;const E=F},258:(e,t,a)=>{new(a(198).Z)({target:document.body,props:{}})}},a={};function i(e){var o=a[e];if(void 0!==o)return o.exports;var s=a[e]={id:e,loaded:!1,exports:{}};return t[e](s,s.exports,i),s.loaded=!0,s.exports}i.m=t,e=[],i.O=(t,a,o,s)=>{if(!a){var r=1/0;for(l=0;l<e.length;l++){for(var[a,o,s]=e[l],n=!0,d=0;d<a.length;d++)(!1&s||r>=s)&&Object.keys(i.O).every((e=>i.O[e](a[d])))?a.splice(d--,1):(n=!1,s<r&&(r=s));if(n){e.splice(l--,1);var c=o();void 0!==c&&(t=c)}}return t}s=s||0;for(var l=e.length;l>0&&e[l-1][2]>s;l--)e[l]=e[l-1];e[l]=[a,o,s]},i.d=(e,t)=>{for(var a in t)i.o(t,a)&&!i.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.j=228,(()=>{var e={228:0};i.O.j=t=>0===e[t];var t=(t,a)=>{var o,s,[r,n,d]=a,c=0;if(r.some((t=>0!==e[t]))){for(o in n)i.o(n,o)&&(i.m[o]=n[o]);if(d)var l=d(i)}for(t&&t(a);c<r.length;c++)s=r[c],i.o(e,s)&&e[s]&&e[s][0](),e[r[c]]=0;return i.O(l)},a=self.webpackChunkakitos_automated_utilities=self.webpackChunkakitos_automated_utilities||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var o=i.O(void 0,[154],(()=>i(258)));o=i.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,