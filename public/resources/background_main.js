(()=>{"use strict";var e,a={59:(e,a,G)=>{G.d(a,{Z:()=>A});var t=G(234),d=G(655),i=G(568),r=G(261);(0,r.fZ)([]);const s="background",T={global:{forceTab:!1,pollingInterval:5e3}};async function o(e,a,G){const t=await async function(e,a){const G=await browser.storage.local.get(e);return void 0===G[e]&&(G[e]=a),G[e]}(a,G),d=(0,r.fZ)(t);return browser.runtime.onMessage.addListener((async(e,G)=>{const t=e;if("update-set"===t.handler){const[e,G]=t.args;e===a&&d.update((a=>(a[e]=G,a)))}else if("update-delete"===t.handler){const[e]=t.args;e===a&&d.update((a=>(delete a[e],a)))}})),{store:d,set:(G,t)=>{d.update((e=>(e[G]=t,e))),browser.storage.local.set({[a]:(0,r.U2)(d)}),c(e,"update-set",[a,G,t])},del:G=>{d.update((e=>(delete e[G],e))),browser.storage.local.set({[a]:(0,r.U2)(d)}),c(e,"update-del",[a,G])}}}async function c(e,a,G=[]){const t={sender:e,handler:a,args:G};return await browser.runtime.sendMessage(t)}Object.entries({"gtx-16":{display:"[Graphics] GeForce GTX 16-Series",items:[{display:"ASUS GeForce GTX 1660 SUPER TUF GAMING OC",data:"6405063"},{display:"EVGA GeForce GTX 1650 SUPER SUPER SC ULTRA GAMING",data:"6412939"},{display:"EVGA GeForce GTX 1660Ti SC ULTRA GAMING",data:"6373500"},{display:"MSI GeForce GTX 1650 SUPER GAMING X",data:"6397798"},{display:"MSI GeForce GTX 1660 SUPER GAMING X",data:"6389333"},{display:"MSI GeForce GTX 1660Ti GAMING X",data:"6330461"},{display:"PNY GeForce GTX 1650 SUPER XLR8 GAMING OC",data:"6407305"},{display:"PNY GeForce GTX 1660 SUPER XLR8 GAMING OC",data:"6407309"}]},"rtx-3060":{display:"[Graphics] GeForce RTX 3060",items:[{display:"ASUS GeForce RTX 3060 STRIX",data:"6460665"},{display:"ASUS GeForce RTX 3060 STRIX (LHR)",data:"6475224"},{display:"ASUS GeForce RTX 3060 TUF GAMING",data:"6460666"},{display:"ASUS GeForce RTX 3060 TUF GAMING (LHR)",data:"6475223"},{display:"EVGA GeForce RTX 3060 XC GAMING (KB)",data:"6454329"},{display:"EVGA GeForce RTX 3060 XC GAMING (KR)",data:"6454328"},{display:"GIGABYTE GeForce RTX 3060 AORUS ELITE",data:"6468910"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC",data:"6454689"},{display:"GIGABYTE GeForce RTX 3060 EAGLE OC (LHR)",data:"6468928"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC",data:"6454688"},{display:"GIGABYTE GeForce RTX 3060 GAMING OC (LHR)",data:"6468931"},{display:"GIGABYTE GeForce RTX 3060 VISION OC",data:"6468925"},{display:"MSI GeForce RTX 3060 GAMING X OC",data:"6476229"},{display:"MSI GeForce RTX 3060 VENTUS 2X OC",data:"6462173"},{display:"MSI GeForce RTX 3060 VENTUS 3X OC",data:"6452940"},{display:"PNY GeForce RTX 3060 XLR8 GAMING REVEL EPIC-X",data:"6454318"}]},"rtx-3060ti":{display:"[Graphics] GeForce RTX 3060Ti",items:[{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6475237"},{display:"ASUS GeForce RTX 3060Ti TUF GAMING",data:"6452573"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KB)",data:"6444444"},{display:"EVGA GeForce RTX 3060Ti FTW3 GAMING (KH, LHR)",data:"6479524"},{display:"GIGABYTE GeForce RTX 3060Ti AORUS EAGLE (LHR)",data:"6479686"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC",data:"6442485"},{display:"GIGABYTE GeForce RTX 3060Ti EAGLE OC (LHR)",data:"6471951"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC",data:"6471952"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR)",data:"6479688"},{display:"GIGABYTE GeForce RTX 3060Ti GAMING OC (LHR V2)",data:"6442484"},{display:"MSI GeForce RTX 3060Ti GAMING X",data:"6480291"},{display:"MSI GeForce RTX 3060Ti GAMING Z",data:"6476230"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC",data:"6441172"},{display:"MSI GeForce RTX 3060Ti VENTUS 2X OC (LHR)",data:"6471286"},{display:"MSI GeForce RTX 3060Ti VENTUS 3X OC",data:"6480307"},{display:"NVIDIA GeForce RTX 3060Ti FOUNDERS",data:"6439402"}]},"rtx-3070":{display:"[Graphics] GeForce RTX 3070",items:[{display:"ASUS GeForce RTX 3070 STRIX",data:"6439127"},{display:"ASUS GeForce RTX 3070 STRIX (LHR)",data:"6475228"},{display:"ASUS GeForce RTX 3070 TUF GAMING",data:"6439128"},{display:"ASUS GeForce RTX 3070 TUF GAMING (LHR)",data:"6475226"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KL, LHR)",data:"6479528"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KH, LHR)",data:"6477077"},{display:"EVGA GeForce RTX 3070 XC3 ULTRA GAMING (KB)",data:"6439299"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER",data:"6439384"},{display:"GIGABYTE GeForce RTX 3070 AORUS MASTER (LHR)",data:"6479685"},{display:"GIGABYTE GeForce RTX 3070 EAGLE",data:"6437912"},{display:"GIGABYTE GeForce RTX 3070 EAGLE OC (LHR)",data:"6471958"},{display:"GIGABYTE GeForce RTX 3070 GAMING OC",data:"6437909"},{display:"GIGABYTE GeForce RTX 3070 VISION OC",data:"6439385"},{display:"MSI GeForce RTX 3070 GAMING Z TRIO",data:"6471285"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC",data:"6462266"},{display:"MSI GeForce RTX 3070 VENTUS 2X OC (LHR)",data:"6480308"},{display:"MSI GeForce RTX 3070 VENTUS 3X OC",data:"6438278"},{display:"MSI GeForce RTX 3070 GAMING X TRIO",data:"6438279"},{display:"NVIDIA GeForce RTX 3070 FOUNDERS",data:"6429442"}]},"rtx-3070ti":{display:"[Graphics] GeForce RTX 3070Ti",items:[{display:"ASUS GeForce RTX 3070Ti STRIX",data:"6467838"},{display:"ASUS GeForce RTX 3070Ti TUF GAMING",data:"6467840"},{display:"GIGABYTE GeForce RTX 3070Ti AORUS MASTER",data:"6467788"},{display:"GIGABYTE GeForce RTX 3070Ti GAMING OC",data:"6467779"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE",data:"6467782"},{display:"GIGABYTE GeForce RTX 3070Ti EAGLE OC",data:"6467781"},{display:"GIGABYTE GeForce RTX 3070Ti VISION OC",data:"6467785"},{display:"MSI GeForce RTX 3070Ti GAMING X TRIO",data:"6467497"},{display:"MSI GeForce RTX 3070Ti VENTUS 3X OC",data:"6467500"},{display:"NVIDIA GeForce RTX 3070Ti FOUNDERS",data:"6465789"}]},"rtx-3080":{display:"[Graphics] GeForce RTX 3080",items:[{display:"ASUS GeForce RTX 3080 STRIX",data:"6432445"},{display:"ASUS GeForce RTX 3080 STRIX (LHR)",data:"6475238"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KB)",data:"6432400"},{display:"EVGA GeForce RTX 3080 XC3 ULTRA GAMING (KH, LHR)",data:"6471615"},{display:"GIGABYTE GeForce RTX 3080 AORUS MASTER (LHR)",data:"6462198"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME",data:"6436223"},{display:"GIGABYTE GeForce RTX 3080 AORUS XTREME (LHR)",data:"6471954"},{display:"GIGABYTE GeForce RTX 3080 EAGLE OC",data:"6430621"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC",data:"6430620"},{display:"GIGABYTE GeForce RTX 3080 GAMING OC (LHR)",data:"6471960"},{display:"GIGABYTE GeForce RTX 3080 VISION OC",data:"6436219"},{display:"GIGABYTE GeForce RTX 3080 VISION OC (LHR)",data:"6471957"},{display:"MSI GeForce RTX 3080 GAMING Z TRIO",data:"6480289"},{display:"MSI GeForce RTX 3080 VENTUS 3X (LHR)",data:"6471287"},{display:"MSI GeForce RTX 3080 VENTUS 3X OC",data:"6430175"},{display:"MSI GeForce RTX 3080 VENTUS 3X PLUS (LHR)",data:"6480306"},{display:"NVIDIA GeForce RTX 3080 FOUNDERS",data:"6429440"}]},"rtx-3080ti":{display:"[Graphics] GeForce RTX 3080Ti",items:[{display:"ASUS GeForce RTX 3080Ti STRIX",data:"6466931"},{display:"ASUS GeForce RTX 3080Ti TUF GAMING",data:"6466932"},{display:"EVGA GeForce RTX 3080Ti FTW3 ULTRA GAMING (KB)",data:"6467808"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS MASTER",data:"6468932"},{display:"GIGABYTE GeForce RTX 3080Ti AORUS XTREME",data:"6468933"},{display:"GIGABYTE GeForce RTX 3080Ti GAMING OC",data:"6466561"},{display:"GIGABYTE GeForce RTX 3080Ti VISION OC",data:"6466564"},{display:"MSI GeForce RTX 3080Ti GAMING X TRIO",data:"6465803"},{display:"MSI GeForce RTX 3080Ti VENTUS 3X OC",data:"6472637"},{display:"NVIDIA GeForce RTX 3080Ti FOUNDERS",data:"6462956"},{display:"PNY GeForce RTX 3080Ti XLR8 GAMING REVEL EPIC-X",data:"6467289"}]},"rtx-3090":{display:"[Graphics] GeForce RTX 3090",items:[{display:"ASUS GeForce RTX 3090 STRIX",data:"6432447"},{display:"ASUS GeForce RTX 3090 TUF GAMING",data:"6432446"},{display:"EVGA GeForce RTX 3090 XC3 ULTRA GAMING (KB)",data:"6434198"},{display:"GIGABYTE GeForce RTX 3090 AORUS MASTER",data:"6437910"},{display:"GIGABYTE GeForce RTX 3090 EAGLE OC",data:"6430624"},{display:"GIGABYTE GeForce RTX 3090 GAMING OC",data:"6430623"},{display:"GIGABYTE GeForce RTX 3090 VISION OC",data:"6445108"},{display:"MSI GeForce RTX 3090 GAMING X TRIO",data:"6468863"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC",data:"SKU: 6472646"},{display:"MSI GeForce RTX 3090 VENTUS 3X OC (?)",data:"6430215"},{display:"NVIDIA GeForce RTX 3090 FOUNDERS",data:"6429434"}]}}).reduce(((e,[a,G])=>Object.assign(Object.assign({},e),Object.entries(G).reduce(((e,[a,G])=>(e[a]=G.display,e)),{}))),{}),G(434),G(374),e=G.hmd(e);const{Object:R}=t.lig;function l(e){const a={c:t.ZTd,l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:t.ZTd,p:t.ZTd,i:t.ZTd,o:t.ZTd,d:t.ZTd};return(0,t.YyZ)("SvelteRegisterBlock",{block:a,id:l.name,type:"component",source:"",ctx:e}),a}function p(e,a,G){let r,c=t.ZTd,l=()=>(c(),c=(0,t.LdU)(I,(e=>G(2,r=e))),I);e.$$.on_destroy.push((()=>c()));let{$$slots:p={},$$scope:X}=a;(0,t.KXV)("Main",p,[]);const A=s;let I,n;(0,i.H3)((function(){return(0,d.mG)(this,void 0,void 0,(function*(){l(G(0,({store:I,set:n}=yield o(A,"settings",T)),I));for(const[e,a]of Object.entries(T)){const G=r[e];if(void 0!==r[e]){let t=!1;for(const[e,d]of Object.entries(a)){const a=G[e];void 0!==a&&typeof a==typeof d||(G[e]=d,t=!0)}!0===t&&n(e,G)}else n(e,a)}}))}));const y=[];return R.keys(a).forEach((e=>{~y.indexOf(e)||"$$"===e.slice(0,2)||"slot"===e||console.warn(`<Main> was created with unknown prop '${e}'`)})),e.$capture_state=()=>({__awaiter:d.mG,onMount:i.H3,backgroundSelf:s,defaultSettings:T,initializeStore:o,self:A,settings:I,setSettings:n,$settings:r}),e.$inject_state=e=>{"settings"in e&&l(G(0,I=e.settings)),"setSettings"in e&&(n=e.setSettings)},a&&"$$inject"in a&&e.$inject_state(a.$$inject),[I]}class X extends t.Mjb{constructor(e){super(e),(0,t.S1n)(this,e,p,l,t.N8,{}),(0,t.YyZ)("SvelteRegisterComponent",{component:this,tagName:"Main",options:e,id:l.name})}}e&&e.hot;const A=X},258:(e,a,G)=>{new(G(59).Z)({target:document.body,props:{}})}},G={};function t(e){var d=G[e];if(void 0!==d)return d.exports;var i=G[e]={id:e,loaded:!1,exports:{}};return a[e](i,i.exports,t),i.loaded=!0,i.exports}t.m=a,e=[],t.O=(a,G,d,i)=>{if(!G){var r=1/0;for(c=0;c<e.length;c++){for(var[G,d,i]=e[c],s=!0,T=0;T<G.length;T++)(!1&i||r>=i)&&Object.keys(t.O).every((e=>t.O[e](G[T])))?G.splice(T--,1):(s=!1,i<r&&(r=i));if(s){e.splice(c--,1);var o=d();void 0!==o&&(a=o)}}return a}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[G,d,i]},t.d=(e,a)=>{for(var G in a)t.o(a,G)&&!t.o(e,G)&&Object.defineProperty(e,G,{enumerable:!0,get:a[G]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),t.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),t.j=228,(()=>{var e={228:0};t.O.j=a=>0===e[a];var a=(a,G)=>{var d,i,[r,s,T]=G,o=0;if(r.some((a=>0!==e[a]))){for(d in s)t.o(s,d)&&(t.m[d]=s[d]);if(T)var c=T(t)}for(a&&a(G);o<r.length;o++)i=r[o],t.o(e,i)&&e[i]&&e[i][0](),e[r[o]]=0;return t.O(c)},G=self.webpackChunkgraphics_queue_utilities=self.webpackChunkgraphics_queue_utilities||[];G.forEach(a.bind(null,0)),G.push=a.bind(null,G.push.bind(G))})();var d=t.O(void 0,[154],(()=>t(258)));d=t.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,